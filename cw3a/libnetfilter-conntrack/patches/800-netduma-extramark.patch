Â© Netduma Software Ltd 2021
Added extra_mark to skb and ct.
This patch is a combination of Netduma patches provided in NG-204909.

--- a/include/internal/object.h
+++ b/include/internal/object.h
@@ -162,6 +162,7 @@ struct nf_conntrack {
 
 	uint32_t 	timeout;
 	uint32_t	mark;
+	uint32_t	extra_mark[1];
 	uint32_t	secmark;
 	uint32_t 	status;
 	uint32_t	use;
--- a/src/conntrack/build_mnl.c
+++ b/src/conntrack/build_mnl.c
@@ -395,6 +395,13 @@ nfct_build_mark(struct nlmsghdr *nlh, co
 }
 
 static int
+nfct_build_extra_mark(struct nlmsghdr *nlh, const struct nf_conntrack *ct)
+{
+	mnl_attr_put_u32(nlh, CTA_EXTRA_MARK, htonl(ct->extra_mark[0]));
+	return 0;
+}
+
+static int
 nfct_build_secmark(struct nlmsghdr *nlh, const struct nf_conntrack *ct)
 {
 	mnl_attr_put_u32(nlh, CTA_SECMARK, htonl(ct->secmark));
@@ -538,6 +545,9 @@ nfct_nlmsg_build(struct nlmsghdr *nlh, c
 	if (test_bit(ATTR_MARK, ct->head.set))
 		nfct_build_mark(nlh, ct);
 
+	if (test_bit(ATTR_EXTRA_MARK, ct->head.set))
+		nfct_build_extra_mark(nlh, ct);
+
 	if (test_bit(ATTR_SECMARK, ct->head.set))
 		nfct_build_secmark(nlh, ct);
 
--- a/src/conntrack/compare.c
+++ b/src/conntrack/compare.c
@@ -318,7 +318,16 @@ cmp_mark(const struct nf_conntrack *ct1,
 	       nfct_get_attr_u32(ct2, ATTR_MARK);
 }
 
-static int 
+static int
+cmp_extra_mark(const struct nf_conntrack *ct1,
+	 const struct nf_conntrack *ct2,
+	 unsigned int flags)
+{
+	return nfct_get_attr_u32(ct1, ATTR_EXTRA_MARK) ==
+	       nfct_get_attr_u32(ct2, ATTR_EXTRA_MARK);
+}
+
+static int
 cmp_timeout(const struct nf_conntrack *ct1,
 	    const struct nf_conntrack *ct2,
 	    unsigned int flags)
@@ -448,6 +457,8 @@ static int cmp_meta(const struct nf_conn
 		return 0;
 	if (!__cmp(ATTR_MARK, ct1, ct2, flags, cmp_mark, false))
 		return 0;
+	if (!__cmp(ATTR_EXTRA_MARK, ct1, ct2, flags, cmp_extra_mark, false))
+		return 0;
 	if (!__cmp(ATTR_TIMEOUT, ct1, ct2, flags, cmp_timeout, true))
 		return 0;
 	if (!__cmp(ATTR_STATUS, ct1, ct2, flags, cmp_status, true))
--- a/src/conntrack/copy.c
+++ b/src/conntrack/copy.c
@@ -334,6 +334,12 @@ static void copy_attr_mark(struct nf_con
 	dest->mark = orig->mark;
 }
 
+static void copy_attr_extra_mark(struct nf_conntrack *dest,
+			   const struct nf_conntrack *orig)
+{
+	dest->extra_mark[0] = orig->extra_mark[0];
+}
+
 static void copy_attr_secmark(struct nf_conntrack *dest,
 			      const struct nf_conntrack *orig)
 {
@@ -543,6 +549,7 @@ const copy_attr copy_attr_array[ATTR_MAX
 	[ATTR_DNAT_PORT]		= copy_attr_dnat_port,
 	[ATTR_TIMEOUT]			= copy_attr_timeout,
 	[ATTR_MARK]			= copy_attr_mark,
+	[ATTR_EXTRA_MARK]		= copy_attr_extra_mark,
 	[ATTR_ORIG_COUNTER_PACKETS] 	= copy_attr_orig_counter_packets,
 	[ATTR_ORIG_COUNTER_BYTES]	= copy_attr_orig_counter_bytes,
 	[ATTR_REPL_COUNTER_PACKETS]	= copy_attr_repl_counter_packets,
--- a/src/conntrack/filter_dump.c
+++ b/src/conntrack/filter_dump.c
@@ -17,6 +17,8 @@ set_filter_dump_attr_mark(struct nfct_fi
 
 	filter_dump->mark.val = this->val;
 	filter_dump->mark.mask = this->mask;
+	filter_dump->mark.extra_val = this->extra_val;
+	filter_dump->mark.extra_mask = this->extra_mask;
 }
 
 static void
@@ -39,6 +41,10 @@ void __build_filter_dump(struct nfnlhdr
 				htonl(filter_dump->mark.val));
 		nfnl_addattr32(&req->nlh, size, CTA_MARK_MASK,
 				htonl(filter_dump->mark.mask));
+		nfnl_addattr32(&req->nlh, size, CTA_EXTRA_MARK,
+				htonl(filter_dump->mark.extra_val));
+		nfnl_addattr32(&req->nlh, size, CTA_EXTRA_MARK_MASK,
+				htonl(filter_dump->mark.extra_mask));
 	}
 	if (filter_dump->set & (1 << NFCT_FILTER_DUMP_L3NUM)) {
 		struct nfgenmsg *nfg = NLMSG_DATA(&req->nlh);
--- a/src/conntrack/getter.c
+++ b/src/conntrack/getter.c
@@ -244,6 +244,11 @@ static const void *get_attr_mark(const s
 	return &ct->mark;
 }
 
+static const void *get_attr_extra_mark(const struct nf_conntrack *ct)
+{
+	return &ct->extra_mark[0];
+}
+
 static const void *get_attr_secmark(const struct nf_conntrack *ct)
 {
 	return &ct->secmark;
@@ -411,6 +416,7 @@ const get_attr get_attr_array[ATTR_MAX]
 	[ATTR_DNAT_PORT]		= get_attr_dnat_port,
 	[ATTR_TIMEOUT]			= get_attr_timeout,
 	[ATTR_MARK]			= get_attr_mark,
+	[ATTR_EXTRA_MARK]		= get_attr_extra_mark,
 	[ATTR_ORIG_COUNTER_PACKETS] 	= get_attr_orig_counter_packets,
 	[ATTR_ORIG_COUNTER_BYTES]	= get_attr_orig_counter_bytes,
 	[ATTR_REPL_COUNTER_PACKETS]	= get_attr_repl_counter_packets,
--- a/src/conntrack/parse_mnl.c
+++ b/src/conntrack/parse_mnl.c
@@ -884,6 +884,7 @@ nfct_parse_conntrack_attr_cb(const struc
 	case CTA_STATUS:
 	case CTA_TIMEOUT:
 	case CTA_MARK:
+	case CTA_EXTRA_MARK:
 	case CTA_SECMARK:
 	case CTA_USE:
 	case CTA_ID:
@@ -972,6 +973,11 @@ nfct_payload_parse(const void *payload,
 		set_bit(ATTR_MARK, ct->head.set);
 	}
 
+	if (tb[CTA_EXTRA_MARK]) {
+		ct->extra_mark[0] = ntohl(mnl_attr_get_u32(tb[CTA_EXTRA_MARK]));
+		set_bit(ATTR_EXTRA_MARK, ct->head.set);
+	}
+
 	if (tb[CTA_SECMARK]) {
 		ct->secmark = ntohl(mnl_attr_get_u32(tb[CTA_SECMARK]));
 		set_bit(ATTR_SECMARK, ct->head.set);
--- a/src/conntrack/setter.c
+++ b/src/conntrack/setter.c
@@ -285,6 +285,12 @@ set_attr_mark(struct nf_conntrack *ct, c
 }
 
 static void
+set_attr_extra_mark(struct nf_conntrack *ct, const void *value, size_t len)
+{
+	ct->extra_mark[0] = *((u_int32_t *) value);
+}
+
+static void
 set_attr_secmark(struct nf_conntrack *ct, const void *value, size_t len)
 {
 	ct->secmark = *((uint32_t *) value);
@@ -515,6 +521,7 @@ const set_attr set_attr_array[ATTR_MAX]
 	[ATTR_DNAT_PORT]	= set_attr_dnat_port,
 	[ATTR_TIMEOUT]		= set_attr_timeout,
 	[ATTR_MARK]		= set_attr_mark,
+	[ATTR_EXTRA_MARK]	= set_attr_extra_mark,
 	[ATTR_ORIG_COUNTER_PACKETS]	= set_attr_do_nothing,
 	[ATTR_REPL_COUNTER_PACKETS]	= set_attr_do_nothing,
 	[ATTR_ORIG_COUNTER_BYTES]	= set_attr_do_nothing,
--- a/src/conntrack/snprintf_default.c
+++ b/src/conntrack/snprintf_default.c
@@ -221,6 +221,12 @@ __snprintf_mark(char *buf, unsigned int
 }
 
 static int
+__snprintf_extra_mark(char *buf, unsigned int len, const struct nf_conntrack *ct)
+{
+	return (snprintf(buf, len, "extra_mark=%u ", ct->extra_mark[0]));
+}
+
+static int
 __snprintf_secmark(char *buf, unsigned int len, const struct nf_conntrack *ct)
 {
 	return (snprintf(buf, len, "secmark=%u ", ct->secmark));
@@ -449,6 +455,11 @@ int __snprintf_conntrack_default(char *b
 		BUFFER_SIZE(ret, size, len, offset);
 	}
 
+	if (test_bit(ATTR_EXTRA_MARK, ct->head.set)) {
+		ret = __snprintf_extra_mark(buf+offset, len, ct);
+		BUFFER_SIZE(ret, size, len, offset);
+	}
+
 	if (test_bit(ATTR_SECMARK, ct->head.set)) {
 		ret = __snprintf_secmark(buf+offset, len, ct);
 		BUFFER_SIZE(ret, size, len, offset);
--- a/include/libnetfilter_conntrack/libnetfilter_conntrack.h
+++ b/include/libnetfilter_conntrack/libnetfilter_conntrack.h
@@ -144,6 +144,7 @@ enum nf_conntrack_attr {
 	ATTR_SYNPROXY_ISN,			/* u32 bits */
 	ATTR_SYNPROXY_ITS,			/* u32 bits */
 	ATTR_SYNPROXY_TSOFF,			/* u32 bits */
+	ATTR_EXTRA_MARK,
 	ATTR_MAX
 };
 
@@ -540,6 +541,8 @@ struct nfct_filter_dump;
 struct nfct_filter_dump_mark {
 	uint32_t val;
 	uint32_t mask;
+	uint32_t extra_val;
+	uint32_t extra_mask;
 };
 
 enum nfct_filter_dump_attr {
--- a/include/libnetfilter_conntrack/linux_nfnetlink_conntrack.h
+++ b/include/libnetfilter_conntrack/linux_nfnetlink_conntrack.h
@@ -58,6 +58,10 @@ enum ctattr_type {
 	CTA_LABELS,
 	CTA_LABELS_MASK,
 	CTA_SYNPROXY,
+	CTA_DPI,
+	CTA_SGS,
+	CTA_EXTRA_MARK,
+	CTA_EXTRA_MARK_MASK,
 	__CTA_MAX
 };
 #define CTA_MAX (__CTA_MAX - 1)
