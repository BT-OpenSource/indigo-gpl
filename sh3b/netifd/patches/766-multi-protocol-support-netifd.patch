diff --git a/config.c b/config.c
index d4a6516..9b4f4a5 100644
--- a/config.c
+++ b/config.c
@@ -689,6 +689,117 @@ config_init_wireless(void)
 		vlist_flush(&wdev->interfaces);
 }
 
+static void config_interface_redo_config(struct interface *iface, const char *proto_name)
+{
+	struct uci_element *e;
+	struct blob_attr *config;
+	bool bridge = false;
+	struct device_type *devtype = NULL;
+	struct uci_section *s;
+	const char *type = NULL;
+	char *iface_name = NULL;
+
+	uci_foreach_element(&uci_network->sections, e)
+	{
+		s = uci_to_section(e);
+		if (!strcmp(s->type, "interface")) {
+			iface_name = strdup(s->e.name);
+			if(!strcmp(iface_name, iface->name))
+			{
+				break;    
+			}
+		}
+	}
+
+	blob_buf_init(&b, 0);
+
+	proto_attach_interface(iface, proto_name);
+	uci_to_blob(&b, s, &interface_attr_list);
+
+	if (iface->proto_handler && iface->proto_handler->config_params)
+		uci_to_blob(&b, s, iface->proto_handler->config_params);
+
+	type = uci_lookup_option_string(uci_ctx, s, "type");
+	if (type){
+		devtype = device_type_get(type);
+	}
+
+	if (devtype && devtype->bridge_capability) {
+		if (config_parse_bridge_interface(s, devtype))
+			return;
+
+		bridge = true;
+	}
+
+	if (!bridge && uci_to_blob(&b, s, simple_device_type.config_params))
+		iface->device_config = true;
+
+	config = blob_memdup(b.head);
+	iface->config = config;
+	free(iface_name);
+}
+
+void config_init_proto(const char *ifname)
+{
+	struct uci_element *e;
+	char *proto_name = NULL;
+	struct interface *iface;
+	uci_foreach_element(&uci_network->sections, e)
+	{
+		struct uci_section *s = uci_to_section(e);
+
+		if (!strcmp(s->type, "proto")) {
+			if(s->e.name == NULL){
+				goto error;
+			}
+
+			//Save protocol name
+			proto_name = strdup(s->e.name);
+			if(!proto_name) {
+				netifd_log_message(L_CRIT, "%s:%d error allocating UCI section name", __func__, __LINE__);
+				goto error;
+			}
+
+			const char *proto_device = uci_lookup_option_string(uci_ctx, s, "device");
+			if(!proto_device) {
+				netifd_log_message(L_WARNING, "%s:%d device missing from proto '%s' UCI section - invalid configuration.", __func__, __LINE__, proto_name);
+				goto error;
+			}
+
+			struct device *dev= NULL;
+			dev = device_find(proto_device);
+			if(!dev || !dev->present) {
+				netifd_log_message(L_DEBUG, "%s:%d device %s not present. skipping...", __func__, __LINE__, proto_device);
+				continue;
+			}
+
+			const char *proto_ifname = uci_lookup_option_string(uci_ctx, s, "ifname");
+			if (!proto_ifname) {
+				netifd_log_message(L_WARNING, "%s:%d ifname missing from proto '%s' UCI section - invalid configuration.", __func__, __LINE__, proto_name);
+				goto error;
+			}
+
+			if (ifname && strcmp(ifname, proto_ifname))
+				continue;
+
+			// Find the interface that supports this multi protocol and check whether the device matches
+			iface = vlist_find(&interfaces, proto_ifname, iface, node);
+			if (!iface || !iface->main_dev.dev || strcmp(iface->main_dev.dev->ifname, proto_device)) {
+				netifd_log_message(L_DEBUG, "%s:%d Device '%s' not found on interface '%s'", __func__, __LINE__, proto_device, proto_ifname);
+				continue;
+			}
+			if (iface->proto_handler && iface->proto_handler->name && !strcmp(iface->proto_handler->name, proto_name)) {
+				netifd_log_message(L_DEBUG, "%s:%d Interface '%s' already using protocol: '%s'", __func__, __LINE__, proto_ifname, iface->proto_handler->name);
+			} else {
+				netifd_log_message(L_DEBUG, "%s:%d Redo config for %s proto %s", __func__, __LINE__, iface->main_dev.dev->ifname, proto_name);
+				config_interface_redo_config(iface, proto_name);
+				proto_init_interface(iface, iface->config);
+			}
+		}
+	}
+error:
+	free(proto_name);
+}
 
 static struct blob_attr *
 config_find_blobmsg_attr(struct blob_attr *attr, const char *name, int type)
diff --git a/config.h b/config.h
index 635a398..628c50c 100644
--- a/config.h
+++ b/config.h
@@ -24,4 +24,5 @@ struct ether_addr *config_get_default_macaddr(const char *ifname);
 int config_get_default_gro(const char *ifname);
 const char *config_get_default_conduit(const char *ifname);
 
+void config_init_proto(const char *ifname);
 #endif
diff --git a/interface.c b/interface.c
index 03c781b..d8cb018 100644
--- a/interface.c
+++ b/interface.c
@@ -721,6 +721,9 @@ interface_do_reload(struct interface *iface)
 	interface_cleanup_state(iface);
 	proto_init_interface(iface, iface->config);
 	interface_claim_device(iface);
+	// Re-init the protocol config incase this is an anywan device and the claim_device has
+	// identified a different main device
+	config_init_proto(iface->name);
 }
 
 static void
@@ -1178,6 +1181,7 @@ interface_start_pending(void)
 {
 	struct interface *iface;
 
+	config_init_proto(NULL);//Apply all proto sections
 	vlist_for_each_element(&interfaces, iface, node) {
 		if (iface->autostart)
 			interface_set_up(iface);
@@ -1409,6 +1413,9 @@ interface_update(struct vlist_tree *tree, struct vlist_node *node_new,
 		interface_event(if_new, IFEV_CREATE);
 		proto_init_interface(if_new, if_new->config);
 		interface_claim_device(if_new);
+		// Re-init the protocol config incase this is an anywan device and the claim_device has
+		// identified a different main device
+		config_init_proto(if_new->name);
 		netifd_ubus_add_interface(if_new);
 	}
 }
