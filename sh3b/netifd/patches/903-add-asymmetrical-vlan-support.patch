diff --git a/system-linux.c b/system-linux.c
index f3d381e..02f618b 100644
--- a/system-linux.c
+++ b/system-linux.c
@@ -1688,7 +1688,8 @@ int system_vlan_del(struct device *dev)
 
 int system_vlandev_add(struct device *vlandev, struct device *dev, struct vlandev_config *cfg)
 {
-	char proto[20];
+	char rxproto[20];
+	char txproto[20];
         char cmd[2048];
         char egr_qos_map[100];
         char ing_qos_map[100];
@@ -1697,13 +1698,16 @@ int system_vlandev_add(struct device *vlandev, struct device *dev, struct vlande
 
 	switch (cfg->proto) {
 	case VLAN_PROTO_UNTAGGED:
-		strcpy(proto, "untagged");
+		strcpy(rxproto, "untagged");
+		strcpy(txproto, "untagged");
 		break;
 	case VLAN_PROTO_8021Q:
-		strcpy(proto, "8021q");
+		strcpy(rxproto, "8021q");
+		strcpy(txproto, "8021q");
 		break;
 	case VLAN_PROTO_8021AD:
-		strcpy(proto, "8021ad");
+		strcpy(rxproto, "8021ad");
+		strcpy(txproto, "8021ad");
 		break;
 	}
 
@@ -1723,12 +1727,21 @@ int system_vlandev_add(struct device *vlandev, struct device *dev, struct vlande
                          sprintf(dscp2pbit_map+strlen(dscp2pbit_map), "%d:%d ", elem->from, elem->to);
                 }
 
+		/* In the network config if the type is 8021q and if txvid & rxvid are not same then
+		 * its considered as asymmetric vlan support so in this case the tx type will be 8021q &
+		 * rx type will be untagged. */
+		if ((cfg->proto == VLAN_PROTO_8021Q) && (cfg->txvid != cfg->rxvid))
+			strcpy(rxproto, "untagged");
+
+		D(SYSTEM, "Vlan configs create: name %s txtype %s txvid %d rxtype %s rxvid %d\n", vlandev->ifname,
+				txproto, cfg->txvid, rxproto, cfg->vid);
+
                 memset(cmd, 0, sizeof(cmd));
-                snprintf(cmd, sizeof(cmd), "/sbin/vlanconf create --name %s --ifname %s --type %s "
-			"--vlan-id %d --translated-vlan-id %d --priority %d --inner-vlan-id %d --inner-priority %d --dscp %d "
+                snprintf(cmd, sizeof(cmd), "/sbin/vlanconf create --name %s --ifname %s --txtype %s --txvid %d --rxtype %s"
+			" --rxvid %d --translated-vlan-id %d --priority %d --inner-vlan-id %d --inner-priority %d --dscp %d "
 			"--multicast-mode %s --egress-qos-map %s --ingress-qos-map %s --dscp2pbit %s",
-				 vlandev->ifname, dev->ifname, proto,
-				 cfg->vid, cfg->tvid, cfg->priority, cfg->inner_vid, cfg->inner_priority, cfg->dscp,
+				 vlandev->ifname, dev->ifname, txproto, cfg->txvid,  rxproto, cfg->rxvid,
+				 cfg->tvid, cfg->priority, cfg->inner_vid, cfg->inner_priority, cfg->dscp,
 				 (cfg->mcmode == MULTICAST_MODE_ONT) ? "ont":"rg", egr_qos_map, ing_qos_map,
 				 dscp2pbit_map);
 		return system(cmd);
@@ -3636,7 +3649,7 @@ static void system_vxlan_map_bool_attr(struct nl_msg *msg, struct blob_attr **tb
 
 		if ((attrtype == IFLA_VXLAN_GBP) && val)
 			nla_put_flag(msg, attrtype);
-		else 
+		else
 			nla_put_u8(msg, attrtype, val);
 
 	}
diff --git a/system.h b/system.h
index 0b682b4..1e3af80 100644
--- a/system.h
+++ b/system.h
@@ -192,9 +192,11 @@ struct vlandev_config {
 	uint16_t inner_vid;
 	uint16_t inner_priority;
 	uint16_t dscp;
+	uint16_t txvid;                                    /*tagging settings for tx */
+	uint16_t rxvid;                                    /*tagging settings for rx */
 	struct vlist_simple_tree ingress_qos_mapping_list; /* list of struct vlan_qos_mapping */
 	struct vlist_simple_tree egress_qos_mapping_list;  /* list of struct vlan_qos_mapping */
-        struct vlist_simple_tree dscp2pbit_mapping_list;   /* list of struct vlan_qos_mapping */
+	struct vlist_simple_tree dscp2pbit_mapping_list;   /* list of struct vlan_qos_mapping */
 };
 
 enum bonding_mode {
diff --git a/vlandev.c b/vlandev.c
index d9fe619..7e0a386 100644
--- a/vlandev.c
+++ b/vlandev.c
@@ -24,6 +24,8 @@
 enum {
 	VLANDEV_ATTR_IFNAME,
 	VLANDEV_ATTR_VID,
+	VLANDEV_ATTR_TXVID,
+	VLANDEV_ATTR_RXVID,
 	VLANDEV_ATTR_TVID,
 	VLANDEV_ATTR_PRIORITY,
 	VLANDEV_ATTR_INNER_VID,
@@ -39,6 +41,8 @@ enum {
 static const struct blobmsg_policy vlandev_attrs[__VLANDEV_ATTR_MAX] = {
 	[VLANDEV_ATTR_IFNAME] = { "ifname", BLOBMSG_TYPE_STRING },
 	[VLANDEV_ATTR_VID] = { "vid", BLOBMSG_TYPE_STRING },
+	[VLANDEV_ATTR_TXVID] = { "txvid", BLOBMSG_TYPE_STRING },
+	[VLANDEV_ATTR_RXVID] = { "rxvid", BLOBMSG_TYPE_STRING },
 	[VLANDEV_ATTR_TVID] = { "tvid", BLOBMSG_TYPE_INT32 },
 	[VLANDEV_ATTR_PRIORITY] = { "priority", BLOBMSG_TYPE_INT32 },
 	[VLANDEV_ATTR_INNER_VID] = { "inner_vid", BLOBMSG_TYPE_INT32 },
@@ -74,6 +78,8 @@ struct vlandev_device {
 	struct blob_attr *config_data;
 	struct blob_attr *ifname;
 	struct blob_attr *vid;
+	struct blob_attr *txvid;
+	struct blob_attr *rxvid;
 
 	struct vlandev_config config;
 };
@@ -90,7 +96,9 @@ __vlandev_hotplug_op(struct device *dev, struct device *member, struct blob_attr
 
 	blob_buf_init(&b, 0);
 	a = blobmsg_open_array(&b, "vlans");
-	blobmsg_printf(&b, NULL, "%d", mvdev->config.vid);
+	blobmsg_printf(&b, NULL, "%u", (unsigned int) mvdev->config.vid);
+	blobmsg_printf(&b, NULL, "%u", (unsigned int) mvdev->config.txvid);
+	blobmsg_printf(&b, NULL, "%u", (unsigned int) mvdev->config.rxvid);
 	blobmsg_close_array(&b, a);
 
 	if (add)
@@ -253,6 +261,8 @@ vlandev_dump_info(struct device *dev, struct blob_buf *b)
 	blobmsg_add_string(b, "parent", mvdev->parent.dev->ifname);
 	system_if_dump_info(dev, b);
 	blobmsg_add_u32(b, "vid", mvdev->config.vid);
+	blobmsg_add_u32(b, "tx_vid", mvdev->config.txvid);
+	blobmsg_add_u32(b, "rx_vid", mvdev->config.rxvid);
 	vlandev_qos_mapping_dump(b, "ingress_qos_mapping", &mvdev->config.ingress_qos_mapping_list);
 	vlandev_qos_mapping_dump(b, "egress_qos_mapping", &mvdev->config.egress_qos_mapping_list);
         vlandev_qos_mapping_dump(b, "dscp2pbit", &mvdev->config.dscp2pbit_mapping_list);
@@ -280,6 +290,15 @@ vlandev_get_vid(struct device *dev, const char *id_str)
 	return (uint16_t)id;
 }
 
+static uint16_t import_vid_setting(struct blob_attr *vid, struct blob_attr *directional_vid, struct device *basedev)
+{
+	if (directional_vid)
+		return vlandev_get_vid(basedev, blobmsg_get_string(directional_vid));
+	if (vid)
+		return vlandev_get_vid(basedev, blobmsg_get_string(vid));
+	return 1;
+}
+
 static void
 vlandev_config_init(struct device *dev)
 {
@@ -290,11 +309,15 @@ vlandev_config_init(struct device *dev)
 	if (mvdev->ifname)
 		basedev = device_get(blobmsg_data(mvdev->ifname), true);
 
+	// set config values to what is in UCI config, or default 1 if absent
 	if (mvdev->vid)
 		mvdev->config.vid = vlandev_get_vid(basedev, blobmsg_get_string(mvdev->vid));
 	else
 		mvdev->config.vid = 1;
 
+	mvdev->config.txvid = import_vid_setting(mvdev->vid, mvdev->txvid, basedev);
+	mvdev->config.rxvid = import_vid_setting(mvdev->vid, mvdev->rxvid, basedev);
+
 	device_add_user(&mvdev->parent, basedev);
 	vlandev_hotplug_check(mvdev);
 }
@@ -335,6 +358,8 @@ vlandev_apply_settings(struct vlandev_device *mvdev, struct blob_attr **tb)
 	cfg->proto = (mvdev->dev.type == &vlan8021q_device_type) ?
 		VLAN_PROTO_8021Q : VLAN_PROTO_8021AD;
 	cfg->vid = 1;
+	cfg->txvid = 1;
+	cfg->rxvid = 1;
 	cfg->tvid = 0;
 	cfg->priority = 0;
 
@@ -342,12 +367,19 @@ vlandev_apply_settings(struct vlandev_device *mvdev, struct blob_attr **tb)
 	vlist_simple_update(&cfg->egress_qos_mapping_list);
 	vlist_simple_update(&cfg->dscp2pbit_mapping_list);
 
-	if (mvdev->dev.type == &vlanuntagged_device_type)
+	if (mvdev->dev.type == &vlanuntagged_device_type) {
 		cfg->proto = VLAN_PROTO_UNTAGGED;
+	}
 
 	if ((cur = tb[VLANDEV_ATTR_VID]))
 		cfg->vid = (uint16_t) blobmsg_get_u32(cur);
 
+	if ((cur = tb[VLANDEV_ATTR_TXVID]))
+		cfg->txvid = (uint16_t) blobmsg_get_u32(cur);
+
+	if ((cur = tb[VLANDEV_ATTR_RXVID]))
+		cfg->rxvid = (uint16_t) blobmsg_get_u32(cur);
+
 	if ((cur = tb[VLANDEV_ATTR_TVID]))
 		cfg->tvid = (uint16_t) blobmsg_get_u32(cur);
 
@@ -406,6 +438,8 @@ vlandev_reload(struct device *dev, struct blob_attr *attr)
 	vlandev_apply_settings(mvdev, tb_mv);
 	mvdev->ifname = tb_mv[VLANDEV_ATTR_IFNAME];
 	mvdev->vid = tb_mv[VLANDEV_ATTR_VID];
+	mvdev->txvid = tb_mv[VLANDEV_ATTR_TXVID];
+	mvdev->rxvid = tb_mv[VLANDEV_ATTR_RXVID];
 
 	if (mvdev->config_data) {
 		struct blob_attr *otb_dev[__DEV_ATTR_MAX];
