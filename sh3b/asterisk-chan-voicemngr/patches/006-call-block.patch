--- a/src/channels/chan_voicemngr.c
+++ b/src/channels/chan_voicemngr.c
@@ -491,6 +491,7 @@ static struct endpt_event event_map[] =
 	{ .name = "SWITCH", .event = EVENT_SWITCH },
 	{ .name = "JOIN", .event = EVENT_JOIN },
 	{ .name = "RELEASE", .event = EVENT_RELEASE },
+	{ .name = "BLOCK", .event = EVENT_BLOCK },
 	{ .name = "LINE_CALL_MODE_SINGLE", .event = EVENT_LINE_CALL_MODE_SINGLE},
 	{ .name = "LINE_CALL_MODE_MULTIPLE", .event = EVENT_LINE_CALL_MODE_MULTIPLE},
 	{ .name = "", .event = EVENT_LAST },
@@ -3817,6 +3817,20 @@ static void chan_voicemngr_process_event
 			ast_debug(1, "EVENT %d from dect received\n", ev->event);
 			handle_dect_event(sub, sub_peer, owner, peer_owner, ev->event);
 			break;
+		case EVENT_BLOCK:
+			ast_debug(1, "Received EVENT %d from dectmngr\n", ev->event);
+			if(owner) {
+			enum ast_channel_state state = AST_STATE_RING;
+			struct ast_channel *pjsip_chan = ast_channel_get_by_state_and_prefix(&state, "PJSIP");
+			if(pjsip_chan) {
+				int res = ast_transfer(pjsip_chan, "sip:blockbutton@anonymous.invalid");
+				ast_debug(1, "Transfer res %d for channel %s\n", res, ast_channel_name(pjsip_chan));
+			} else {
+				ast_debug(1, "PJSIP channel not found\n");
+			}
+			ast_channel_unref(pjsip_chan);
+			}
+			break;
 		case EVENT_LINE_CALL_MODE_SINGLE:
 		case EVENT_LINE_CALL_MODE_MULTIPLE:
 			ast_debug(1, "EVENT %d from dect received\n", ev->event);
--- a/src/channels/chan_voicemngr.h
+++ b/src/channels/chan_voicemngr.h
@@ -83,6 +83,7 @@ enum LINE_EVENT { // Events from low lev
 	EVENT_SWITCH,
 	EVENT_JOIN,
 	EVENT_RELEASE,
+	EVENT_BLOCK,
 	EVENT_LINE_CALL_MODE_SINGLE,
 	EVENT_LINE_CALL_MODE_MULTIPLE,
 	EVENT_LAST,
