diff --git a/networking/udhcp/common.c b/networking/udhcp/common.c
index 4bc719001..c6791e2e8 100644
--- a/networking/udhcp/common.c
+++ b/networking/udhcp/common.c
@@ -45,6 +45,7 @@ const struct dhcp_optflag dhcp_optflags[] = {
 	{ OPTION_STRING_HOST                      , 0x28 }, /* DHCP_NIS_DOMAIN    */
 	{ OPTION_IP | OPTION_LIST                 , 0x29 }, /* DHCP_NIS_SERVER    */
 	{ OPTION_IP | OPTION_LIST     | OPTION_REQ, 0x2a }, /* DHCP_NTP_SERVER    */
+	{ OPTION_43								  , 0x2b }, /* DHCP_VENDOR_SPEC_INF */
 	{ OPTION_IP | OPTION_LIST                 , 0x2c }, /* DHCP_WINS_SERVER   */
 	{ OPTION_U32                              , 0x33 }, /* DHCP_LEASE_TIME    */
 	{ OPTION_IP                               , 0x36 }, /* DHCP_SERVER_ID     */
@@ -116,6 +117,7 @@ const char dhcp_option_strings[] ALIGN1 =
 	"nisdomain" "\0"        /* DHCP_NIS_DOMAIN      */
 	"nissrv" "\0"           /* DHCP_NIS_SERVER      */
 	"ntpsrv" "\0"           /* DHCP_NTP_SERVER      */
+	"vendorspecinf" "\0"    /* DHCP_VENDOR_SPEC_INF */
 	"wins" "\0"             /* DHCP_WINS_SERVER     */
 	"lease" "\0"            /* DHCP_LEASE_TIME      */
 	"serverid" "\0"         /* DHCP_SERVER_ID       */
@@ -157,6 +159,7 @@ const uint8_t dhcp_option_lengths[] ALIGN1 = {
 	[OPTION_IP] =      4,
 	[OPTION_IP_PAIR] = 8,
 //	[OPTION_BOOLEAN] = 1,
+	[OPTION_43] 	 = 1,
 	[OPTION_STRING] =  1,  /* ignored by udhcp_str2optset */
 	[OPTION_STRING_HOST] = 1,  /* ignored by udhcp_str2optset */
 #if ENABLE_FEATURE_UDHCP_RFC3397
diff --git a/networking/udhcp/common.h b/networking/udhcp/common.h
index cc0abd269..5de5bda47 100644
--- a/networking/udhcp/common.h
+++ b/networking/udhcp/common.h
@@ -80,6 +80,7 @@ struct BUG_bad_sizeof_struct_ip_udp_dhcp_packet {
 enum {
 	OPTION_IP = 0,
 	OPTION_IP_PAIR,
+	OPTION_43,
 	OPTION_STRING,
 	/* Opts of STRING_HOST type will be sanitized before they are passed
 	 * to udhcpc script's environment: */
@@ -140,6 +141,7 @@ struct dhcp_scan_state {
 //#define DHCP_NIS_DOMAIN       0x28
 //#define DHCP_NIS_SERVER       0x29
 //#define DHCP_NTP_SERVER       0x2a
+//#define DHCP_VENDOR_SPEC_INF  0x2b
 //#define DHCP_WINS_SERVER      0x2c
 #define DHCP_REQUESTED_IP       0x32 /* 50: sent by client if specific IP is wanted */
 #define DHCP_LEASE_TIME         0x33 /* 51: */
diff --git a/networking/udhcp/dhcpc.c b/networking/udhcp/dhcpc.c
index 98720b45b..be1496009 100644
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -129,6 +129,7 @@ static const uint8_t len_of_option_as_string[] ALIGN1 = {
 	[OPTION_IP_PAIR         ] = sizeof("255.255.255.255 ") * 2,
 	[OPTION_STATIC_ROUTES   ] = sizeof("255.255.255.255/32 255.255.255.255 "),
 	[OPTION_6RD             ] = sizeof("132 128 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 255.255.255.255 "),
+	[OPTION_43				] = 4,
 	[OPTION_STRING          ] = 1,
 	[OPTION_STRING_HOST     ] = 1,
 #if ENABLE_FEATURE_UDHCP_RFC3397
@@ -238,6 +239,45 @@ static NOINLINE char *xmalloc_optname_optval(const struct dhcp_optitem *opt_item
 			dest += sprintf(dest, type == OPTION_U32 ? "%lu" : "%ld", (unsigned long) ntohl(val_u32));
 			break;
 		}
+		case OPTION_43: {
+			/* Check if it is a "Encapsulated vendor-specific options" (RFC2132). */
+			/* If not, then treat it as a normal string option */
+			if (len >= 2 && option[0] >= 1 && option[0] <= 4) {
+				/*  When encapsulated vendor-specific extensions are used, the
+				information bytes 1-n have the following format:
+
+				* Code   Len   Data item        Code   Len   Data item       Code
+				* +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
+				* |  T1 |  n  |  d1 |  d2 | ... |  T2 |  n  |  D1 |  D2 | ... | ... |
+				* +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
+				*/
+				uint8_t *opt_data = option;
+
+				while (opt_data + 2 <= option + len) {
+					uint8_t subop_len = opt_data[1];
+
+					/* check boundary for the subcode, length and data */
+					if (opt_data + 2 + subop_len > option + len)
+						return ret;
+
+					/* add separator if not the first one */
+					if (opt_data > option)
+						dest += sprintf(dest, " ");
+
+					/* format of string: subcode1=value1 subcode2=value2 ... */
+					dest += sprintf(dest, "%d=", opt_data[0]);
+					memcpy(dest, &opt_data[2], subop_len);
+					dest += subop_len;
+					opt_data += 2 + subop_len;
+					*dest = '\0';
+				}
+			} else {
+				memcpy(dest, option, len);
+				dest += len;
+				*dest = '\0';
+			}
+			return ret; /* Short circuit this case */
+		}
 		/* Note: options which use 'return' instead of 'break'
 		 * (for example, OPTION_STRING) skip the code which handles
 		 * the case of list of options.
