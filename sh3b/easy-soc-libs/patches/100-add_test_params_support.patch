diff --git a/libdsl/Makefile b/libdsl/Makefile
index a749eb5..01004ef 100644
--- a/libdsl/Makefile
+++ b/libdsl/Makefile
@@ -1,5 +1,8 @@
+-include ../Makefile.diag.inc
+
 LIBDSL = libdsl.so
 
+CFLAGS += $(DIAG_CFLAGS) -Werror
 HEADER_DEPS := xdsl.h common.h xtm.h
 
 ifeq ($(PLATFORM),BROADCOM)
diff --git a/libdsl/broadcom/bcm_dsl_api.c b/libdsl/broadcom/bcm_dsl_api.c
index 90f57a3..edb4642 100644
--- a/libdsl/broadcom/bcm_dsl_api.c
+++ b/libdsl/broadcom/bcm_dsl_api.c
@@ -2,6 +2,7 @@
  * bcm.c - implements APIs for Broadcom (X)DSL
  *
  * Copyright (C) 2019 iopsys Software Solutions AB. All rights reserved.
+ * Copyright (C) 2022 BT plc. All rights reserved.
  *
  * Author: anjan.chanda@iopsys.eu
  *         yalu.zhang@iopsys.eu
@@ -47,22 +48,137 @@ typedef unsigned int    UINT32;
 
 #define BCM_DSL_DEV "/dev/bcmadsl0"
 
+#define sizeof_field(t, m) sizeof((((t *)0)->m))
+
+
 const struct dsl_ops xdsl_ops = {
 	.get_line_info = dsl_get_line_info,
 	.get_line_stats = dsl_get_line_stats,
 	.get_line_stats_interval = dsl_get_line_stats_interval,
+	.get_line_test_params = dsl_get_line_test_params,
+
 	.get_channel_info = dsl_get_channel_info,
 	.get_channel_stats = dsl_get_channel_stats,
 	.get_channel_stats_interval = dsl_get_channel_stats_interval,
+
 	.get_fast_line_info = fast_get_line_info,
 	.get_fast_line_stats = fast_get_line_stats,
 	.get_fast_line_stats_interval = fast_get_line_stats_interval,
+	.get_fast_line_test_params = fast_get_line_test_params,
+
 	.set_oem_parameter = dsl_set_oem_parameter,
 };
 
 static int max_line_num = 1;
 static int max_chan_num = 1;
 
+// Logic taken from CMS code
+/**
+ * @brief		Converts from Broadcom driver data format to BBF data model format
+ *
+ * @param in		QLN sample
+ *
+ * @return 		Converted QLN sample value
+ */
+short convert_qln(short in)
+{
+	short out;
+
+	if (0 == in)
+		out = 255;
+	else
+		out = (-in - 368) >> 3;
+
+	if (255 < out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp QLN value (%hd)\n", in);
+		out = 255;
+	}
+
+	if (0 > out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp QLN value (%hd)\n", in);
+		out = 0;
+	}
+
+	return out;
+}
+
+/**
+ * @brief
+ *
+ * @param in
+ *
+ * @return		Converted HLOG sample value
+ */
+short convert_hlog(short in)
+{
+	short out;
+
+	if (0 == in)
+		out = 1023;
+	else
+		out = ((96 - in) * 5) >> 3;
+
+	if (1023 < out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp HLOG value (%hd)\n", in);
+		out = 1023;
+	}
+
+	if (0 > out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp HLOG value (%hd)\n", in);
+		out = 0;
+	}
+
+	return out;
+}
+
+/**
+ * @brief		Converts SNR driver samples to TR-181 sample values. Details are taken from
+ * 			Broadcom's xdslctl and CMS programs.
+ *
+ * @param in		A Broadcom driver SNRps sample
+ *
+ * @return		TR-181 data model equivalent
+ */
+short convert_snr(short in)
+{
+	short s, out;
+
+	/* Some samples have a value of 0 and some of 0x8000. Its not clear why,
+	but these are pragmatically eqivalent */
+	s = in;
+	if (-32768 == s)
+		s = 0;
+
+	if (0 == s)
+		out = 255;
+	else
+		out = (s + 512) >> 3;
+
+	if (255 < out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp SNR value (%hd)\n", s);
+		out = 255;
+	}
+
+	if (0 > out) {
+		LIBDSL_LOG(LOG_WARNING, "Clamp SNR value (%hd)\n", in);
+		out = 0;
+	}
+
+	return out;
+}
+
+/**
+ * @brief		Returns the input value - used for testing
+ *
+ * @param in		Signed short input value from the xDSL driver
+ *
+ * @return 		Signed short - same as input
+ */
+short convert_null(short in)
+{
+	return in;
+}
+
 int dsl_get_line_number(void)
 {
 	return max_line_num;
@@ -89,6 +205,16 @@ static inline int bcm_xdsl_dev_close(int fd)
 	return close(fd);
 }
 
+/**
+ * @brief 		Generic ioctl-based getter
+ *
+ * @param obj		Ioctl identifer OID
+ * @param objlen	Ioctl identifier length
+ * @param out		Buffer to contain the data read
+ * @param outlen	char* buffer length - indicate the max buffer size to fill. The value does not get changed if less space needed
+ *
+ * @return 		0 on success, <0 otherwise
+ */
 static int bcm_xdsl_get_object(char *obj, int objlen, char *out, unsigned long *outlen)
 {
 	int fd;
@@ -106,7 +232,7 @@ static int bcm_xdsl_get_object(char *obj, int objlen, char *out, unsigned long *
 	arg.dataBufLen = *outlen;
 
 	retval = ioctl(fd, ADSLIOCTL_GET_OBJ_VALUE, &arg);
-	*outlen = arg.dataBufLen;
+	*outlen = arg.dataBufLen;  // This only seems to be updated on failure
 	if (retval != 0 || arg.bvStatus == BCMADSL_STATUS_ERROR) {
 		LIBDSL_LOG(LOG_ERR, "ioctl for ADSLIOCTL_GET_OBJ_VALUE failed, %s\n", strerror(errno));
 		retval = -1;
@@ -116,6 +242,43 @@ static int bcm_xdsl_get_object(char *obj, int objlen, char *out, unsigned long *
 	return retval;
 }
 
+/**
+ * @brief		Generic ioctl-based setter
+ *
+ * @param obj		Ioctl identifer OID
+ * @param objlen	Ioctl identifier length
+ * @param in		Buffer containing the data to set
+ * @param inlen		Typical usage is to pass in a length, does this actually get used to validate max size??
+ *
+ * @return
+ */
+static int bcm_xdsl_set_object(char *obj, int objlen, char *in, unsigned long *inlen)
+{
+	int fd;
+	int retval;
+	ADSLDRV_GET_OBJ arg;
+
+	fd = bcm_xdsl_dev_open();
+	if (fd < 0)
+		return -1;
+
+	arg.bvStatus = BCMADSL_STATUS_ERROR;
+	arg.objId = obj;
+	arg.objIdLen = objlen;
+	arg.dataBuf = in;
+	arg.dataBufLen = *inlen;
+
+	retval = ioctl(fd, ADSLIOCTL_SET_OBJ_VALUE, &arg);
+
+	if (retval != 0 || arg.bvStatus == BCMADSL_STATUS_ERROR) {
+		LIBDSL_LOG(LOG_ERR, "ioctl for ADSLIOCTL_SET_OBJ_VALUE failed, %s\n", strerror(errno));
+		retval = -1;
+	}
+
+	bcm_xdsl_dev_close(fd);
+	return retval;
+}
+
 static int bcm_xdsl_get_mib_info(adslMibInfo *adsl)
 {
 	unsigned long size = sizeof(adslMibInfo);
@@ -141,6 +304,367 @@ static int bcm_xdsl_get_cfg_info(adslCfgProfile *adsl)
 	return 0;
 }
 
+/**
+ * @brief		Get HLOG downstream data from driver
+ *
+ * @param data		Buffer to fill
+ * @param size		Length of buffer (in octets)
+ *
+ * @return		0 on success, <0 otherwise
+ */
+static int bcm_xdsl_get_hlog_ds(short *data, unsigned long size)
+{
+	char oid_hlog[] = { kOidAdslPrivate, kOidAdslPrivChanCharLogDsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	LIBDSL_LOG(LOG_DEBUG, "%s: inbound size = %ld", __FUNCTION__, size);
+	/* Get HLOGpsds */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_hlog, sizeof(oid_hlog), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, hlogps_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform format conversion
+	for (i = 0; i < (size / sizeof(short)); i++) {
+		LIBDSL_LOG(LOG_DEBUG, "%s: %d: raw = %hd", __FUNCTION__, i, *bsp);
+		*bsp = convert_hlog(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief		Get HLOG upstream data from DSL driver
+ *
+ * @param data		Buffer for the data
+ * @param size		Length of the buffer (in octets)
+ *
+ * @return		0 on success, <0 otherwise
+ */
+static int bcm_xdsl_get_hlog_us(short *data, unsigned long size)
+{
+	char oid_hlog[] = { kOidAdslPrivate, kOidAdslPrivChanCharLogUsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	/* Get HLOGpsds */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_hlog, sizeof(oid_hlog), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, hlogps_us)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform format conversion
+	for (i = 0; i < (size / sizeof(short)); i++) {
+		LIBDSL_LOG(LOG_DEBUG, "%d: raw = %hd", i, *bsp);
+		*bsp = convert_hlog(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+void hex_dump(const void* data, size_t size) {
+	size_t i;
+	char line[50];
+
+	line[49] = '\0';
+
+	LIBDSL_LOG(LOG_DEBUG, "%s", __FUNCTION__);
+	for (i = 0; i < size; i += 16) {
+		sprintf(line, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
+			((unsigned char*)data)[i + 0],
+			((unsigned char*)data)[i + 1],
+			((unsigned char*)data)[i + 2],
+			((unsigned char*)data)[i + 3],
+			((unsigned char*)data)[i + 4],
+			((unsigned char*)data)[i + 5],
+			((unsigned char*)data)[i + 6],
+			((unsigned char*)data)[i + 7],
+			((unsigned char*)data)[i + 8],
+			((unsigned char*)data)[i + 9],
+			((unsigned char*)data)[i + 10],
+			((unsigned char*)data)[i + 11],
+			((unsigned char*)data)[i + 12],
+			((unsigned char*)data)[i + 13],
+			((unsigned char*)data)[i + 14],
+			((unsigned char*)data)[i + 15]);
+		LIBDSL_LOG(LOG_DEBUG, "%s", line);
+	}
+
+}
+
+/**
+ * @brief		Perform ioctl to retrieve downstream QLN data for tone groups
+ *
+ * @param data		Pointer to buffer for data
+ * @param size		Buffer size in _chars_ as needed by ioctl
+ *
+ * @return
+ */
+static int bcm_xdsl_get_qln_ds(short *data, unsigned long size)
+{
+	char oid_qln[] = { kOidAdslPrivate, kOidAdslPrivQuietLineNoiseDsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	/* Get QLNpsds */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_qln, sizeof(oid_qln), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, qlnps_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform platform-specific format conversion
+	hex_dump(data, size);
+	for (i = 0; i < (size / sizeof(short)); i++) {  // TODO pass in the element size. This is likely crux of issues - big endian or little??
+		LIBDSL_LOG(LOG_DEBUG, "%s: offset = %d raw = %hd", __FUNCTION__, i, *bsp);
+		*bsp = convert_qln(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+static int bcm_xdsl_get_qln_us(short *data, unsigned long size)
+{
+	char oid_qln[] = { kOidAdslPrivate, kOidAdslPrivQuietLineNoiseUsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	/* Get QLNpsus */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_qln, sizeof(oid_qln), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, qlnps_us)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform format conversion
+	for (i = 0; i < (size / sizeof(short)); i++) {
+		LIBDSL_LOG(LOG_DEBUG, "%s: offset = %d raw = %hd", __FUNCTION__, i, *bsp);
+		*bsp = convert_qln(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief
+ *
+ * @param data
+ *
+ * @return
+ */
+static int bcm_xdsl_get_snr_ds(short *data, unsigned long size)
+{
+	char oid_snr[] = { kOidAdslPrivate, kOidAdslPrivSNRDsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	LIBDSL_LOG(LOG_DEBUG, "%s: inbound size = %ld", __FUNCTION__, size);
+	/* Get SNRpsds */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_snr, sizeof(oid_snr), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, snrps_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform format conversion
+	for (i = 0; i < size; i++) {
+		LIBDSL_LOG(LOG_DEBUG, "%s: offset = %d raw = %hd", __FUNCTION__, i, *bsp);
+		*bsp = convert_snr(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+static int bcm_xdsl_get_snr_us(short *data, unsigned long size)
+{
+	char oid_snr[] = { kOidAdslPrivate, kOidAdslPrivSNRUsPerToneGroup };
+	char oid_gfactor[] = { kOidAdslPrivate, kOidAdslPrivExtraInfo, kOidAdslPrivSetFlagActualGFactor };
+	unsigned long len = 1;
+	uint8_t gFactor = 1;
+	int i;
+	short *bsp = data;
+
+	LIBDSL_LOG(LOG_DEBUG, "%s: inbound size = %ld", __FUNCTION__, size);
+	/* Get SNRpsus */
+	if (bcm_xdsl_set_object(oid_gfactor, sizeof(oid_gfactor), (char *)&gFactor, &len) ||
+		bcm_xdsl_get_object(oid_snr, sizeof(oid_snr), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, snrps_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	// Perform format conversion
+	for (i = 0; i < (size / sizeof(short)); i++) {
+		LIBDSL_LOG(LOG_DEBUG, "%s: offset = %d raw = %hd", __FUNCTION__, i, *bsp);
+		*bsp = convert_snr(*bsp);
+		bsp++;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief
+ *
+ * @param data
+ *
+ * @return
+ */
+static int bcm_xdsl_get_latn_ds(unsigned short *data, unsigned long size)
+{
+	char oid[] = { kOidAdslPrivate, kOidAdslPrivLATNdsperband };
+
+	/* Get LATNpsds */
+	if (bcm_xdsl_get_object(oid, sizeof(oid), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, latn_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief
+ *
+ * @param data
+ *
+ * @return
+ */
+static int bcm_xdsl_get_latn_us(unsigned short *data, unsigned long size)
+{
+	char oid[] = { kOidAdslPrivate, kOidAdslPrivLATNusperband };
+
+	/* Get LATNpsus */
+	if (bcm_xdsl_get_object(oid, sizeof(oid), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, latn_us)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief
+ *
+ * @param data
+ *
+ * @return
+ */
+static int bcm_xdsl_get_satn_ds(unsigned short *data, unsigned long size)
+{
+	char oid[] = { kOidAdslPrivate, kOidAdslPrivSATNdsperband };
+
+	/* Get SATNpsds */
+	if (bcm_xdsl_get_object(oid, sizeof(oid), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, satn_ds)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	return 0;
+}
+
+/**
+ * @brief
+ *
+ * @param data
+ *
+ * @return
+ */
+static int bcm_xdsl_get_satn_us(unsigned short *data, unsigned long size)
+{
+	char oid[] = { kOidAdslPrivate, kOidAdslPrivSATNusperband };
+
+	/* Get SATNpsus */
+	if (bcm_xdsl_get_object(oid, sizeof(oid), (char *)data, &size)) {
+		return -1;
+	}
+
+	// Verify the returned size is <= size of object
+	if (size != sizeof_field(struct dsl_line_test_params, satn_us)) {
+		LIBDSL_LOG(LOG_ERR, "%s: unexpected return size (%ld)", __FUNCTION__, size);
+		hex_dump(data, size);
+		return -1;
+	}
+
+	return 0;
+}
+
 static int bcm_xdsl_get_version(adslVersionInfo *dsl_ver)
 {
 	int fd, ret = 0;
@@ -780,6 +1304,147 @@ int dsl_get_line_stats_interval(int line_num, enum dsl_stats_type type, struct d
 	return 0;
 }
 
+
+/**
+ * @brief 		Gathers all information related to the Device.DSL.Line.{i}.TestParams.
+ * 			data model block
+ *
+ * @param line_num	The line number instance
+ * @param test_params	Pointer to structure for returned data - this is data model block-like
+ *
+ * @return 		0 on success, <0 otherwise
+ */
+int dsl_get_line_test_params(int line_num, struct dsl_line_test_params *test_params)
+{
+
+	adslMibInfo dsl_mib;
+
+	if (line_num < 0 || line_num >= max_line_num || !test_params)
+		return -1;
+
+	// Get MIB data - this provides some information needed when getting .TestParams-specifics
+	memset(&dsl_mib, 0, sizeof(dsl_mib));
+	if (bcm_xdsl_get_mib_info(&dsl_mib) != 0)
+		return -1;
+
+	// Get TestParam data
+	memset(test_params, 0, sizeof(struct dsl_line_test_params));
+
+	if (bcm_xdsl_get_hlog_ds(test_params->hlogps_ds, sizeof_field(struct dsl_line_test_params, hlogps_ds)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_hlog_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_hlog_us(test_params->hlogps_us, sizeof_field(struct dsl_line_test_params, hlogps_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_hlog_us() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_qln_ds(test_params->qlnps_ds, sizeof_field(struct dsl_line_test_params, qlnps_ds)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_qln_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_qln_us(test_params->qlnps_us, sizeof_field(struct dsl_line_test_params, qlnps_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_qln_us() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_snr_ds(test_params->snrps_ds, sizeof_field(struct dsl_line_test_params, snrps_ds)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_snr_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_snr_us(test_params->snrps_us, sizeof_field(struct dsl_line_test_params, snrps_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_snr_us() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_latn_ds(test_params->latn_ds, sizeof_field(struct dsl_line_test_params, latn_ds)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_latn_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_latn_us(test_params->latn_us,  sizeof_field(struct dsl_line_test_params, latn_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_latn_us() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_satn_ds(test_params->satn_ds,  sizeof_field(struct dsl_line_test_params, satn_ds)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_satn_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_satn_us(test_params->satn_us,  sizeof_field(struct dsl_line_test_params, satn_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_satn_us() failed");
+		return -1;
+	}
+
+	test_params->hlogg.ds = dsl_mib.gFactors.Gfactor_SUPPORTERCARRIERSds;
+	test_params->hlogg.us = dsl_mib.gFactors.Gfactor_SUPPORTERCARRIERSus;
+	test_params->hlogmt.ds = dsl_mib.xdslAtucPhys.HLOGMT;
+	test_params->hlogmt.us = dsl_mib.xdslAtucPhys.HLOGMT;
+
+	test_params->qlng.ds = dsl_mib.gFactors.Gfactor_SUPPORTERCARRIERSds;
+	test_params->qlng.us = dsl_mib.gFactors.Gfactor_SUPPORTERCARRIERSus;
+	test_params->qlnmt.ds = dsl_mib.xdslAtucPhys.QLNMT;
+	test_params->qlnmt.us = dsl_mib.xdslAtucPhys.QLNMT;
+
+	test_params->snrg.ds = dsl_mib.gFactors.Gfactor_MEDLEYSETds;
+	test_params->snrg.us = dsl_mib.gFactors.Gfactor_MEDLEYSETus;
+	test_params->snrmt.ds = dsl_mib.xdslAtucPhys.SNRMT;
+	test_params->snrmt.us = dsl_mib.xdslAtucPhys.SNRMT;
+
+	return 0;
+}
+
+
+/**
+ * @brief 		Gathers all information related to the Device.FAST.Line.{i}.TestParams.
+ * 			data model block
+ *
+ * @param line_num	The line number instance
+ * @param test_params	Pointer to structure for returned data - this is data model block-like
+ *
+ * @return 		0 on success, <0 otherwise
+ */
+int fast_get_line_test_params(int line_num, struct fast_line_test_params *test_params)
+{
+
+	adslMibInfo dsl_mib;
+
+	if (line_num < 0 || line_num >= max_line_num || !test_params)
+		return -1;
+
+	// Get MIB data - this provides some information needed when getting .TestParams-specifics
+	memset(&dsl_mib, 0, sizeof(dsl_mib));
+	if (bcm_xdsl_get_mib_info(&dsl_mib) != 0)
+		return -1;
+
+	// Get TestParam data
+	memset(test_params, 0, sizeof(struct fast_line_test_params));
+
+	if (bcm_xdsl_get_snr_ds(test_params->snrps_ds, sizeof_field(struct fast_line_test_params, snrps_ds)) != 0) {  // FIXME same as for DSL?
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_snr_ds() failed");
+		return -1;
+	}
+
+	if (bcm_xdsl_get_snr_us(test_params->snrps_us, sizeof_field(struct fast_line_test_params, snrps_us)) != 0) {
+		LIBDSL_LOG(LOG_ERR, "bcm_xdsl_get_snr_us() failed");
+		return -1;
+	}
+
+	test_params->snrg.ds = dsl_mib.gFactors.Gfactor_MEDLEYSETds;  // FIXME same as for DSL?
+	test_params->snrg.us = dsl_mib.gFactors.Gfactor_MEDLEYSETus;
+	test_params->snrmt.ds = dsl_mib.xdslAtucPhys.SNRMT;
+	test_params->snrmt.us = dsl_mib.xdslAtucPhys.SNRMT;
+
+	// FIXME everything else currently zero valued
+
+	return 0;
+}
+
+
 static int bcm_get_vdsl2_aggr_rate(int profile, xdslFramingInfo *frame_info)
 {
 	int       phy_adjustment = (1 == frame_info->rtxMode) ? 1 : 0;
diff --git a/libdsl/common.h b/libdsl/common.h
index 00427a4..3c6c19b 100644
--- a/libdsl/common.h
+++ b/libdsl/common.h
@@ -27,8 +27,10 @@ extern "C" {
 #endif
 
 #include <stdio.h>
+#include <syslog.h>
 
-#define LIBDSL_LOG(log_level, format...) fprintf(stderr, ##format)	/* Flawfinder: ignore */
+extern int libdsl_log_level;
+#define LIBDSL_LOG(libdsl_log_level, format...) fprintf(stderr, ##format)     /* Flawfinder: ignore */
 
 /** enum dsl_status - operational status of a line, channel or an interface */
 enum itf_status {
diff --git a/libdsl/utils.c b/libdsl/utils.c
index f6310fc..c9e66e9 100644
--- a/libdsl/utils.c
+++ b/libdsl/utils.c
@@ -23,10 +23,13 @@
 #include <errno.h>
 #include <ctype.h>
 #include <stdbool.h>
+#include <syslog.h>
 
 #include "xdsl.h"
 #include "xtm.h"
 
+int libdsl_log_level = LOG_INFO;
+
 const struct str_enum_map vdsl2_profiles[] = {
 	{ "8a", VDSL2_8a },
 	{ "8b", VDSL2_8b },
diff --git a/libdsl/xdsl.h b/libdsl/xdsl.h
index 8ec9cde..280b99c 100644
--- a/libdsl/xdsl.h
+++ b/libdsl/xdsl.h
@@ -4,6 +4,7 @@
  * structures.
  *
  * Copyright (C) 2020 iopsys Software Solutions AB. All rights reserved.
+ * Copyright (C) 2022 BT plc. All rights reserved.
  *
  * Author: anjan.chanda@iopsys.eu
  *         yalu.zhang@iopsys.eu
@@ -36,6 +37,9 @@ extern "C" {
 
 /** Common definitions */
 #define XDSL_MAX_LINES	1
+#define NUM_BANDS       5
+#define NUM_TONE_GROUP  512
+
 
 typedef struct { long us; long ds; } dsl_long_t;
 typedef struct { unsigned long us; unsigned long ds; } dsl_ulong_t;
@@ -349,30 +353,25 @@ enum dsl_stats_type {
 
 /** struct dsl_line_test_params - DSL line test parameters that are available during L0 (Showtime) state */
 struct dsl_line_test_params {
-	dsl_ulong_t hlogg; /** Number of sub-carriers per sub-carrier group in both directions */
-	dsl_ulong_elements_t hlogps_ds; /** Downstream logarithmic line characteristics per sub-carrier group */
-	dsl_ulong_elements_t hlogps_us; /** Upstream logarithmic line characteristics per sub-carrier group */
-	dsl_ulong_t hlogmt; /** Number of symbols over which HLOGps were measured in both directions */
-
-	dsl_ulong_t qlng; /* Number of sub-carriers per sub-carrier group for QLNps in both directions */
-	dsl_ulong_elements_t qlnps_ds; /** Downstream quiet line noise per sub-carrier group */
-	dsl_ulong_elements_t qlnps_us; /** Upstream quiet line noise per sub-carrier group */
-	dsl_ulong_t qlnmt; /** Number of symbols over which QLNps were measured in both directions */
-
-	dsl_ulong_t snrg; /* Number of sub-carriers per sub-carrier group for SNRps in both directions */
-	dsl_ulong_elements_t snrps_ds; /** Downstream SNR per sub-carrier group */
-	dsl_ulong_elements_t snrps_us; /** Upstream SNR per sub-carrier group */
-	dsl_ulong_t snrmt; /** Number of symbols over which SNRps were measured in both directions */
-
-	/** Downstream line attenuation averaged across all sub-carriers in the frequency band */
-	dsl_ulong_elements_t latn_ds;
-	/** Upstream line attenuation averaged across all sub-carriers in the frequency band */
-	dsl_ulong_elements_t latn_us;
-
-	/** Downstream line attenuation averaged across all active sub-carriers in the frequency band */
-	dsl_ulong_elements_t satn_ds;
-	/** Upstream line attenuation averaged across all active sub-carriers in the frequency band */
-	dsl_ulong_elements_t satn_us;
+	dsl_ulong_t	hlogg; /** Number of sub-carriers per sub-carrier group in both directions */
+	short           hlogps_ds[NUM_TONE_GROUP];
+	short           hlogps_us[NUM_TONE_GROUP];
+	dsl_ulong_t	hlogmt; /** Number of symbols over which HLOGps were measured in both directions */
+
+	dsl_ulong_t	qlng; /* Number of sub-carriers per sub-carrier group for QLNps in both directions */
+	short		qlnps_ds[NUM_TONE_GROUP];
+	short		qlnps_us[NUM_TONE_GROUP];
+	dsl_ulong_t	qlnmt; /** Number of symbols over which QLNps were measured in both directions */
+
+	dsl_ulong_t	snrg; /* Number of sub-carriers per sub-carrier group for SNRps in both directions */
+	short		snrps_ds[NUM_TONE_GROUP];
+	short		snrps_us[NUM_TONE_GROUP];
+	dsl_ulong_t	snrmt; /** Number of symbols over which SNRps were measured in both directions */
+
+	unsigned short	latn_ds[NUM_BANDS];
+	unsigned short  latn_us[NUM_BANDS];
+	unsigned short  satn_ds[NUM_BANDS];
+	unsigned short  satn_us[NUM_BANDS];
 };
 
 /** struct dsl_line_data_gathering - DSL line data gathering at the VTU-R. This only applies to VDSL2 */
@@ -646,8 +645,8 @@ struct fast_line_test_params {
 	/* Number of sub-carriers in any one sub-carrier group used to represent the SNR(f)
 	 * values in both directions */
 	dsl_ulong_t snrg;
-	dsl_ulong_elements_t snrps_ds; /** Downstream SNR(f) per sub-carrier group */
-	dsl_ulong_elements_t snrps_us; /** Upstream SNR(f) per sub-carrier group */
+	short		snrps_ds[NUM_TONE_GROUP]; /** Downstream SNR(f) per sub-carrier group */
+	short		snrps_us[NUM_TONE_GROUP]; /** Upstream SNR(f) per sub-carrier group */
 	dsl_ulong_t snrmt; /** Number of symbols used to measure SNR(f) in both directions */
 
 	unsigned int act_inp; /** Actual INP against SHINE */
