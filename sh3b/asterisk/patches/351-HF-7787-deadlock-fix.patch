Index: asterisk-18.5.1/channels/chan_brcm.c
===================================================================
--- asterisk-18.5.1.orig/channels/chan_brcm.c
+++ asterisk-18.5.1/channels/chan_brcm.c
@@ -720,10 +720,20 @@ static void endpt_connection(int line, i
 static void chan_brcm_modify_codec(struct brcm_subchannel *sub) {
 	if (sub->owner && sub->updated_codec != 1 ) {
 		ast_debug(4, "sub->owner Channel %s, ast_channel_codec_get(): %s\n",ast_channel_name(sub->owner), ast_channel_codec_get(sub->owner));
-		ast_channel_unlock(sub->owner);
-		struct ast_channel *bridged_chan = ast_channel_bridge_peer(sub->owner);
 		ast_channel_lock(sub->owner);
 
+		struct ast_bridge *bridge = ast_channel_internal_bridge(sub->owner);
+		struct ast_bridge_channel *bridge_channel;
+		struct ast_channel *bridged_chan=NULL;
+		if(bridge){
+			AST_LIST_TRAVERSE(&bridge->channels, bridge_channel, entry) {
+				if ( strcmp(ast_channel_name(bridge_channel->chan), ast_channel_name(sub->owner)) ){
+					bridged_chan = ast_channel_get_by_name(ast_channel_name(bridge_channel->chan));
+					break;
+				}
+			}
+		}
+
 		if (bridged_chan) {
 			ast_debug(5, "Got bridged_chan\n");
 			// bridged_chan is allocated but codec and ptime is not set so need to check it here and set default
@@ -748,9 +758,7 @@ static void chan_brcm_modify_codec(struc
 					ast_channel_codec_get(bridged_chan) : ast_format_get_name(ast_channel_writeformat(bridged_chan)));
 			}
 			ao2_ref(bridged_chan, -1);
-		} else if ((!brcm_in_conference(sub->parent) && sub->call_direction == INCOMING_CALL) || ast_strlen_zero(ast_channel_codec_get(sub->owner))) {
-			//return for incoming_call that waiting for bridge peer, but exclude the scenario of conference which could not obtain the bridged_chan here.
-			//return if has no codec set
+		} else if (ast_strlen_zero(ast_channel_codec_get(sub->owner))) {
 			ast_channel_unlock(sub->owner);
 			return;
 		}
@@ -837,8 +845,8 @@ static int brcm_indicate(struct ast_chan
 		if (sub->channel_state == RINGBACK)
 			endpt_signal(sub->parent->line_id, "ringback", "off", NULL);
 		sub->updated_codec = 0; // do a sync each time when ssrc/peer changes.
-		chan_brcm_modify_codec(sub);
 		pvt_unlock(sub->parent);
+		chan_brcm_modify_codec(sub);
 		break;
 	case AST_CONTROL_RINGING:
 		pvt_lock(sub->parent, "indicate");
@@ -849,7 +857,9 @@ static int brcm_indicate(struct ast_chan
 			endpt_signal(sub->parent->line_id, "ringback", "on", NULL);
 		} else {
 			sub->updated_codec = 0; // do a sync if incoming media.
+			pvt_unlock(sub->parent);
 			chan_brcm_modify_codec(sub);
+			pvt_lock(sub->parent, "indicate");
 		}
 		if (sub->owner && (sub->call_id == 0)) {
 			sub->call_id = ast_channel_callid(sub->owner);
@@ -1038,16 +1048,16 @@ static int brcm_getRtpStats(struct ast_c
 		return -1;
 	}
 
-	pvt_lock(sub->parent, "brcm_getRtpStats");
 	if (sub->parent) {
+		pvt_lock(sub->parent, "brcm_getRtpStats");
 		if (endpt_get_rtp_stats(sub->parent->line_id)) {
 			ast_log(LOG_WARNING, "Unable to get RTP statistics\n");
 		}
+		pvt_unlock(sub->parent);
 		ast_channel_lock(ast);
 		ast_channel_rtpStats_set(ast, &sub->rtp_stats);
 		ast_channel_unlock(ast);
 	}
-	pvt_unlock(sub->parent);
 
 	return 0;
 }
@@ -1727,10 +1737,10 @@ static int brcm_write(struct ast_channel
 
 		/* set rtp payload_type sent to endpoint */
 		sub->codec = map_ast_codec_id_to_rtp(frame->subclass.format);
-		chan_brcm_modify_codec(sub); //in case of no bridge peer when doing the modify_codec during incoming call
 
 		//ast_mutex_unlock(&sub->parent->lock);
 		pvt_unlock(sub->parent);
+		chan_brcm_modify_codec(sub); //in case of early media on outgoing
 
 		pe_bus_send(audio_tx_bus, (uint8_t *)ap, packet_size);
 		free(ap);
