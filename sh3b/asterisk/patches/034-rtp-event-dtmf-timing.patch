Index: asterisk-20.3.0/res/res_rtp_asterisk.c
===================================================================
--- asterisk-20.3.0.orig/res/res_rtp_asterisk.c
+++ asterisk-20.3.0/res/res_rtp_asterisk.c
@@ -438,6 +438,7 @@
 	unsigned int dtmfsamples;
 	enum ast_rtp_dtmf_mode dtmfmode;  /*!< The current DTMF mode of the RTP stream */
 	/* DTMF Transmission Variables */
+	struct timeval dtmf_begin_ts;     /*!< The time the DTMF begin event was called */
 	unsigned int lastdigitts;
 	char sending_digit;	/*!< boolean - are we sending digits */
 	char send_digit;	/*!< digit we are sending */
@@ -4208,6 +4209,7 @@
 	char data[256];
 	unsigned int *rtpheader = (unsigned int*)data;
 
+	rtp->dtmf_begin_ts = ast_tvnow();
 	ast_rtp_instance_get_remote_address(instance, &remote_address);
 
 	/* If we have no remote address information bail out now */
@@ -4238,6 +4240,7 @@
 	rtp->send_duration = 160;
 	rtp->lastts += calc_txstamp(rtp, NULL) * DTMF_SAMPLE_RATE_MS;
 	rtp->lastdigitts = rtp->lastts + rtp->send_duration;
+	rtp->seqno++;
 
 	/* Create the actual packet that we will be sending */
 	rtpheader[0] = htonl((2 << 30) | (1 << 23) | (payload << 16) | (rtp->seqno));
@@ -4245,25 +4248,20 @@
 	rtpheader[2] = htonl(rtp->ssrc);
 
 	/* Actually send the packet */
-	for (i = 0; i < 2; i++) {
-		int ice;
+	int ice;
 
-		rtpheader[3] = htonl((digit << 24) | (0xa << 16) | (rtp->send_duration));
-		res = rtp_sendto(instance, (void *) rtpheader, hdrlen + 4, 0, &remote_address, &ice);
-		if (res < 0) {
-			ast_log(LOG_ERROR, "RTP Transmission error to %s: %s\n",
+	rtpheader[3] = htonl((digit << 24) | (0xa << 16) | (rtp->send_duration));
+	res = rtp_sendto(instance, (void *) rtpheader, hdrlen + 4, 0, &remote_address, &ice);
+	if (res < 0) {
+		ast_log(LOG_ERROR, "RTP Transmission error to %s: %s\n",
+			ast_sockaddr_stringify(&remote_address),
+			strerror(errno));
+	}
+	if (rtp_debug_test_addr(&remote_address)) {
+		ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d, dur %-6.6d)\n",
 				ast_sockaddr_stringify(&remote_address),
-				strerror(errno));
-		}
-		if (rtp_debug_test_addr(&remote_address)) {
-			ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d)\n",
-				    ast_sockaddr_stringify(&remote_address),
-				    ice ? " (via ICE)" : "",
-				    payload, rtp->seqno, rtp->lastdigitts, res - hdrlen);
-		}
-		rtp->seqno++;
-		rtp->send_duration += 160;
-		rtpheader[0] = htonl((2 << 30) | (payload << 16) | (rtp->seqno));
+				ice ? " (via ICE)" : "",
+				payload, rtp->seqno, rtp->lastdigitts, res - hdrlen, rtp->send_duration);
 	}
 
 	/* Record that we are in the process of sending a digit and information needed to continue doing so */
@@ -4291,6 +4289,18 @@
 		return -1;
 	}
 
+	int diff_from_begin = ast_tvdiff_ms(ast_tvnow(), rtp->dtmf_begin_ts) * DTMF_SAMPLE_RATE_MS;
+	ast_debug(1,"Diff from DTMF begin %d (%dms)\n", diff_from_begin, diff_from_begin / DTMF_SAMPLE_RATE_MS);
+
+	/* Too early to send out an RTP Event packet */
+	if(diff_from_begin <= 160) {
+		ast_debug(1,"Too early, skip this time\n");
+		return -1;
+	}
+
+	rtp->send_duration = diff_from_begin;
+	rtp->seqno++;
+
 	/* Actually create the packet we will be sending */
 	rtpheader[0] = htonl((2 << 30) | (rtp->send_payload << 16) | (rtp->seqno));
 	rtpheader[1] = htonl(rtp->lastdigitts);
@@ -4306,15 +4316,13 @@
 	}
 
 	if (rtp_debug_test_addr(&remote_address)) {
-		ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d)\n",
+		ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d, dur %-6.6d)\n",
 			    ast_sockaddr_stringify(&remote_address),
 			    ice ? " (via ICE)" : "",
-			    rtp->send_payload, rtp->seqno, rtp->lastdigitts, res - hdrlen);
+			    rtp->send_payload, rtp->seqno, rtp->lastdigitts, res - hdrlen, rtp->send_duration);
 	}
 
 	/* And now we increment some values for the next time we swing by */
-	rtp->seqno++;
-	rtp->send_duration += 160;
 	rtp->lastts += calc_txstamp(rtp, NULL) * DTMF_SAMPLE_RATE_MS;
 
 	return 0;
@@ -4355,12 +4363,23 @@
 
 	rtp->dtmfmute = ast_tvadd(ast_tvnow(), ast_tv(0, 500000));
 
+	/* Set DTMF fixed end duration if specified otherwise calculate from DTMF start */
 	if (duration > 0 && (measured_samples = duration * ast_rtp_get_rate(rtp->f.subclass.format) / 1000) > rtp->send_duration) {
-		ast_debug_rtp(2, "(%p) RTP adjusting final end duration from %d to %u\n",
-			instance, rtp->send_duration, measured_samples);
+		ast_debug(1, "(%p) Fixed duration %d RTP adjusting final end duration from %d to %u\n",
+			instance, duration, rtp->send_duration, measured_samples);
 		rtp->send_duration = measured_samples;
+	} else {
+		int diff_from_start = ast_tvdiff_ms(ast_tvnow(), rtp->dtmf_begin_ts) * DTMF_SAMPLE_RATE_MS;
+		if (diff_from_start < 80 * DTMF_SAMPLE_RATE_MS) {
+			ast_debug(1, "diff from start = %d (forcing to 80)", diff_from_start);
+			diff_from_start = 80 * DTMF_SAMPLE_RATE_MS;
+		}
+		ast_debug(1,"diff from start %d (%dms)\n", diff_from_start, diff_from_start / DTMF_SAMPLE_RATE_MS);
+		rtp->send_duration = diff_from_start;
 	}
 
+	rtp->seqno++;
+
 	/* Construct the packet we are going to send */
 	rtpheader[1] = htonl(rtp->lastdigitts);
 	rtpheader[2] = htonl(rtp->ssrc);
@@ -4382,10 +4401,10 @@
 		}
 
 		if (rtp_debug_test_addr(&remote_address)) {
-			ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d)\n",
+			ast_verbose("Sent RTP DTMF packet to %s%s (type %-2.2d, seq %-6.6d, ts %-6.6u, len %-6.6d, dur %-6.6d)\n",
 				    ast_sockaddr_stringify(&remote_address),
 				    ice ? " (via ICE)" : "",
-				    rtp->send_payload, rtp->seqno, rtp->lastdigitts, res - hdrlen);
+				    rtp->send_payload, rtp->seqno, rtp->lastdigitts, res - hdrlen, rtp->send_duration);
 		}
 
 		rtp->seqno++;
Index: asterisk-20.3.0/main/channel.c
===================================================================
--- asterisk-20.3.0.orig/main/channel.c
+++ asterisk-20.3.0/main/channel.c
@@ -4004,7 +4004,7 @@ static struct ast_frame *__ast_read(stru
 					ast_log(LOG_DTMF, "DTMF end '%c' has duration %ld but want minimum %u, emulating on %s\n", f->subclass.integer, f->len, option_dtmfminduration, ast_channel_name(chan));
 					ast_set_flag(ast_channel_flags(chan), AST_FLAG_EMULATE_DTMF);
 					ast_channel_dtmf_digit_to_emulate_set(chan, f->subclass.integer);
-					ast_channel_emulate_dtmf_duration_set(chan, option_dtmfminduration - f->len);
+					ast_channel_emulate_dtmf_duration_set(chan, option_dtmfminduration);
 					ast_frfree(f);
 					f = &ast_null_frame;
 
@@ -4120,13 +4120,12 @@ static struct ast_frame *__ast_read(stru
 
 			if (ast_test_flag(ast_channel_flags(chan), AST_FLAG_EMULATE_DTMF) && !ast_test_flag(ast_channel_flags(chan), AST_FLAG_IN_DTMF)) {
 				struct timeval now = ast_tvnow();
-				if (ast_tvdiff_ms(now, *ast_channel_dtmf_tv(chan)) >= ast_channel_emulate_dtmf_duration(chan)) {
-					ast_channel_emulate_dtmf_duration_set(chan, 0);
 					ast_frfree(f);
 					f = ast_channel_dtmff(chan);
 					f->frametype = AST_FRAME_DTMF_END;
 					f->subclass.integer = ast_channel_dtmf_digit_to_emulate(chan);
-					f->len = ast_tvdiff_ms(now, *ast_channel_dtmf_tv(chan));
+					f->len = ast_channel_emulate_dtmf_duration(chan);
+					ast_channel_emulate_dtmf_duration_set(chan, 0);
 					ast_channel_dtmf_tv_set(chan, &now);
 					if (ast_channel_audiohooks(chan)) {
 						struct ast_frame *old_frame = f;
@@ -4134,12 +4133,6 @@ static struct ast_frame *__ast_read(stru
 						if (old_frame != f)
 							ast_frfree(old_frame);
 					}
-					ast_log(LOG_DTMF, "DTMF end emulation of '%c' queued on %s\n", f->subclass.integer, ast_channel_name(chan));
-				} else {
-					/* Drop voice frames while we're still in the middle of the digit */
-					ast_frfree(f);
-					f = &ast_null_frame;
-				}
 				break;
 			}
 			if (f->frametype != AST_FRAME_VOICE) {
