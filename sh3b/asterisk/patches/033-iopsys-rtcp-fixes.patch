Index: asterisk-18.5.1/res/res_srtp.c
===================================================================
--- asterisk-18.5.1.orig/res/res_srtp.c
+++ asterisk-18.5.1/res/res_srtp.c
@@ -502,6 +502,13 @@ static int ast_srtp_protect(struct ast_s
 
 	memcpy(localbuf, *buf, *len);
 
+	if(rtcp){
+		// align ssrc with length of 32bits.
+		memcpy(localbuf+4, srtp->buf+8, 4);
+		memcpy(srtp->rtcpbuf+4, srtp->buf+8, 4);
+	}
+
+
 	if ((res = rtcp ? srtp_protect_rtcp(srtp->session, localbuf, len) : srtp_protect(srtp->session, localbuf, len)) != err_status_ok && res != err_status_replay_fail) {
 		ast_log(LOG_WARNING, "SRTP protect: %s\n", srtp_errstr(res));
 		return -1;
Index: asterisk-18.5.1/channels/chan_brcm.c
===================================================================
--- asterisk-18.5.1.orig/channels/chan_brcm.c
+++ asterisk-18.5.1/channels/chan_brcm.c
@@ -78,7 +78,7 @@ static int cwtimeout_cb(const void *data
 static int cwbeep_cb(const void *data);
 static int r4hanguptimeout_cb(const void *data);
 static void brcm_generate_rtp_packet(struct brcm_subchannel *p, uint8_t *packet_buf, int type, int marker, int dtmf_timestamp, int seqno);
-static void brcm_interpret_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
+static void brcm_process_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
 static int brcm_mute_connection(struct brcm_subchannel *p);
 static int brcm_unmute_connection(struct brcm_subchannel *p);
 static int brcm_close_connection(struct brcm_subchannel *p);
@@ -1484,7 +1484,7 @@ static int brcm_write(struct ast_channel
 		/* copy frame data to audio packet */
 		memcpy(ap->rtp, frame->data.ptr, frame->datalen);
 
-		brcm_interpret_rtcp_packet(sub, ap->rtp, ap->rtp_size);
+		brcm_process_rtcp_packet(sub, ap->rtp, ap->rtp_size);
 
 		pe_bus_send(audio_tx_bus, (uint8_t *)ap, packet_size);
 		free(ap);
@@ -5036,35 +5036,43 @@ static void brcm_generate_rtp_packet(str
 	packet_buf[1] = type;
 	packet_buf[1] |= marker?0x80:0x00;
 	packet_buf16[1] = htons(seqno); //Add sequence number
-	packet_buf32[1] = htonl(sub->time_stamp);	//Add timestamp
+	packet_buf32[1] = htonl(sub->time_stamp); //Add timestamp
 	sub->time_stamp += sub->period*8;
-	packet_buf32[2] = sub->ssrc;	//Random SSRC
+	packet_buf32[2] = sub->ssrc;
 }
 
-static void brcm_interpret_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size) {
-	unsigned int *rtcp_word = (unsigned int *)(rtcp_frame); // 32 bits packet
-	unsigned int packetwords = rtcp_size / 4; // number of packets
-	unsigned int position = 0;
-	unsigned int pt;
-
-	while (position < packetwords) {
-		unsigned int temp_word = ntohl(rtcp_word[position]);
-		pt = (temp_word >> 16) & 0xFF;
-		switch (pt) {
+/*
+ * This function does the followings.
+ * - Replace SSRC with the value from the sub-channel, which is also used by the corresponding RTP packets within
+ *   the same session. Both RTP and RTCP packets in the same session must have the same SSRC value.
+ * - Accumulate "Interarrival jitter" for farEndInterrivalJitter and jitter_count which are used to calculate
+ *   averageFarEndInterarrivalJitter.
+ */
+static void brcm_process_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size)
+{
+	struct rtcp_header_t *rtcp_hdr = (struct rtcp_header_t *)rtcp_frame;
+	uint8_t *packet_end = rtcp_frame + rtcp_size;
+
+	while ((uint8_t *)rtcp_hdr + sizeof(struct rtcp_header_t) <= packet_end && // Minimum RTCP packet size validation
+			RTCP_GET_VERSION(rtcp_hdr) == RTP_VERSION &&  // RTP version validation
+			RTCP_PKT_END(rtcp_hdr) <= packet_end) {       // Packet length validation
+		switch (rtcp_hdr->pt) {
 			case RTCP_SR:
 				p->jitter_count++;
-				p->farEndInterrivalJitter += ntohl(rtcp_word[position+10]);
+				p->farEndInterrivalJitter += RTCP_SR_GET_INTERARRIVAL_JITTER(rtcp_hdr);
 				/* Intentional fall through */
 			case RTCP_RR:
 			case RTCP_SDES:
 			case RTCP_XR:
-				//replacing ssrc
-				rtcp_word[position + 1] = p->ssrc;
+				// Replace SSRC for all types of RTCP packets above
+				rtcp_hdr->ssrc = p->ssrc;
 				break;
 			default:
+				ast_log(LOG_ERROR, "Unknown RTCP packet type:%hhu\n", rtcp_hdr->pt);
 				break;
-			}
-		position++;
+		}
+		// Move to the next RTCP header for a compound RTCP packet which contains more than one packet types
+		rtcp_hdr = (struct rtcp_header_t *)RTCP_PKT_END(rtcp_hdr);
 	}
 }
 
Index: asterisk-18.5.1/channels/chan_brcm.h
===================================================================
--- asterisk-18.5.1.orig/channels/chan_brcm.h
+++ asterisk-18.5.1/channels/chan_brcm.h
@@ -110,6 +110,24 @@ typedef enum dialtone_state {
 	DIALTONE_LAST,
 } dialtone_state;
 
+/*
+ * Common part of RTCP header according to https://datatracker.ietf.org/doc/html/rfc1889#section-6.3.1
+ */
+// RTP header info
+#define RTP_VERSION     2
+struct __attribute__((packed)) rtcp_header_t {
+	uint8_t  v_p_rc; // Version, padding and reception report count
+	uint8_t  pt;     // Packet type
+	/* The length of RTCP packet in 32-bit words minus 1, including the header and padding if any.
+	 * For a compound RTCP packet which contains more than one payload type, e.g. SR + SDES + XR, length is
+	 * just for one single RTCP packet instead of all packets. */
+	uint16_t length;
+	uint32_t ssrc;   // Synchronization source identifier for the originator
+};
+#define RTCP_PKT_END(header)                    ((uint8_t *)(header) + (ntohs((header)->length) + 1) * 4)
+#define RTCP_GET_VERSION(header)                ((header)->v_p_rc >> 6)
+#define RTCP_SR_GET_INTERARRIVAL_JITTER(header) ntohl(*((uint32_t *)(header) + 10))
+
 struct brcm_subchannel {
 	int id;
 	unsigned int call_id;		/* The call_id of connection assigned by pjsip */
Index: asterisk-18.5.1/res/res_rtp_asterisk.c
===================================================================
--- asterisk-18.5.1.orig/res/res_rtp_asterisk.c
+++ asterisk-18.5.1/res/res_rtp_asterisk.c
@@ -127,6 +127,8 @@
 #define RTCP_PT_BYE     203
 /*! Application defined (From RFC3550) */
 #define RTCP_PT_APP     204
+/*! Extended Report (From RFC3550) */
+#define RTCP_PT_XR    207
 /* VP8: RTCP Feedback */
 /*! Payload Specific Feed Back (From RFC4585 also RFC5104) */
 #define RTCP_PT_PSFB    AST_RTP_RTCP_PSFB
@@ -6263,6 +6265,7 @@ static struct ast_frame *ast_rtcp_interp
 				break;
 			}
 			break;
+		case RTCP_PT_XR:
 		case RTCP_PT_SDES:
 		case RTCP_PT_BYE:
 			/*
@@ -6313,6 +6316,7 @@ static struct ast_frame *ast_rtcp_interp
 			ssrc = ntohl(rtcpheader[i + 2]);
 			break;
 		case RTCP_PT_SDES:
+		case RTCP_PT_XR:
 		case RTCP_PT_BYE:
 		default:
 			ssrc = 0;
@@ -6617,8 +6621,8 @@ static struct ast_frame *ast_rtcp_interp
 	}
 
 	#ifdef RTCP_PRODUCER_PLATFORM
-	f->datalen = size;
-	memcpy(f->data.ptr, rtcpdata, size);
+	f->datalen = len;
+	memcpy(f->data.ptr, rtcpdata, len);
 	#endif
 
 	return f;
