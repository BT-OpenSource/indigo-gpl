--- a/channels/chan_brcm.h
+++ b/channels/chan_brcm.h
@@ -141,7 +141,8 @@
 	uint16_t sequence_number;       /* Endpoint RTP sequence number state */
 	unsigned int time_stamp;	/* Endpoint RTP time stamp state */
 	unsigned int period;		/* Endpoint RTP period */
-	unsigned int ssrc;		/* Endpoint RTP synchronization source */
+	unsigned int far_end_ssrc;	/* Endpoint RTP synchronization source of far end */
+	unsigned int dsp_ssrc;		/* Endpoint RTP synchronization source of DUT's DSP */
 	int codec;			/* Used codec */
 	struct brcm_pvt *parent;	/* brcm_line owning this subchannel */
 	int cw_timer_id;		/* Current call waiting timer id, -1 if no active timer */
--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -2913,6 +2913,7 @@
 	uint8_t payload_type = ap->rtp[1];
 	struct ast_frame frame = { .src = "TELCHAN", };
 	struct brcm_pvt *pvt;
+	unsigned int*   packet_buf32 = (unsigned int*)ap->rtp;
 
 	rtp_packet_type = brcm_classify_rtp_packet(payload_type);
 	pvt = brcm_get_pvt_from_lineid(iflist, ap->line);
@@ -2959,6 +2960,7 @@
 				ast_log(LOG_NOTICE, "set local codec to :%s \n", ast_channel_codec_get(owner));
 			}
 		}
+		sub->dsp_ssrc = packet_buf32[2]; // save the DSP's SSRC
 	} else if (rtp_packet_type == BRCM_RTCP_SR || rtp_packet_type == BRCM_RTCP_RR) {
 		frame.frametype = AST_FRAME_RTCP;
 		frame.data.ptr = ap->rtp;
@@ -3616,7 +3618,8 @@
 				sub->channel_state = ONHOOK;
 				sub->time_stamp = 0;
 				sub->sequence_number = 0;
-				sub->ssrc = 0;
+				sub->far_end_ssrc = 0;
+				sub->dsp_ssrc = 0;
 				sub->codec = -1;
 				sub->parent = tmp;
 				sub->cw_timer_id = -1;
@@ -3881,7 +3884,8 @@
 		ast_cli(a->fd, "  Connection init     : %d\n", sub->connection_init);
 		ast_cli(a->fd, "  Codec used          : %s\n", brcm_get_codec_string(sub->codec));
 		ast_cli(a->fd, "  RTP sequence number : %d\n", sub->sequence_number);
-		ast_cli(a->fd, "  RTP SSRC            : %d\n", sub->ssrc);
+		ast_cli(a->fd, "  RTP Far End SSRC    : %d\n", sub->far_end_ssrc);
+		ast_cli(a->fd, "  RTP DSP SSRC        : %d\n", sub->dsp_ssrc);
 		ast_cli(a->fd, "  RTP timestamp       : %d\n", sub->time_stamp);
 		ast_cli(a->fd, "  CW Timer id         : %d\n", sub->cw_timer_id);
 		ast_cli(a->fd, "  CW Beep Timer id    : %d\n", sub->cwBeep_timer_id);
@@ -5177,7 +5181,7 @@
 static int brcm_create_connection(struct brcm_subchannel *sub) {
 	if (!sub->connection_init) {
 		/* generate random nr for rtp header */
-		sub->ssrc = rand();
+		sub->far_end_ssrc = rand();
 
 		ast_debug(1, "Creating virtual Asterisk connection for pvt line_id=%i connection_id=%d\n", sub->parent->line_id, sub->connection_id);
 		sub->connection_init = 1;
@@ -5344,7 +5348,7 @@
 	packet_buf16[1] = htons(seqno ? seqno : sub->sequence_number++); //Add sequence number
 	packet_buf32[1] = htonl(rtp_timestamp ? rtp_timestamp : sub->time_stamp); //Add timestamp
 	sub->time_stamp += sub->period*8;
-	packet_buf32[2] = sub->ssrc;
+	packet_buf32[2] = sub->far_end_ssrc;
 }
 
 /*
@@ -5358,6 +5362,7 @@
 {
 	struct rtcp_header_t *rtcp_hdr = (struct rtcp_header_t *)rtcp_frame;
 	uint8_t *packet_end = rtcp_frame + rtcp_size;
+	unsigned int*   packet_buf32 = (unsigned int*)rtcp_hdr;
 
 	while ((uint8_t *)rtcp_hdr + sizeof(struct rtcp_header_t) <= packet_end && // Minimum RTCP packet size validation
 			RTCP_GET_VERSION(rtcp_hdr) == RTP_VERSION &&  // RTP version validation
@@ -5366,12 +5371,13 @@
 			case RTCP_SR:
 				p->jitter_count++;
 				p->farEndInterrivalJitter += RTCP_SR_GET_INTERARRIVAL_JITTER(rtcp_hdr);
+				packet_buf32[7] = p->dsp_ssrc;	// replace Source Identifier with dsp's SSRC
 				/* Intentional fall through */
 			case RTCP_RR:
 			case RTCP_SDES:
 			case RTCP_XR:
-				// Replace SSRC for all types of RTCP packets above
-				rtcp_hdr->ssrc = p->ssrc;
+				// Replace SSRC with far end  SSRC for all types of RTCP packets above
+				rtcp_hdr->ssrc = p->far_end_ssrc;
 				break;
 			default:
 				ast_log(LOG_ERROR, "Unknown RTCP packet type:%hhu\n", rtcp_hdr->pt);
