diff --git a/interface-ip.c b/interface-ip.c
index 648f521..ea613b5 100644
--- a/interface-ip.c
+++ b/interface-ip.c
@@ -839,9 +839,11 @@ interface_update_proto_route(struct vlist_tree *tree,
 	if (node_new) {
 		bool _enabled = enable_route(ip, route_new);
 
-		if (!(route_new->flags & DEVADDR_EXTERNAL) && !keep && _enabled)
+		if (!(route_new->flags & DEVADDR_EXTERNAL) && !keep && _enabled) {
+			device_set_ifindex(dev, system_if_resolve(dev));
 			if (system_add_route(dev, route_new))
 				route_new->failed = true;
+		}
 
 		route_new->iface = iface;
 		route_new->enabled = _enabled;
diff --git a/proto-shell.c b/proto-shell.c
index e20d539..4d76072 100644
--- a/proto-shell.c
+++ b/proto-shell.c
@@ -17,6 +17,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <signal.h>
+#include <sys/wait.h>
 
 #include <arpa/inet.h>
 #include <netinet/in.h>
@@ -89,6 +90,31 @@ struct proto_shell_state {
 	struct list_head deps;
 };
 
+static void kill_pid_and_wait(pid_t pid, unsigned int signal)
+{
+	pid_t rc_pid = 0;
+	int retries = 0;
+	int status;
+
+	kill(pid, signal);
+	if (signal == SIGTERM || signal == SIGKILL){
+		while (rc_pid == 0 && retries < 5){
+			rc_pid = waitpid(pid, &status, WNOHANG);
+			if (rc_pid > 0){
+				if (WIFEXITED(status)) {
+					D(SYSTEM, "Child exited with rc %d\n", WEXITSTATUS(status));
+					break;
+				} else if (WIFSIGNALED(status)) {
+					D(SYSTEM, "Child exited via signal %d\n", WTERMSIG(status));
+					break;
+				}
+			}
+			retries++;
+			sleep(1);
+		}
+	}
+}
+
 static void
 proto_shell_check_dependencies(struct proto_shell_state *state)
 {
@@ -200,9 +226,9 @@ proto_shell_handler(struct interface_proto_state *proto,
 		case S_SETUP:
 			if (state->script_task.uloop.pending) {
 				uloop_timeout_set(&state->teardown_timeout, 1000);
-				kill(state->script_task.uloop.pid, SIGTERM);
+				kill_pid_and_wait(state->script_task.uloop.pid, SIGTERM);
 				if (state->proto_task.uloop.pending)
-					kill(state->proto_task.uloop.pid, SIGTERM);
+					kill_pid_and_wait(state->proto_task.uloop.pid, SIGTERM);
 				state->renew_pending = false;
 				state->sm = S_SETUP_ABORT;
 				return 0;
@@ -334,7 +360,7 @@ proto_shell_task_finish(struct proto_shell_state *state,
 
 		if (state->proto_task.uloop.pending) {
 			if (!state->proto_task_killed)
-				kill(state->proto_task.uloop.pid, SIGTERM);
+				kill_pid_and_wait(state->proto_task.uloop.pid, SIGTERM);
 			break;
 		}
 
@@ -659,7 +685,7 @@ proto_shell_kill_command(struct proto_shell_state *state, struct blob_attr **tb)
 	if (state->proto_task.uloop.pending) {
 		if (signal == SIGTERM || signal == SIGKILL)
 			state->proto_task_killed = true;
-		kill(state->proto_task.uloop.pid, signal);
+		kill_pid_and_wait(state->proto_task.uloop.pid, signal);
 	}
 
 	return 0;
