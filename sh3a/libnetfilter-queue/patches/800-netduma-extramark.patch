Â© Netduma Software Ltd 2021

Added extra_mark to skb and ct.
This patch is a combination of Netduma patches provided in NG-204909.

--- a/include/libnetfilter_queue/libnetfilter_queue.h
+++ b/include/libnetfilter_queue/libnetfilter_queue.h
@@ -72,6 +72,14 @@ extern int nfq_set_verdict2(struct nfq_q
 			    uint32_t datalen,
 			    const unsigned char *buf);
 
+extern int nfq_set_verdict2_extra(struct nfq_q_handle *qh,
+			uint32_t id,
+			uint32_t verdict,
+			uint32_t mark,
+			uint32_t extra_mark,
+			uint32_t data_len,
+			const unsigned char *buf);
+
 extern int nfq_set_verdict_batch(struct nfq_q_handle *qh,
 			    uint32_t id,
 			    uint32_t verdict);
@@ -95,6 +103,7 @@ extern struct nfqnl_msg_packet_hdr *
 				nfq_get_msg_packet_hdr(struct nfq_data *nfad);
 
 extern uint32_t nfq_get_nfmark(struct nfq_data *nfad);
+extern uint32_t nfq_get_nfextramark(struct nfq_data *nfad);
 
 extern int nfq_get_timestamp(struct nfq_data *nfad, struct timeval *tv);
 
--- a/include/libnetfilter_queue/linux_nfnetlink_queue.h
+++ b/include/libnetfilter_queue/linux_nfnetlink_queue.h
@@ -54,9 +54,13 @@ enum nfqnl_attr_type {
 	NFQA_UID,			/* __u32 sk uid */
 	NFQA_GID,			/* __u32 sk gid */
 	NFQA_SECCTX,			/* security context string */
+	NFQA_VLAN,			/* nested attribute: packet vlan info */
+	NFQA_L2HDR,			/* full L2 header */
+	NFQA_EXTRA_MARK,		/* __u32 nf_extra_mark */
 
 	__NFQA_MAX
 };
+
 #define NFQA_MAX (__NFQA_MAX - 1)
 
 struct nfqnl_msg_verdict_hdr {
--- /dev/null
+++ b/include/xt_connmark_idx.h
@@ -0,0 +1,40 @@
+#ifndef _XT_CONNMARK_H
+#define _XT_CONNMARK_H
+
+#include <linux/types.h>
+
+/* Copyright (C) 2002,2004 MARA Systems AB <http://www.marasystems.com>
+ * by Henrik Nordstrom <hno@marasystems.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+/*
+* If we rely on patching the original xt_mark.h header then we'd need to update
+* the toolchains sysroot header. However, it is conceivable for multiple
+* targets to share a toolchain on same machine. Instead the patch creates and
+* uses this new header ~@Netduma_Iain
+*/
+
+enum {
+        XT_CONNMARK_SET = 0,
+        XT_CONNMARK_SAVE,
+        XT_CONNMARK_RESTORE
+};
+
+struct xt_connmark_tginfo1 {
+        __u32 ctmark, ctmask, nfmask;
+        __u8 mode;
+        __u8 idx;
+};
+
+struct xt_connmark_mtinfo1 {
+        __u32 mark, mask;
+        __u8 invert;
+        __u8 idx;
+};
+
+#endif /*_XT_CONNMARK_H*/
--- /dev/null
+++ b/include/xt_mark_idx.h
@@ -0,0 +1,24 @@
+#ifndef _XT_MARK_H
+#define _XT_MARK_H
+
+/*
+* If we rely on patching the original xt_mark.h header then we'd need to update
+* the toolchains sysroot header. However, it is conceivable for multiple
+* targets to share a toolchain on the same machine. Instead the patch creates and
+* uses this new header ~@Netduma_Iain
+*/
+
+#include <linux/types.h>
+
+struct xt_mark_tginfo2 {
+	__u32 mark, mask;
+	__u32 idx;
+};
+
+struct xt_mark_mtinfo1 {
+	__u32 mark, mask;
+	__u8 invert;
+	__u8 idx;
+};
+
+#endif /*_XT_MARK_H*/
--- a/src/libnetfilter_queue.c
+++ b/src/libnetfilter_queue.c
@@ -774,12 +774,13 @@ int nfq_set_queue_maxlen(struct nfq_q_handle *qh, uint32_t queuelen)
 static int __set_verdict(struct nfq_q_handle *qh, uint32_t id,
 		uint32_t verdict, uint32_t mark, int set_mark,
 		uint32_t data_len, const unsigned char *data,
-		enum nfqnl_msg_types type)
+		enum nfqnl_msg_types type, uint32_t extra_mark)
 {
 	struct nfqnl_msg_verdict_hdr vh;
 	union {
 		char buf[NFNL_HEADER_LEN
 			+NFA_LENGTH(sizeof(mark))
+			+NFA_LENGTH(sizeof(extra_mark))
 			+NFA_LENGTH(sizeof(vh))];
 		struct nlmsghdr nmh;
 	} u;
@@ -802,8 +803,10 @@ static int __set_verdict(struct nfq_q_handle *qh, uint32_t id,
 	/* add verdict header */
 	nfnl_addattr_l(&u.nmh, sizeof(u), NFQA_VERDICT_HDR, &vh, sizeof(vh));
 
-	if (set_mark)
+	if (set_mark) {
 		nfnl_addattr32(&u.nmh, sizeof(u), NFQA_MARK, mark);
+		nfnl_addattr32(&u.nmh, sizeof(u), NFQA_EXTRA_MARK, extra_mark);
+	}
 
 	iov[0].iov_base = &u.nmh;
 	iov[0].iov_len = NLMSG_TAIL(&u.nmh) - (void *)&u.nmh;
@@ -858,7 +861,7 @@ int nfq_set_verdict(struct nfq_q_handle *qh, uint32_t id,
 		    const unsigned char *buf)
 {
 	return __set_verdict(qh, id, verdict, 0, 0, data_len, buf,
-						NFQNL_MSG_VERDICT);
+						NFQNL_MSG_VERDICT, 0);
 }
 
 /**
@@ -876,7 +879,26 @@ int nfq_set_verdict2(struct nfq_q_handle *qh, uint32_t id,
 		     uint32_t data_len, const unsigned char *buf)
 {
 	return __set_verdict(qh, id, verdict, htonl(mark), 1, data_len,
-						buf, NFQNL_MSG_VERDICT);
+						buf, NFQNL_MSG_VERDICT, 0);
+}
+
+/**
+ * nfq_set_verdict2 - like nfq_set_verdict, but you can set the mark.
+ * \param qh Netfilter queue handle obtained by call to nfq_create_queue().
+ * \param id	ID assigned to packet by netfilter.
+ * \param verdict verdict to return to netfilter (NF_ACCEPT, NF_DROP)
+ * \param mark mark to put on packet
+ * \param extra_mark extra mark to put on packet
+ * \param data_len number of bytes of data pointed to by #buf
+ * \param buf the buffer that contains the packet data
+ */
+EXPORT_SYMBOL
+int nfq_set_verdict2_extra(struct nfq_q_handle *qh, uint32_t id,
+		     uint32_t verdict, uint32_t mark, uint32_t extra_mark,
+		     uint32_t data_len, const unsigned char *buf)
+{
+	return __set_verdict(qh, id, verdict, htonl(mark), 1, data_len,
+				buf, NFQNL_MSG_VERDICT, htonl(extra_mark));
 }
 
 /**
@@ -896,7 +918,7 @@ int nfq_set_verdict_batch(struct nfq_q_handle *qh, uint32_t id,
 			  uint32_t verdict)
 {
 	return __set_verdict(qh, id, verdict, 0, 0, 0, NULL,
-					NFQNL_MSG_VERDICT_BATCH);
+					NFQNL_MSG_VERDICT_BATCH, 0);
 }
 
 /**
@@ -911,7 +933,7 @@ int nfq_set_verdict_batch2(struct nfq_q_handle *qh, uint32_t id,
 			   uint32_t verdict, uint32_t mark)
 {
 	return __set_verdict(qh, id, verdict, htonl(mark), 1, 0,
-				NULL, NFQNL_MSG_VERDICT_BATCH);
+				NULL, NFQNL_MSG_VERDICT_BATCH, 0);
 }
 
 /**
@@ -934,7 +956,7 @@ int nfq_set_verdict_mark(struct nfq_q_handle *qh, uint32_t id,
 			 uint32_t data_len, const unsigned char *buf)
 {
 	return __set_verdict(qh, id, verdict, mark, 1, data_len, buf,
-						NFQNL_MSG_VERDICT);
+						NFQNL_MSG_VERDICT, 0);
 }
 
 /**
@@ -989,6 +1011,18 @@ uint32_t nfq_get_nfmark(struct nfq_data *nfad)
 	return ntohl(nfnl_get_data(nfad->data, NFQA_MARK, uint32_t));
 }
 
+/**
+ * nfq_get_nfextramark - get the packet extra mark
+ * \param nfad Netlink packet data handle passed to callback function
+ *
+ * \return the netfilter extra mark currently assigned to the given queued packet.
+ */
+EXPORT_SYMBOL
+uint32_t nfq_get_nfextramark(struct nfq_data *nfad)
+{
+	return ntohl(nfnl_get_data(nfad->data, NFQA_EXTRA_MARK, uint32_t));
+}
+
 /**
  * nfq_get_timestamp - get the packet timestamp
  * \param nfad Netlink packet data handle passed to callback function
