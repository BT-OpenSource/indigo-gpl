--- a/dmtree/tr104/common.c
+++ b/dmtree/tr104/common.c
@@ -150,6 +150,35 @@ static void convert_used_extensions(char
 
 }
 
+static const char *get_bt_term_cause(int sip_response_code)
+{
+	switch(sip_response_code)
+	{
+		case 400:
+			return "RemoteBadRequest";
+		case 403:
+			return "RemoteForbidden";
+		case 404:
+			return "RemoteNotFound";
+		case 405:
+			return "RemoteNotAllowed";
+		case 406:
+			return "RemoteNotAcceptable";
+		case 408:
+		case 497:
+			return "RemoteTimeout";
+		case 480:
+			return "RemoteUnavailable";
+		case 505:
+			return "RemoteNotSupported";
+	}
+
+	if (sip_response_code >= 400)
+		return "RemoteReject";
+
+	return "LocalTimeout";
+}
+
 // return true is having successful responses 2xx
 bool sip_response_checker(char *response_code) {
 	int code;
@@ -210,6 +239,7 @@ int init_call_log(void)
 		}
 		struct call_log_entry cdr = { {NULL, NULL}, };
 		if ( line_record ){
+			bool local_disconnect;
 			char end_time[sizeof(cdr.start_time)] = "";
 			char *token, *end;
 
@@ -350,6 +380,14 @@ int init_call_log(void)
 			CHECK_RESULT(end);
 			DM_STRNCPY(cdr.sipResponseCode, token, end - token + 1);
 
+			// local disconnect flag
+			token = DM_LSTRSTR(token, ",");
+			CHECK_RESULT(token);
+			token += 1;
+			end = DM_LSTRSTR(token, ",");
+			CHECK_RESULT(end);
+			local_disconnect = *token == '1';
+
 			// Codec
 			token = DM_LSTRSTR(token, ",\"");
 			CHECK_RESULT(token);
@@ -604,13 +642,18 @@ int init_call_log(void)
 			* TODO: Asterisk needs to be changed in order to provide more TR-104 compliant call termination causes.
 			*/
 			if (strcasecmp(cdr.termination_cause, "NO ANSWER") == 0)
-				DM_STRNCPY(cdr.termination_cause, "LocalTimeout", sizeof(cdr.termination_cause));
+			{
+				if (strcasecmp(cdr.direction, "Incoming") == 0)
+					DM_STRNCPY(cdr.termination_cause, "LocalReject", sizeof(cdr.termination_cause));
+				else
+					DM_STRNCPY(cdr.termination_cause, get_bt_term_cause(atoi(cdr.sipResponseCode)), sizeof(cdr.termination_cause));
+			}
 			else if (strcasecmp(cdr.termination_cause, "FAILED") == 0)
 				DM_STRNCPY(cdr.termination_cause, "LocalInternalError", sizeof(cdr.termination_cause));
 			else if (strcasecmp(cdr.termination_cause, "BUSY") == 0)
 				DM_STRNCPY(cdr.termination_cause, "RemoteBusy", sizeof(cdr.termination_cause));
 			else if (strcasecmp(cdr.termination_cause, "ANSWERED") == 0)
-				DM_STRNCPY(cdr.termination_cause, "RemoteDisconnect", sizeof(cdr.termination_cause));
+				DM_STRNCPY(cdr.termination_cause, local_disconnect ? "LocalDisconnect" : "RemoteDisconnect", sizeof(cdr.termination_cause));
 			else if (strcasecmp(cdr.termination_cause, "CONGESTION") == 0)
 				DM_STRNCPY(cdr.termination_cause, "RemoteNetworkFailure", sizeof(cdr.termination_cause));
 			else
