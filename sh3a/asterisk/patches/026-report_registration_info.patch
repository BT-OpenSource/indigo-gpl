--- a/res/Makefile
+++ b/res/Makefile
@@ -27,7 +27,7 @@
 endif
 
 res_pjsip_pubsub.so: LIBS+=-lubus -lubox -lpicoevent
-res_pjsip_outbound_registration.so: LIBS+=-lubus -lubox -lpicoevent
+res_pjsip_outbound_registration.so: LIBS+=-lubus -lubox -lpicoevent -lindigo
 
 res_config_ldap.o: _ASTCFLAGS+=-DLDAP_DEPRECATED
 
--- a/res/res_pjsip_outbound_registration.c
+++ b/res/res_pjsip_outbound_registration.c
@@ -29,6 +29,7 @@
 #include <pjsip.h>
 #include <pjsip_ua.h>
 #include <time.h>
+#include <indigo/report.h>
 
 #include "asterisk/res_pjsip.h"
 #include "asterisk/res_pjsip_cli.h"
@@ -435,6 +436,22 @@
 /*! \brief Free any endpoint security mechanisms that have been stored */
 static void clear_endpoint_security_mechanisms(struct sip_outbound_registration_client_state *client_state);
 
+#define REGISTRATION_CATEGORY "voice.registration"
+static void report_registration_info(enum sip_outbound_registration_status status, const char *event, ...)
+{
+	va_list args;
+	char *buf;
+
+	va_start(args, event);
+	vasprintf(&buf, event, args);
+	va_end(args);
+
+	REPORT_LOW(REGISTRATION_CATEGORY, "{ \"status\":\"%s\", \"event\":\"%s\" }",
+		sip_outbound_registration_status_str(status), buf);
+
+	free(buf);
+}
+
 /*! \brief hashing function for state objects */
 static int registration_state_hash(const void *obj, const int flags)
 {
@@ -1339,6 +1356,8 @@
 			ast_debug(1, "Outbound registration to '%s' with client '%s' successful\n", server_uri, client_uri);
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REGISTERED);
 			sip_outbound_registration_send_ubus_event("REGISTERED",response->expiration,client_uri);
+			report_registration_info(response->client_state->status, "Successful registration");
+
 			response->client_state->retries = 0;
 			schedule_registration(response->client_state,
                     next_registration_time(response->expiration));
@@ -1362,6 +1381,8 @@
 			ast_debug(1, "Outbound unregistration to '%s' with client '%s' successful\n", server_uri, client_uri);
 			update_client_state_status(response->client_state, SIP_REGISTRATION_UNREGISTERED);
 			sip_outbound_registration_send_ubus_event("UNREGISTERED",response->expiration,client_uri);
+			report_registration_info(response->client_state->status, "Successful de-registration");
+
 			ast_sip_transport_monitor_unregister(response->rdata->tp_info.transport,
 				registration_transport_shutdown_cb, response->client_state->registration_name,
 				monitor_matcher);
@@ -1376,8 +1397,11 @@
 				server_uri, client_uri);
 			/* 494 loop detected! This is fatal! */
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REJECTED_PERMANENT);
+			report_registration_info(response->client_state->status, "494 loop detected");
 			sip_outbound_registration_send_ubus_event("UNREGISTERED",response->expiration,client_uri);
 		} else {
 			/* Try (initial) registration again - but now with additional headers */
+			report_registration_info(response->client_state->status, "494 received");
+
 			response->client_state->is494 = 1;
 			ao2_ref(response->client_state, +1);
 			handle_client_registration(response->client_state);
@@ -1387,17 +1411,26 @@
 	} else if (response->retry_after) {
 		/* If we have been instructed to retry after a period of time, schedule it as such */
 		schedule_retry(response, response->retry_after, server_uri, client_uri);
+
+		report_registration_info(response->client_state->status,
+			"Requested to retry after %u seconds", response->retry_after);
+
 	} else if (response->client_state->retry_interval
 		&& sip_outbound_registration_is_temporal(response->code, response->client_state)) {
 		if (response->client_state->retries == response->client_state->max_retries) {
 			/* If we received enough temporal responses to exceed our maximum give up permanently */
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REJECTED_PERMANENT);
+			report_registration_info(response->client_state->status, "Maximum retries reached");
+
 			ast_log(LOG_WARNING, "Maximum retries reached when attempting outbound registration to '%s' with client '%s', stopping registration attempt\n",
 				server_uri, client_uri);
 		} else {
 			/* On the other hand if we can still try some more do so */
 			response->client_state->retries++;
 			schedule_retry(response, response->client_state->retry_interval, server_uri, client_uri);
+
+			report_registration_info(response->client_state->status,
+				"Temporal failure, retry after %u seconds", response->client_state->retry_interval);
 		}
 	} else {
 		if (response->code == 403
@@ -1405,6 +1438,9 @@
 			&& response->client_state->retries < response->client_state->max_retries) {
 			/* A forbidden response retry interval is configured and there are retries remaining */
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REJECTED_TEMPORARY);
+			report_registration_info(response->client_state->status,
+				"403 response, retry after %u seconds", response->client_state->forbidden_retry_interval);
+
 			response->client_state->retries++;
 			schedule_registration(response->client_state, response->client_state->forbidden_retry_interval);
 			ast_log(LOG_WARNING, "403 Forbidden fatal response received from '%s' on registration attempt to '%s', retrying in '%u' seconds\n",
@@ -1413,6 +1449,9 @@
 			   && response->client_state->retries < response->client_state->max_retries) {
 			/* Some kind of fatal failure response received, so retry according to configured interval */
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REJECTED_TEMPORARY);
+			report_registration_info(response->client_state->status,
+				"%d response, retry after %u seconds", response->code, response->client_state->fatal_retry_interval);
+
 			response->client_state->retries++;
 			schedule_registration(response->client_state, response->client_state->fatal_retry_interval);
 			ast_log(LOG_WARNING, "'%d' fatal response received from '%s' on registration attempt to '%s', retrying in '%u' seconds\n",
@@ -1420,6 +1459,8 @@
 		} else {
 			/* Finally if there's no hope of registering give up */
 			update_client_state_status(response->client_state, SIP_REGISTRATION_REJECTED_PERMANENT);
+			report_registration_info(response->client_state->status, "Registration failed");
+
 			if (response->rdata) {
 				ast_log(LOG_WARNING, "Fatal response '%d' received from '%s' on registration attempt to '%s', stopping outbound registration\n",
 					response->code, server_uri, client_uri);
