--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -219,6 +219,96 @@
 static bool internet_connection = false;
 static bool voice_test_mode = false;
 
+#define MAX_CONTEXTS 10
+typedef struct shared_context {
+	struct ubus_context *ctx;
+	int tid;
+	time_t last_used;
+} share_context_t;
+static struct shared_context ctxs[MAX_CONTEXTS];
+
+static struct ubus_context *get_shared_context(char *func) {
+
+	int tid = ast_get_tid();
+
+	// loop through all the contexts looking for our thread
+	for(int i=0; i < MAX_CONTEXTS; i++) {
+		if (ctxs[i].tid == tid) {
+			ast_log(LOG_DEBUG, "tid=%d, existing context %d for %s", tid, i, func);
+			ctxs[i].last_used = time(NULL);
+			return ctxs[i].ctx;
+		}
+	}
+
+	// housekeeping - close contexts that haven't been used in over 5 minutes
+	for(int i=0; i < MAX_CONTEXTS; i++) {
+		if (ctxs[i].tid != 0 && ctxs[i].last_used < time(NULL) - 300) {
+			ast_log(LOG_DEBUG, "tid=%d, expiring context %d", tid, i);
+			ubus_free(ctxs[i].ctx);
+			ctxs[i].tid = 0;
+			ctxs[i].last_used = 0;
+			ctxs[i].ctx = NULL;
+		}
+	}
+
+	// no match, loop through looking for a spare slot and create
+	// a new context, expiring old ones
+	for(int i=0; i < MAX_CONTEXTS; i++) {
+
+		// reused old one (after 3 minutes)
+		if (ctxs[i].tid != 0 && ctxs[i].last_used < time(NULL) - 180) {
+			ctxs[i].tid = ast_get_tid();
+			ctxs[i].last_used = time(NULL);
+
+			ast_log(LOG_VERBOSE, "tid=%d, reuse context %d for %s", ast_get_tid(), i, func);
+			return ctxs[i].ctx;
+		}
+
+		if (ctxs[i].tid == 0) {
+
+			ctxs[i].ctx = ubus_connect(NULL);
+			if (!ctxs[i].ctx) {
+				ast_log(LOG_WARNING, "failed to create context");
+				return NULL;
+			}
+			ctxs[i].tid = ast_get_tid();
+			ctxs[i].last_used = time(NULL);
+
+			ast_log(LOG_VERBOSE, "tid=%d, new context %d for %s", ast_get_tid(), i, func);
+			return ctxs[i].ctx;
+		}
+	}
+
+	// we seem to be busy. find the oldest context
+	int ctx_id = -1;
+	int oldest_time = 0;
+
+	for(int i=0; i < MAX_CONTEXTS; i++) {
+		ast_log(LOG_VERBOSE, "tid=%d, context %d, last_used=%d", ast_get_tid(), i, ctxs[i].last_used);
+
+		if (ctxs[i].last_used != 0) {
+			int diff = time(NULL) - ctxs[i].last_used;
+			ast_log(LOG_VERBOSE, "tid=%d, context %d, diff=%d", ast_get_tid(), i, diff);
+
+			if (diff > oldest_time) {
+				ctx_id = i;
+				oldest_time = diff;
+			}
+		}
+	}
+
+	if (ctx_id != -1) {
+			ctxs[ctx_id].tid = ast_get_tid();
+			ctxs[ctx_id].last_used = time(NULL);
+
+			ast_log(LOG_VERBOSE, "tid=%d, reusing oldest context %d for %s", ast_get_tid(), ctx_id, func);
+			return ctxs[ctx_id].ctx;
+	}
+
+	ast_log(LOG_WARNING, "tid=%d, no contexts available", ast_get_tid());
+	return NULL;
+}
+
 enum {
 	EVENT_TYPE,
 	EVENT_LINE_ID,
@@ -450,7 +540,7 @@
 // by another thread without locking.
 static uint32_t get_ubus_endpt_id(int log) {
 	if (!endpt_id) {
-		if (ubus_lookup_id(ctx, endpt_ubus_path, &endpt_id) != UBUS_STATUS_OK) {
+		if (ubus_lookup_id(get_shared_context(__FUNCTION__), endpt_ubus_path, &endpt_id) != UBUS_STATUS_OK) {
 			if (log)
 				ast_log(LOG_ERROR, "Failed to look up endptmngr's UBUS path\n");
 			return 0;
@@ -494,7 +584,7 @@
 		if (!req) return;
 
 		ast_verbose("thread %d: ubus call endpt signal\n", ast_get_tid());
-		res = ubus_invoke_async(ctx, endpt_id, "signal", bb.head, req);
+		res = ubus_invoke_async(get_shared_context(__FUNCTION__), endpt_id, "signal", bb.head, req);
 
 		if(res != UBUS_STATUS_OK) {
 			ast_log(LOG_ERROR, "Error invoking method: %s %d\n", "signal", res);
@@ -505,7 +595,7 @@
 		req->data_cb = ubus_call_answer;
 		req->complete_cb = ubus_call_complete;
 		req->priv = NULL;
-		ubus_complete_request_async(ctx, req);
+		ubus_complete_request_async(get_shared_context(__FUNCTION__), req);
 	}
 }
 
@@ -556,7 +646,7 @@
 		req = calloc(1, sizeof(struct ubus_request));
 		if (!req) return;
 		ast_verbose("thread %d: ubus call endpt connection\n", ast_get_tid());
-		res = ubus_invoke_async(ctx, endpt_id, "connection", bb.head, req);
+		res = ubus_invoke_async(get_shared_context(__FUNCTION__), endpt_id, "connection", bb.head, req);
 
 		if(res != UBUS_STATUS_OK) {
 			ast_log(LOG_ERROR, "Error invoking method: %s %d\n", "connection", res);
@@ -567,7 +657,7 @@
 		req->data_cb = ubus_call_answer;
 		req->complete_cb = ubus_call_complete;
 		req->priv = NULL;
-		ubus_complete_request_async(ctx, req);
+		ubus_complete_request_async(get_shared_context(__FUNCTION__), req);
 	}
 }
 
@@ -2868,14 +2958,14 @@
 static int check_voice_test_mode(void) {
 	uint32_t id;
 	struct blob_buf bb;
-	ubus_lookup_id(ctx, "voice.services", &id);
+	ubus_lookup_id(get_shared_context(__FUNCTION__), "voice.services", &id);
 	if(!id) {
 		return -1;
 	}
 
 	memset(&bb, 0, sizeof(bb));
 	blob_buf_init(&bb, 0);
-	int ret = ubus_invoke(ctx, id, "status", bb.head, check_voice_test_mode_cb, &voice_test_mode, 2000);
+	int ret = ubus_invoke(get_shared_context(__FUNCTION__), id, "status", bb.head, check_voice_test_mode_cb, &voice_test_mode, 2000);
 	if(ret != UBUS_STATUS_OK) {
 		ast_log(LOG_ERROR, "Failed to get voice test mode status\n");
 	}
@@ -4231,7 +4321,7 @@
 	blob_buf_init(&bb, 0);
 	blobmsg_add_u8(&bb, "effective", 0);
 
-	return (ubus_invoke(ctx, endpt_id, "count", bb.head,
+	return (ubus_invoke(get_shared_context(__FUNCTION__), endpt_id, "count", bb.head,
 		endpt_get_count_cb, NULL, 2000) == UBUS_STATUS_OK ? 0 : -1);
 }
 
@@ -4498,6 +4588,13 @@
 static int ubus_init(void) {
 	pe_stream_t *ubus_stream;
 
+	for(int i=0; i < MAX_CONTEXTS; i++) {
+		ast_log(LOG_VERBOSE, "initialising shared context %d", i);
+		ctxs[i].tid = 0;
+		ctxs[i].ctx = NULL;
+		ctxs[i].last_used = 0;
+	}
+
 	base = pe_base_new();
 	if (base < 0)
 		exit_failure("pe_base_new\n");
