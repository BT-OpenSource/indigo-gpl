--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -140,6 +140,7 @@ static const char tdesc[] = "Broadcom SL
 static const char config[] = "chan_telephony.conf";
 static const char broadcast_path[] = "voice.line";
 static channel_settings channel_config[MAX_NUM_LINEID];
+static int sip_line_callmode[MAX_SIP_CLIENTS] = {[0 ... MAX_SIP_CLIENTS-1] = LINE_CALL_MODE_MULTIPLE};
 static int current_connection_id = 0;
 static int num_fxs_endpoints = -1;
 static int num_fxo_endpoints = -1;
@@ -439,6 +440,8 @@ static struct endpt_event event_map[] =
 	{ .name = "JOIN", .event = EVENT_JOIN },
 	{ .name = "RELEASE", .event = EVENT_RELEASE },
 	{ .name = "BLOCK", .event = EVENT_BLOCK },
+	{ .name = "LINE_CALL_MODE_SINGLE", .event = EVENT_LINE_CALL_MODE_SINGLE},
+	{ .name = "LINE_CALL_MODE_MULTIPLE", .event = EVENT_LINE_CALL_MODE_MULTIPLE},
 	{ .name = "", .event = EVENT_LAST },
 };
 
@@ -1223,8 +1226,10 @@ static int brcm_call(struct ast_channel
 	struct timeval UtcTime = ast_tvnow();
 	struct ast_tm tm;
 	sub = ast_channel_tech_pvt(chan);
+	int sip_client_id = -1;
 
 	ast_debug(1, "line %d\n", sub->parent->line_id);
+	sscanf(sub->parent->context, "sip%d", &sip_client_id);
 	ast_localtime(&UtcTime, &tm, NULL);
 
 	if ((ast_channel_state(chan) != AST_STATE_DOWN) && (ast_channel_state(chan) != AST_STATE_RESERVED)) {
@@ -1262,7 +1267,8 @@ static int brcm_call(struct ast_channel
 		ast_setstate(chan, AST_STATE_RINGING_CW);
 		ast_queue_control(chan, AST_CONTROL_RINGING_CW);
 	}
-	else if (!brcm_subchannel_is_idle(sub_peer)) {
+	else if (!brcm_subchannel_is_idle(sub_peer) ||
+		(has_call_in_sip_client(p->context) && sip_line_callmode[sip_client_id] == LINE_CALL_MODE_SINGLE) ) {
 		ast_debug(1, "Line is busy\n");
 		ast_channel_hangupcause_set(chan, AST_CAUSE_USER_BUSY);
 		ast_queue_control(chan, AST_CONTROL_BUSY);
@@ -2735,7 +2741,9 @@ static void handle_dect_event(struct brc
 	}
 	else if (event == EVENT_RELEASE) {
 		ast_log(LOG_NOTICE, "EVENT_RELEASE detected for phone line %d\n", sub->parent->line_id);
-		if (sub->channel_state == INCALL && sub_peer->channel_state != CALLWAITING) {
+		if (sub->channel_state == AWAITONHOOK && sub_peer->channel_state == ONHOOK) {
+				brcm_close_connection(sub);
+		} else if (sub->channel_state == INCALL && sub_peer->channel_state != CALLWAITING) {
 				ast_log(LOG_ERROR, "Hanging up call\n");
 				ast_queue_control(owner, AST_CONTROL_HANGUP);
 		} else if ((sub->channel_state == RINGBACK || sub->channel_state == CALLENDED) && sub_peer->channel_state == ONHOLD) {
@@ -3312,6 +3320,18 @@ static void brcm_process_event(struct en
 	if (sub) {
 		switch (ev->event) {
 		case EVENT_OFFHOOK: {
+			int sip_client_id = -1;
+			sscanf(sub->parent->context, "sip%d", &sip_client_id);
+			if (has_call_in_sip_client(p->context) && sip_line_callmode[sip_client_id] == LINE_CALL_MODE_SINGLE) {
+				ast_log(LOG_NOTICE, "The call cannot be proceeded. Line is in single call mode and other extension is in call!\n");
+				brcm_create_connection(sub);
+				p->dialtone = DIALTONE_UNOBTAINABLE;
+				sub->channel_state = AWAITONHOOK;
+					p->dialtone_timeout_timer_id = ast_sched_add(sched, channel_config[p->line_id].offhook_nu_timeoutmsec, handle_dialtone_timeout, p);
+				brcm_signal_dialtone(p);
+				break;
+			}
+
 			if (!strlen(p->extensionCallStatus) || sub->channel_state == ONHOOK)
 				strncpy(p->extensionCallStatus, "Dialing", CALL_STATUS_MAX_LEN);
 			else if (sub->channel_state == RINGING)
@@ -3558,6 +3578,10 @@ static void brcm_process_event(struct en
 				ast_channel_unref(pjsip_chan);
 			}
 			break;
+		case EVENT_LINE_CALL_MODE_SINGLE:
+		case EVENT_LINE_CALL_MODE_MULTIPLE:
+			ast_debug(1, "EVENT %d from dect received\n", ev->event);
+			sip_line_callmode[ev->line] = ev->event == EVENT_LINE_CALL_MODE_SINGLE ? LINE_CALL_MODE_SINGLE : LINE_CALL_MODE_MULTIPLE;
 		default:
 			ast_debug(1, "Ignore event %s\n", ev->name);
 			break;
--- a/channels/chan_brcm.h
+++ b/channels/chan_brcm.h
@@ -35,6 +35,7 @@
 #define MAX_NUM_LINEID 30
 #define PACKET_BUFFER_SIZE 1024
 #define NUM_SUBCHANNELS 2
+#define MAX_SIP_CLIENTS    5
 
 #define BEGIN 0
 #define CONT  1
@@ -86,6 +87,8 @@ enum LINE_EVENT {																// Even
 	EVENT_JOIN,
 	EVENT_RELEASE,
 	EVENT_BLOCK,
+	EVENT_LINE_CALL_MODE_SINGLE,
+	EVENT_LINE_CALL_MODE_MULTIPLE,
 	EVENT_LAST,
 };
 
@@ -100,6 +103,11 @@ enum CALL_DIRECTION {
 	OUTGOING_CALL,
 };
 
+enum LINE_CALL_MODE {
+	LINE_CALL_MODE_SINGLE,
+	LINE_CALL_MODE_MULTIPLE,
+};
+
 typedef enum dialtone_state {
 	DIALTONE_OFF = 0,
 	DIALTONE_ON,
