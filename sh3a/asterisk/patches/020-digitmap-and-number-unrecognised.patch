Index: asterisk-18.4.0/channels/chan_brcm.c
===================================================================
--- asterisk-18.4.0.orig/channels/chan_brcm.c
+++ asterisk-18.4.0/channels/chan_brcm.c
@@ -124,6 +124,9 @@ static struct ast_channel *brcm_new(stru
 		const struct ast_assigned_ids *assignedids, const struct ast_channel *requestor,
 		struct ast_format_cap *format);
 static int handle_dialtone_timeout(const void *data);
+static void brcm_play_announcement(struct brcm_pvt *p, const char *announce_type);
+static void handle_bt_digitmap(struct brcm_subchannel *sub);
+static int handle_bt_interdigit_timeout(const void *data);
 static int endpt_get_rtp_stats(int line);
 
 /* Global brcm channel parameters */
@@ -1960,6 +1963,64 @@ void handle_dtmf_calling(struct brcm_sub
 	}
 }
 
+/*! \brief Custom BT interdigit timer timeout handler */
+static int handle_bt_interdigit_timeout(const void *data)
+{
+	ast_debug(9, "Interdigit timeout\n");
+	struct brcm_pvt *p = (struct brcm_pvt *) data;
+	pvt_lock(p, "interdigit callback");
+	p->interdigit_timer_id = -1;
+	struct brcm_subchannel *sub = brcm_get_active_subchannel(p);
+
+	if (strlen(p->dtmfbuf) >= channel_config[p->line_id].minimumnumberdigits) {
+		ast_log(LOG_NOTICE,"Interdigit timeout! Calling %s\n", p->dtmfbuf);
+		brcm_start_calling(p, sub, p->context);
+	}
+	else {
+		brcm_play_announcement(p, "number_unrecognised");
+	}
+
+	pvt_unlock(p);
+	return 0;
+}
+
+/*! \brief Custom BT digitmap handler */
+void handle_bt_digitmap(struct brcm_subchannel *sub)
+{
+	struct brcm_pvt *p = sub->parent;
+	int dtmfbuf_len = strlen(p->dtmfbuf);
+	int long_interdigit_timer = channel_config[p->line_id].timeoutmsec;
+	int short_interdigit_timer = channel_config[p->line_id].interdigitopenmsec;
+
+	if(dtmfbuf_len < channel_config[p->line_id].minimumnumberdigits) {
+		/* Haven't reached minimum number of digits */
+		ast_log(LOG_NOTICE, "Scheduling interdigit timeout of %d msec\n", long_interdigit_timer);
+		p->interdigit_timer_id = ast_sched_add(sched, long_interdigit_timer, handle_bt_interdigit_timeout, p);
+	}
+	else if (dtmfbuf_len > channel_config[p->line_id].maxnumberdigits) {
+		/* Reached max number of digits */
+		brcm_play_announcement(p, "number_unrecognised");
+	}
+	else if (ast_exists_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+		if (ast_matchmore_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+			ast_log(LOG_NOTICE, "Exact match found but a longer alternative is also available. So scheduling interdigit timeout of %d msec\n", short_interdigit_timer);
+			p->interdigit_timer_id = ast_sched_add(sched, short_interdigit_timer, handle_bt_interdigit_timeout, p);
+		}
+		else {
+			ast_log(LOG_NOTICE, "Exact match found and no other alternative is available. So calling %s\n", p->dtmfbuf);
+			brcm_start_calling(p, sub, p->context);
+		}
+	}
+	else if (ast_canmatch_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+		ast_log(LOG_NOTICE, "A partial match found! So scheduling interdigit timeout of %d msec\n", long_interdigit_timer);
+		p->interdigit_timer_id = ast_sched_add(sched, long_interdigit_timer, handle_bt_interdigit_timeout, p);
+	}
+	else {
+		/* We have no match */
+		brcm_play_announcement(p, "number_unrecognised");
+	}
+}
+
 /*
  * Perform actions for hook flash.
  * Preconditions: One subchannel should be in CALLWAITING or ONHOLD,
@@ -2506,7 +2567,7 @@ static void brcm_play_announcement(struc
 		sub->connection_id = ast_atomic_fetchadd_int((int *)&current_connection_id, +1);
 		brcm_create_connection(sub);
 	}
-
+	ast_log(LOG_DEBUG, "Playing %s announcement\n", announce_type);
 	brcm_new(sub, AST_STATE_RING, "0", announce_type, NULL, NULL, NULL);
 }
 
@@ -2814,7 +2875,7 @@ static void *brcm_process_event(struct e
 
 				if (sub->channel_state == DIALING) {
 					ast_debug(2, "Handle DTMF calling\n");
-					handle_dtmf_calling(sub);
+					handle_bt_digitmap(sub);
 				}
 				break;
 			}
@@ -3508,7 +3569,7 @@ static line_settings line_settings_creat
 		.context = "default",
 		.autodial_ext = "",
 		.ringsignal = 1,
-		.timeoutmsec = 4000,
+		.timeoutmsec = 20000,
 		.autodial_timeoutmsec = 60000,
 		.period = 20,
 		.hangup_xfer = 0,
@@ -3520,6 +3581,9 @@ static line_settings line_settings_creat
 		.calleridenable = 0, //clip
                 .calleridnameenable = 0,  //cnip
                 .anonymouscallenable = 0, //clir
+		.minimumnumberdigits = 3,
+		.maxnumberdigits = 30,
+		.interdigitopenmsec = 4000,
 
 	};
 	return line_conf;
@@ -3548,12 +3612,14 @@ static void channel_settings_load(channel_sett
 			channel_config->ringsignal = ast_true(v->value)?1:0;
 		} else if (!strcasecmp(v->name, "dialoutmsec")) {
 			channel_config->timeoutmsec = atoi(v->value);
-                } else if (!strcasecmp(v->name, "interdigitopenmsec")) {
-                        channel_config->interdigitopenmsec = atoi(v->value);
-                } else if (!strcasecmp(v->name, "minimumnumberdigits")) {
-                        channel_config->minimumnumberdigits = atoi(v->value);
-                } else if (!strcasecmp(v->name, "terminationdigit")) {
-                        channel_config->terminationdigit =v->value[0];
+		} else if (!strcasecmp(v->name, "interdigitopenmsec")) {
+			channel_config->interdigitopenmsec = atoi(v->value);
+		} else if (!strcasecmp(v->name, "minimumnumberdigits")) {
+			channel_config->minimumnumberdigits = atoi(v->value);
+		} else if (!strcasecmp(v->name, "maxnumberdigits")) {
+			channel_config->maxnumberdigits = atoi(v->value);
+		} else if (!strcasecmp(v->name, "terminationdigit")) {
+			channel_config->terminationdigit =v->value[0];
 		} else if (!strcasecmp(v->name, "autodial_timeoutmsec")) {
 			channel_config->autodial_timeoutmsec = atoi(v->value);
 		} else if (!strcasecmp(v->name, "dialtone_timeoutmsec")) {
Index: asterisk-18.4.0/channels/chan_brcm.h
===================================================================
--- asterisk-18.4.0.orig/channels/chan_brcm.h
+++ asterisk-18.4.0/channels/chan_brcm.h
@@ -209,9 +209,10 @@ typedef struct {
 	int autodial_timeoutmsec;
 	int ringsignal;
 	int timeoutmsec;
-        int interdigitopenmsec;
-        int minimumnumberdigits;
-        char terminationdigit;
+	int interdigitopenmsec;
+	int minimumnumberdigits;
+	int maxnumberdigits;
+	char terminationdigit;
 	int period;
 	int hangup_xfer;
 	int dialtone_timeoutmsec;
