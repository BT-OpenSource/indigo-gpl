--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -81,7 +81,7 @@ static void brcm_generate_rtp_packet(struct brcm_subchannel *p, uint8_t *packet_
 static void brcm_process_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
 static int brcm_mute_connection(struct brcm_subchannel *p);
 static int brcm_unmute_connection(struct brcm_subchannel *p);
-static int brcm_close_connection(struct brcm_subchannel *p);
+static int brcm_close_connection(struct brcm_subchannel *sub, struct ast_channel *ast);
 static int brcm_create_conference(struct brcm_pvt *p);
 static int brcm_stop_conference(struct brcm_subchannel *p);
 static int brcm_finish_transfer(struct ast_channel *owner, struct brcm_subchannel *p, int result);
@@ -382,6 +382,8 @@ struct config_update_struct {
 	uint8_t mask; // 8 bit mask
 	enum VOICE_CODEC codec;
 	int ptime;
+	const char *cid;
+	int is_incoming;
 	// add more if needed
 };
 
@@ -685,7 +687,14 @@ static void endpt_connection_data(int line, int id, const char *action, const st
 		blobmsg_add_u32(&bb, "line", line);
 		blobmsg_add_u32(&bb, "id", id);
 		blobmsg_add_string(&bb, "action", action);
-		if (data){
+
+		if (data && data->cid) {
+			ast_log(LOG_NOTICE, "call log: cid: %s, is_incoming: %d, line id: %d", data->cid,
+				       data->is_incoming, line);
+			blobmsg_add_string(&bb, "cid", data->cid);
+			blobmsg_add_u32(&bb, "is_incoming", data->is_incoming);
+		}
+		else if (data) {
 			ast_log(LOG_NOTICE, "connection parm_update, codec: %d, ptime: %d",data->codec, data->ptime);
 			if (data->mask & UBUS_DATA_CODEC_BIT){
 				blobmsg_add_u32(&bb, "codec", data->codec);
@@ -1512,7 +1521,7 @@ static int brcm_hangup(struct ast_channel *ast)
 	ast_module_unref(ast_module_info->self);
 	ast_verb(3, "Hungup '%s'\n", ast_channel_name(ast));
 	ast_channel_tech_pvt_set(ast, NULL);
-	brcm_close_connection(sub);
+	brcm_close_connection(sub, ast);
 
 	/* Check for channel state before dial tone timeout */
 	if(sub->channel_state == CALLENDED && sub_peer->channel_state != INCALL) {
@@ -1550,7 +1559,7 @@ static int brcm_answer(struct ast_channel *ast)
 			ast_queue_control(peer->owner, AST_CONTROL_HANGUP);
 			peer->owner = NULL;
 			peer->channel_state = CALLENDED;
-			brcm_close_connection(peer);
+			brcm_close_connection(peer, ast);
 		}
 	}
 
@@ -2787,7 +2796,8 @@ static void handle_dect_event(struct brcm_subchannel *sub, struct brcm_subchanne
 	else if (event == EVENT_RELEASE) {
 		ast_log(LOG_NOTICE, "EVENT_RELEASE detected for phone line %d\n", sub->parent->line_id);
 		if (sub->channel_state == AWAITONHOOK && sub_peer->channel_state == ONHOOK) {
-				brcm_close_connection(sub);
+				//ast context needed only in FXS case, so NULL is passed for DECT
+				brcm_close_connection(sub, NULL);
 		} else if (sub->channel_state == INCALL && sub_peer->channel_state != CALLWAITING) {
 				ast_log(LOG_ERROR, "Hanging up call\n");
 				ast_queue_control(owner, AST_CONTROL_HANGUP);
@@ -5368,15 +5378,28 @@ static int brcm_stop_conference(struct brcm_subchannel *p)
 	return 0;
 }
 
-static int brcm_close_connection(struct brcm_subchannel *sub)
+static int brcm_close_connection(struct brcm_subchannel *sub, struct ast_channel *ast)
 {
 	struct brcm_pvt *p = sub->parent;
 
 	if (sub->connection_init) {
 		if (!brcm_in_onhold(p) && !brcm_in_call(p) && !brcm_in_dialing(p) && !brcm_in_ringback(p) &&
 			!brcm_in_callwaiting(p) && !brcm_in_transferring(p)) { // Does the line have another call?
-			ast_debug(1, "Closing real endpoint connection line_id: %d, connection_id=%d, call_id: %d\n", p->line_id, sub->connection_id, sub->call_id);
-			endpt_connection(p->line_id, sub->call_id, "destroy");
+			struct config_update_struct data = {
+				.cid = ast ? ast_channel_connected(ast)->id.number.str : NULL,
+				.is_incoming = sub->call_direction == INCOMING_CALL,
+			};
+
+			/* When the number did not match the dial plan and the call was not actually originated */
+			if (!data.cid && ast && sub->call_direction == OUTGOING_CALL) {
+				data.cid = ast_channel_exten(ast);
+			}
+			ast_debug(1, "Closing real endpoint connection line_id: %d, connection_id=%d, call_id: %d, cid: %s, direction %d\n",
+				p->line_id, sub->connection_id, sub->call_id, data.cid,
+				sub->call_direction == OUTGOING_CALL ? "outgoing" : "incoming");
+
+			endpt_connection_data(p->line_id, sub->call_id, "destroy",
+				(data.cid && sub->call_id) ? &data : NULL);
 		} else {
 			ast_debug(1, "Releasing connection for pvt line_id=%i connection_id=%d, call_id: %d\n",
 				sub->parent->line_id, sub->connection_id, sub->call_id);
