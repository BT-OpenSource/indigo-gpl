--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -133,6 +133,7 @@ static int endpt_get_rtp_stats(int line)
 static int is_sip_account_registered(const char *sip_account);
 static int is_call_waiting_enabled(const char *sip_account);
 static int has_call_in_sip_client(const char *sip_account);
+static struct ast_format *map_rtpname_to_format(char* name);
 
 /* Global brcm channel parameters */
 static const char tdesc[] = "Broadcom SLIC Driver";
@@ -162,6 +163,7 @@ static int onholdhanguptimeout = DEFAULT
 #define DEFAULT_MAX_SESSION_PER_EXTENSION 2
 static int max_sessions_per_extension = DEFAULT_MAX_SESSION_PER_EXTENSION;
 
+static int default_ptime = DEFAULT_PTIME;
 /* Boolean, controls whether the transferor puts the transfer target on-hold before sending
  * REFER to the transferee */
 static int hold_target_before_refer = 1;
@@ -363,6 +365,44 @@ static const struct blobmsg_policy voice
 };
 
 
+enum VOICE_CODEC {
+	VOICE_CODEC_G711U,
+	VOICE_CODEC_G711A,
+	VOICE_CODEC_G722,
+	VOICE_CODEC_G723,
+	VOICE_CODEC_G726,
+	VOICE_CODEC_G729,
+};
+
+/* ubus action to endptmngr for config update */
+#define UBUS_DATA_CODEC_BIT  1
+#define UBUS_DATA_PTIME_BIT  (1<<1)
+struct config_update_struct {
+	uint8_t mask; // 8 bit mask
+	enum VOICE_CODEC codec;
+	int ptime;
+	// add more if needed
+};
+
+// codec data string to codec enum
+static enum VOICE_CODEC codec_string_to_enum(const char *data){
+	if (strcmp(data, "ulaw") == 0) {
+		return VOICE_CODEC_G711U;
+	} else if (strcmp(data, "alaw") == 0) {
+		return VOICE_CODEC_G711A;
+	} else if (strcmp(data, "g722") == 0) {
+		return VOICE_CODEC_G722;
+	} else if (strcmp(data, "g723") == 0) {
+		return VOICE_CODEC_G723;
+	} else if (strcmp(data, "g726") == 0) {
+		return VOICE_CODEC_G726;
+	} else if (strcmp(data, "g729") == 0) {
+		return VOICE_CODEC_G729;
+	} else {
+		return VOICE_CODEC_G711A;
+	}
+}
+
 typedef struct __attribute__((__packed__)) {
 	int32_t line;
 	int32_t cnx_id;
@@ -630,7 +670,7 @@ static int brcm_send_ubus_event(char *ev
 	return res;
 }
 
-static void endpt_connection(int line, int id, char *action) {
+static void endpt_connection_data(int line, int id, const char *action, const struct config_update_struct *data){
 	struct blob_buf bb;
 	struct ubus_request *req;
 	int res;
@@ -642,6 +682,15 @@ static void endpt_connection(int line, i
 		blobmsg_add_u32(&bb, "line", line);
 		blobmsg_add_u32(&bb, "id", id);
 		blobmsg_add_string(&bb, "action", action);
+		if (data){
+			ast_log(LOG_NOTICE, "connection parm_update, codec: %d, ptime: %d",data->codec, data->ptime);
+			if (data->mask & UBUS_DATA_CODEC_BIT){
+				blobmsg_add_u32(&bb, "codec", data->codec);
+			}
+			if (data->mask & UBUS_DATA_PTIME_BIT){
+				blobmsg_add_u32(&bb, "ptime", data->ptime);
+			}
+		}
 
 		req = calloc(1, sizeof(struct ubus_request));
 		if (!req) return;
@@ -661,6 +710,52 @@ static void endpt_connection(int line, i
 	}
 }
 
+static void endpt_connection(int line, int id, char *action) {
+	endpt_connection_data(line, id, action, NULL);
+}
+
+static void chan_brcm_modify_codec(struct brcm_subchannel *sub) {
+	if (sub->owner && sub->updated_codec != 1 ) {
+		ast_debug(4, "sub->owner Channel %s, ast_channel_codec_get(): %s\n",ast_channel_name(sub->owner), ast_channel_codec_get(sub->owner));
+		ast_channel_unlock(sub->owner);
+		struct ast_channel *bridged_chan = ast_channel_bridge_peer(sub->owner);
+		ast_channel_lock(sub->owner);
+
+		if (bridged_chan) {
+			ast_channel_ptime_set(sub->owner,ast_channel_ptime_get(bridged_chan));
+			ast_channel_codec_set(sub->owner,ast_channel_codec_get(bridged_chan));
+			ast_log(LOG_NOTICE, "Sync local codec to :%s, and ptime tp %d \n", ast_channel_codec_get(sub->owner), ast_channel_ptime_get(sub->owner));
+			ao2_ref(bridged_chan, -1);
+		} else {
+			ast_channel_unlock(sub->owner);
+			return;
+		}
+
+		struct config_update_struct data = {
+			.mask = 0,
+		};
+		/* update codec */
+		if (ast_channel_codec_get(sub->owner)) {
+			data.codec = codec_string_to_enum(ast_channel_codec_get(sub->owner));
+			data.mask = data.mask|UBUS_DATA_CODEC_BIT;
+		}
+		/* update ptime */
+		if (ast_channel_ptime_get(sub->owner) && ast_channel_ptime_get(sub->owner) != sub->period){
+				sub->period = ast_channel_ptime_get(sub->owner);
+		}
+		data.ptime = sub->period;
+		data.mask = data.mask|UBUS_DATA_PTIME_BIT;
+		/* push parm_update to endptmngr */
+		endpt_connection_data(sub->parent->line_id, sub->call_id, "parm_update", &data);
+		ast_log(LOG_NOTICE, "connection parm_update, codec: %d, ptime: %d",data.codec, data.ptime);
+
+		sub->updated_codec = 1;
+
+		ast_channel_unlock(sub->owner);
+
+	}
+}
+
 static int brcm_indicate(struct ast_channel *ast, int condition, const void *data, size_t datalen)
 {
 	struct brcm_subchannel *sub = ast_channel_tech_pvt(ast);
@@ -669,8 +764,9 @@ static int brcm_indicate(struct ast_chan
 	struct ast_frame astFrame;
 	int res = 0;
 
-	ast_log(LOG_NOTICE, "Channel %s gets an indication, condition = %d, sub->channel_state: %s\n", ast_channel_name(ast),
-		condition, state2str(sub->channel_state));
+	ast_log(LOG_NOTICE, "Channel %s gets an indication, condition = %d, sub->channel_state: %s, sub->codec: %d,ast_channel_codec_get(ast): %s\n",
+		ast ? ast_channel_name(ast) : "",
+		condition, sub ? state2str(sub->channel_state) : "", sub ? sub->codec : -1, ast ? ast_channel_codec_get(ast) : "");
 
 	switch(condition) {
 	case AST_CONTROL_UNHOLD:
@@ -700,6 +796,7 @@ static int brcm_indicate(struct ast_chan
 		sub->codec = -1;
 		if (sub->channel_state == RINGBACK)
 			endpt_signal(sub->parent->line_id, "ringback", "off", NULL);
+		chan_brcm_modify_codec(sub);
 		pvt_unlock(sub->parent);
 		break;
 	case AST_CONTROL_RINGING:
@@ -1443,11 +1540,9 @@ static char* brcm_get_codec_string(int i
 	}
 }
 
-static int brcm_classify_rtp_packet(int id) {
+static int brcm_classify_rtp_packet(int payload_type) {
 
-	//ast_debug(5, "RTP Packet ID = %d\n", id);
-
-	switch (id) {
+	switch (payload_type) {
 		case PCMU: 	return BRCM_AUDIO;
 		case G726: 	return BRCM_AUDIO;
 		case G723: 	return BRCM_AUDIO;
@@ -1458,7 +1553,7 @@ static int brcm_classify_rtp_packet(int
 		case RTCP_SR: 	return BRCM_RTCP_SR;
 		case RTCP_RR: 	return BRCM_RTCP_RR;
 		default:
-			ast_verbose("Unknown rtp packet id %d\n", id);
+			ast_verbose("Unknown rtp packet payload_type %d\n", payload_type);
 			return BRCM_UNKNOWN;
 	}
 }
@@ -1478,7 +1573,7 @@ static int map_ast_codec_id_to_rtp(const
 	} else if (ast_format_cmp(astcodec, ast_format_g726) == AST_FORMAT_CMP_EQUAL) {
 		return G726;
 	} else {
-		ast_verbose("Unknown asterisk format/codec id\n");
+		ast_verbose("Unknown asterisk format/codec\n");
 		return PCMA;
 	}
 }
@@ -1540,7 +1635,7 @@ static int brcm_write(struct ast_channel
 		/* generate the rtp header */
 		brcm_generate_rtp_packet(sub, ap->rtp, CN, 0, 0, frame->seqno);
 
-		/* set rtp id sent to endpoint */
+		/* set rtp payload_type sent to endpoint */
 		sub->codec = CN;
 
 		//ast_mutex_unlock(&sub->parent->lock);
@@ -1570,8 +1665,9 @@ static int brcm_write(struct ast_channel
 		/* generate the rtp header */
 		brcm_generate_rtp_packet(sub, ap->rtp, map_ast_codec_id_to_rtp(frame->subclass.format), 0, 0, frame->seqno);
 
-		/* set rtp id sent to endpoint */
+		/* set rtp payload_type sent to endpoint */
 		sub->codec = map_ast_codec_id_to_rtp(frame->subclass.format);
+		chan_brcm_modify_codec(sub); //in case of no bridge peer when doing the modify_codec during incoming call
 
 		//ast_mutex_unlock(&sub->parent->lock);
 		pvt_unlock(sub->parent);
@@ -1720,8 +1816,11 @@ static struct ast_channel *brcm_new(stru
 			assignedids, requestor, 0, "TELCHAN/%d/%d", subchan->parent->line_id, subchan->connection_id);
 	if (chan) {
 		ast_channel_tech_set(chan, cur_tech);
-
-		ast_format_cap_append_from_cap(caps, default_cap, AST_MEDIA_TYPE_UNKNOWN);	
+		if (format) {
+			ast_format_cap_append_from_cap(caps, format, AST_MEDIA_TYPE_UNKNOWN);
+		} else {
+			ast_format_cap_append_from_cap(caps, default_cap, AST_MEDIA_TYPE_UNKNOWN);
+		}
 		ast_channel_nativeformats_set(chan, caps);
 		ao2_ref(caps, -1);
 		fmt = ast_format_cap_get_format(ast_channel_nativeformats(chan), 0);
@@ -2032,6 +2131,9 @@ static void brcm_start_calling(struct br
 	/* Reset hook flash state */
 	p->hf_detected = 0;
 
+	/* Set the call direction */
+	sub->call_direction = OUTGOING_CALL;
+
 	/* Start the pbx */
 	if (!sub->connection_init) {
 		sub->connection_id = ast_atomic_fetchadd_int((int *)&current_connection_id, +1);
@@ -2041,6 +2143,9 @@ static void brcm_start_calling(struct br
 	/* Changed state from AST_STATE_UP to AST_STATE_RING ito get the brcm_answer callback
 	 * which is needed for call waiting. */
 	brcm_new(sub, AST_STATE_RING, sub->parent->ext, sub->parent->context, NULL, NULL, NULL);
+	if(sub->owner) {
+		sub->updated_codec = 0;
+	}
 }
 
 /*
@@ -2723,7 +2828,7 @@ static void handle_dtmf(enum LINE_EVENT
 }
 
 static void send_outgoing_dtmf(struct ast_channel *owner, char dtmf_button, int frametype) {
-	struct ast_frame fr;
+	struct ast_frame frame;
 
 	if (!owner) return;
 
@@ -2737,30 +2842,63 @@ static void send_outgoing_dtmf(struct as
 		return;
 	}
 
-	memset(&fr, 0, sizeof fr);
+	memset(&frame, 0, sizeof frame);
 	ast_debug(2, "Sending DTMF %c %s\n", dtmf_button, ast_channel_name(owner));
-	fr.src = brcm_tech.type;
-	fr.frametype = frametype;
-	fr.subclass.integer = dtmf_button;
-
-	ast_queue_frame(owner, &fr);
+	frame.src = brcm_tech.type;
+	frame.frametype = frametype;
+	frame.subclass.integer = dtmf_button;
+
+	ast_queue_frame(owner, &frame);
+}
+
+/* Get asterisk format from RTP payload type */
+static struct ast_format *map_rtptype_to_format(uint8_t payload_type) {
+	switch (payload_type) {
+		case PCMU: return ast_format_ulaw;
+		case PCMA: return ast_format_alaw;
+		case G722: return ast_format_g722;
+		case G723: return ast_format_g723;
+		case G726: return ast_format_g726;
+		case G729: return ast_format_g729;
+		default:
+			ast_debug(1, "Warning: unknown RTP payload_type %u is received. Treated it as PCMU\n", payload_type);
+			return ast_format_ulaw;
+	}
 }
 
+static struct ast_format *map_rtpname_to_format(char* name) {
+	if (strcmp(name, "ulaw") == 0) {
+		return ast_format_ulaw;
+	} else if (strcmp(name, "g726") == 0) {
+		return ast_format_g726;
+	} else if (strcmp(name, "g723") == 0) {
+		return ast_format_g723;
+	} else if (strcmp(name, "alaw") == 0) {
+		return ast_format_alaw;
+	} else if (strcmp(name, "g729") == 0) {
+		return ast_format_g729;
+	} else if (strcmp(name, "g722") == 0) {
+		return ast_format_g722;
+	} else {
+		ast_debug(1, "Warning: unknown RTP payload_type %s is received. Treated it as PCMU\n", name);
+		return ast_format_ulaw;
+	}
+}
 /* Handle audio packets from endptmngr. */
 static void audio_packet_handler(pe_packet_t *p) {
 	struct brcm_subchannel *sub;
 	int rtp_packet_type  = BRCM_UNKNOWN, drop_frame = 0;
-	struct ast_frame fr  = {0};
 	audio_packet_t *ap = (audio_packet_t *)p->data;
+	uint8_t payload_type = ap->rtp[1];
+	struct ast_frame frame = { .src = "TELCHAN", };
 	struct brcm_pvt *pvt;
 
-	fr.src = "TELCHAN";
-	rtp_packet_type = brcm_classify_rtp_packet(ap->rtp[1]);
+	rtp_packet_type = brcm_classify_rtp_packet(payload_type);
 	pvt = brcm_get_pvt_from_lineid(iflist, ap->line);
 	sub = brcm_get_active_subchannel(pvt);
 	if (!pvt || !sub) {
 		ast_log(LOG_ERROR, "Failed to find subchannel for %s/%d/%d\n",
-			fr.src, ap->line, ap->cnx_id);
+			frame.src, ap->line, ap->cnx_id);
 		endpt_connection(ap->line, ap->cnx_id, "destroy");						// Request line close
 		return;
 	}
@@ -2773,54 +2911,34 @@ static void audio_packet_handler(pe_pack
 		owner = sub->owner;
 	}
 
-	/* We seem to get packets from DSP even if connection is muted (perhaps muting only affects packet callback).
-	 * Drop packets if subchannel is on hold. */
-	/* Handle rtp packet according to classification */
-	if (sub->channel_state != ONHOLD && rtp_packet_type == BRCM_AUDIO &&
-			(ap->rtp[0] & 0x80) && ap->rtp_size) {
-		fr.frametype = AST_FRAME_VOICE;
-		fr.offset = 0;
-		fr.data.ptr = ap->rtp + 12;
-		fr.datalen = ap->rtp_size - 12;
-
-		switch (ap->rtp[1]) {
-		case PCMU:
-			fr.subclass.format = ast_format_ulaw;
-			fr.samples = 160;
-			break;
-		case PCMA:
-			fr.subclass.format = ast_format_alaw;
-			fr.samples = 160;
-			break;
-		case G726:
-			fr.subclass.format = ast_format_g726;
-			fr.samples = 160; //for 20 ms frame size
-			break;
-		case G723:
-			fr.subclass.format = ast_format_g723;
-			fr.samples = 240;
-			break;
-		case G729:
-			fr.subclass.format = ast_format_g729;
-			fr.samples = 80; //for 10 ms frame size
-			break;
-		case G722:
-			fr.subclass.format = ast_format_g722;
-			fr.samples = 160;
-			break;
-		case CN:
-			fr.frametype = AST_FRAME_CNG;
-			fr.subclass.integer = ap->rtp[12];
-			break;
-		default:
-			ast_log(LOG_WARNING, "Unknown rtp codec id [%d], %d\n", ap->rtp[1], p->data[1]);
-			return;
+	// We seem to get packets from DSP even if connection is muted (perhaps muting only affects packet callback).
+	// Drop packets if subchannel is on hold. Handle rtp packet according to classification.
+	if (sub->channel_state != ONHOLD && rtp_packet_type == BRCM_AUDIO && (ap->rtp[0] & 0x80) && ap->rtp_size) {
+		frame.frametype = AST_FRAME_VOICE;
+		frame.offset = 0;
+		frame.data.ptr = ap->rtp + 12;
+		frame.datalen = ap->rtp_size - 12;
+		if (payload_type == CN) {
+			frame.frametype = AST_FRAME_CNG;
+			frame.subclass.integer = ap->rtp[12];
+		} else if (sub->channel_state == OFFHOOK
+		 || sub->channel_state == DIALING
+		 || sub->channel_state == CALLING
+		 || sub->channel_state == RINGBACK
+		 || (owner && strcmp(brcm_get_codec_string(payload_type),ast_channel_codec_get(owner)))){
+			drop_frame=1;
+		} else {
+			struct ast_format *format = map_rtptype_to_format(payload_type);
+			if (format) {
+				frame.subclass.format = format;
+				frame.samples = ast_codec_samples_count(&frame);
+			}
 		}
 	} else if (rtp_packet_type == BRCM_RTCP_SR || rtp_packet_type == BRCM_RTCP_RR) {
-		fr.frametype = AST_FRAME_RTCP;
-		fr.data.ptr = ap->rtp;
-		fr.datalen = ap->rtp_size;
-		fr.subclass.integer = (rtp_packet_type == BRCM_RTCP_SR ? RTCP_SR : RTCP_RR);
+		frame.frametype = AST_FRAME_RTCP;
+		frame.data.ptr = ap->rtp;
+		frame.datalen = ap->rtp_size;
+		frame.subclass.integer = (rtp_packet_type == BRCM_RTCP_SR ? RTCP_SR : RTCP_RR);
 	} else {
 		//ast_debug(5, "Dropping RTP frame of type %d.\n", rtp_packet_type);
 		drop_frame=1;
@@ -2831,7 +2949,7 @@ static void audio_packet_handler(pe_pack
 
 	if (owner) {
 		if (!drop_frame && (ast_channel_state(owner) == AST_STATE_UP || ast_channel_state(owner) == AST_STATE_RING)) {
-			ast_queue_frame(owner, &fr);
+			ast_queue_frame(owner, &frame);
 		}
 		ast_channel_unref(owner);
 	}
@@ -3480,7 +3598,7 @@ static struct brcm_pvt *brcm_allocate_pv
 				sub->conf_timer_id = -1;
 				sub->r4_hangup_timer_id = -1;
 				sub->onhold_hangup_timer_id = -1;
-				sub->period = 20;												// 20 ms
+				sub->period = default_ptime;												// 20 ms
 				sub->conference_initiator = 0;
 				tmp->sub[i] = sub;
 				sub->jitter_count = 0;
@@ -3685,6 +3803,8 @@ static struct ast_channel *brcm_request(
 		sub->channel_state = ALLOCATED;
 		sub->connection_id = ast_atomic_fetchadd_int((int *)&current_connection_id, +1);
 		tmp = brcm_new(sub, AST_STATE_DOWN, sub->parent->ext, sub->parent->context, assignedids, requestor ? requestor : NULL, cap);
+		sub->call_direction = INCOMING_CALL;
+		sub->updated_codec = 0;
 	} else {
 		*cause = AST_CAUSE_BUSY;
 	}
@@ -4105,7 +4225,7 @@ static channel_settings channel_settings
 		.ringsignal = 1,
 		.timeoutmsec = 20000,
 		.autodial_timeoutmsec = 60000,
-		.period = 20,
+		.period = default_ptime,
 		.hangup_xfer = 0,
 		.dialtone_timeoutmsec = 20000,
 		.offhook_nu_timeoutmsec = 60000,
@@ -4255,6 +4375,28 @@ static int load_common_settings(struct a
 					tok = strtok(NULL, ",");
 				}
 			}
+		} else if (!strcasecmp(v->name, "codeclist")) {
+			char *tok;
+			if (ast_strlen_zero(v->value)) {
+				ast_debug(1, "No value given for codeclist on line %d\n", v->lineno);
+			} else {
+				char *tmp = ast_strdupa(v->value);
+				char *addr;
+				tok = strtok_r(tmp, ",", &addr);
+				while (tok) {
+					char *codec = ast_strdupa(tok);
+					codec = ast_strip(codec);
+					ast_format_cap_append(default_cap, map_rtpname_to_format(codec), default_ptime);
+					tok = strtok_r(NULL, ",", &addr);
+				}
+			}
+		} else if (!strcasecmp(v->name, "ptime")) {
+			default_ptime = atoi(v->value);
+			if (!default_ptime || default_ptime < 10) {
+				default_ptime = DEFAULT_ONHOLD_HANGUP_TIMEOUT;
+				ast_log(LOG_WARNING, "Incorrect default_ptime '%s', defaulting to '%d'\n",
+						v->value, default_ptime);
+			}
 		}
 
 		v = v->next;
@@ -4769,8 +4911,7 @@ static int load_module(void)
 	}
 
 	ast_format_cap_append_by_type(brcm_tech.capabilities, AST_MEDIA_TYPE_AUDIO);
-	ast_format_cap_append(default_cap, ast_format_alaw, 0);
-	
+
 	// Init UBUS and wait for endptmngr to start
 	if(ubus_init()) goto err;
 
@@ -5151,6 +5292,7 @@ static int brcm_close_connection(struct
 		}
 		sub->connection_init = 0;
 		sub->codec = -1;
+		sub->updated_codec = 0;
 		ast_debug(1, "Virtual Asterisk connection %d/%d destroyed\n", p->line_id, sub->connection_id);
 	}
 
--- a/channels/chan_brcm.h
+++ b/channels/chan_brcm.h
@@ -28,6 +28,7 @@
 #define RTCP_XR      207
 
 #define CN 13
+#define DEFAULT_PTIME 20 //ms
 
 #define NOT_INITIALIZED -1
 //#define EPSTATUS_DRIVER_ERROR -1
@@ -153,6 +154,7 @@ struct brcm_subchannel {
 	unsigned int jitter_count;
 	unsigned long int farEndInterrivalJitter;
 	char blind_xfer_target[32];	/* Transfer target for unattended call transfer */
+	int updated_codec;
 };
 
 
--- a/include/asterisk/channel.h
+++ b/include/asterisk/channel.h
@@ -4424,6 +4424,8 @@ const char *ast_channel_farEndIPAddress(
 void ast_channel_farEndIPAddress_set(struct ast_channel *chan, const char *value, size_t size);
 unsigned int ast_channel_sipResponseCode(const struct ast_channel *chan);
 void ast_channel_sipResponseCode_set(struct ast_channel *chan, unsigned int value);
+const char *ast_channel_codec_get(const struct ast_channel *chan);
+void ast_channel_codec_set(struct ast_channel *chan, const char *value);
 unsigned int ast_channel_local_disconnect_get(const struct ast_channel *chan);
 void ast_channel_local_disconnect_set(struct ast_channel *chan, unsigned int value);
 struct ast_channel_snapshot *ast_channel_snapshot(const struct ast_channel *chan);
@@ -4431,6 +4433,9 @@ void ast_channel_snapshot_set(struct ast
 struct ast_flags *ast_channel_snapshot_segment_flags(struct ast_channel *chan);
 rtp_statistics *ast_channel_rtpStats(const struct ast_channel *chan);
 void ast_channel_rtpStats_set(struct ast_channel *chan, rtp_statistics *rtp_stats);
+int ast_channel_ptime_get(const struct ast_channel *chan);
+void ast_channel_ptime_set(struct ast_channel *chan, int ptime);
+
 
 /*!
  * \pre chan is locked
--- a/main/channel_internal_api.c
+++ b/main/channel_internal_api.c
@@ -230,6 +230,7 @@ struct ast_channel {
 	unsigned int sipResponseCode; /*!< SIP response Code */
 	char codec[40];  /*!< Negotiated codec used */
 	rtp_statistics *rtp_stats; /*!< RTP statistics */
+	int ptime; /*!< Negotiated ptime */
 };
 
 /*! \brief The monotonically increasing integer counter for channel uniqueids */
@@ -872,6 +873,15 @@ void ast_channel_rtpStats_set(struct ast
 	chan->rtp_stats = rtp_stats;
 }
 
+int ast_channel_ptime_get(const struct ast_channel *chan)
+{
+	return chan->ptime;
+}
+void ast_channel_ptime_set(struct ast_channel *chan, int ptime)
+{
+	chan->ptime = ptime;
+}
+
 void ast_channel_callid_set(struct ast_channel *chan, ast_callid callid)
 {
 	char call_identifier_from[AST_CALLID_BUFFER_LENGTH];
--- a/res/res_pjsip_sdp_rtp.c
+++ b/res/res_pjsip_sdp_rtp.c
@@ -324,7 +324,7 @@ static int create_rtp(struct ast_sip_ses
 }
 
 static void get_codecs(struct ast_sip_session *session, const struct pjmedia_sdp_media *stream, struct ast_rtp_codecs *codecs,
-	struct ast_sip_session_media *session_media)
+	struct ast_sip_session_media *session_media, struct ast_format_cap *astformats)
 {
 	pjmedia_sdp_attr *attr;
 	pjmedia_sdp_rtpmap *rtpmap;
@@ -340,6 +340,8 @@ static void get_codecs(struct ast_sip_se
 
 	ast_rtp_codecs_payloads_initialize(codecs);
 
+	ast_format_cap_remove_by_type(astformats, AST_MEDIA_TYPE_UNKNOWN);
+
 	/* Iterate through provided formats */
 	for (i = 0; i < stream->desc.fmt_count; ++i) {
 		/* The payload is kept as a string for things like t38 but for video it is always numerical */
@@ -388,6 +390,15 @@ static void get_codecs(struct ast_sip_se
 			}
 		}
 	}
+
+	/* Parsing done, now fill the ast_format_cap struct in the correct order */
+	for (i = 0; i < stream->desc.fmt_count; ++i) {
+		if ((format = ast_rtp_codecs_get_payload_format(codecs, pj_strtoul(&stream->desc.fmt[i])))) {
+			ast_format_cap_append(astformats, format, 0);
+			ao2_ref(format, -1);
+		}
+	}
+
 	if (!tel_event && (session->dtmf == AST_SIP_DTMF_AUTO)) {
 		ast_rtp_instance_dtmf_mode_set(session_media->rtp, AST_RTP_DTMF_MODE_INBAND);
 		ast_rtp_instance_set_prop(session_media->rtp, AST_RTP_PROPERTY_DTMF, 0);
@@ -409,6 +420,9 @@ static void get_codecs(struct ast_sip_se
 		unsigned long framing = pj_strtoul(pj_strltrim(&attr->value));
 		if (framing && session->endpoint->media.rtp.use_ptime) {
 			ast_rtp_codecs_set_framing(codecs, framing);
+			if (session->channel){
+				ast_channel_ptime_set(session->channel, framing);
+			}
 		}
 	}
 
@@ -465,8 +479,7 @@ static struct ast_format_cap *set_incomi
 	}
 
 	/* Get the peer's capabilities*/
-	get_codecs(session, stream, &codecs, session_media);
-	ast_rtp_codecs_payload_formats(&codecs, remote, &fmts);
+	get_codecs(session, stream, &codecs, session_media, remote);
 
 	incoming_call_offer_cap = ast_sip_session_create_joint_call_cap(
 		session, session_media->type, remote);
@@ -504,7 +517,6 @@ static int set_caps(struct ast_sip_sessi
 	RAII_VAR(struct ast_format_cap *, joint, NULL, ao2_cleanup);
 	enum ast_media_type media_type = session_media->type;
 	struct ast_rtp_codecs codecs = AST_RTP_CODECS_NULL_INIT;
-	int fmts = 0;
 	int direct_media_enabled = !ast_sockaddr_isnull(&session_media->direct_media_addr) &&
 		ast_format_cap_count(session->direct_media_cap);
 	int dsp_features = 0;
@@ -527,8 +539,7 @@ static int set_caps(struct ast_sip_sessi
 	}
 
 	/* get the capabilities on the peer */
-	get_codecs(session, stream, &codecs,  session_media);
-	ast_rtp_codecs_payload_formats(&codecs, peer, &fmts);
+	get_codecs(session, stream, &codecs, session_media, peer);
 
 	/* get the joint capabilities between peer and endpoint */
 	ast_format_cap_get_compatible(caps, peer, joint);
@@ -2160,10 +2171,33 @@ static int apply_negotiated_sdp_stream(s
 		enable_rtcp(session, session_media, remote_stream);
 	}
 
-	if (set_caps(session, session_media, session_media_transport, remote_stream, 0, asterisk_stream)) {
-		SCOPE_EXIT_RTN_VALUE(-1, "set_caps failed\n");
+	if (session->call_direction == AST_SIP_SESSION_OUTGOING_CALL){
+		// Outgoing, set cap with set_caps for negotiated codec
+		if (set_caps(session, session_media, session_media_transport, remote_stream, 0, asterisk_stream)) {
+			SCOPE_EXIT_RTN_VALUE(-1, "set_caps failed\n");
+		}
+	} else {
+		// Incoming, just set cap with asterisk_stream, as the local_chan has been created with only the first codec in the cap list.
+		struct ast_format_cap *caps;
+		caps = ast_format_cap_alloc(AST_FORMAT_CAP_FLAG_DEFAULT);
+		ast_format_cap_append(caps, ast_format_cap_get_format(ast_stream_get_formats(asterisk_stream), 0), ast_channel_ptime_get(session->channel));
+		ast_channel_nativeformats_set(session->channel, caps);
+	}
+	/* Get and set the ptime, get from remote_stream if it has, otherwise get from local_stream */
+	pjmedia_sdp_attr *attr;
+	unsigned long framing;
+	struct pjmedia_sdp_media *local_stream = local->media[index];
+	if ((attr = pjmedia_sdp_media_find_attr2(remote_stream, "ptime", NULL))) {
+		framing = pj_strtoul(pj_strltrim(&attr->value));
+		ast_channel_ptime_set(session->channel, framing);
+	} else if ((attr = pjmedia_sdp_media_find_attr2(local_stream, "ptime", NULL))) {
+		framing = pj_strtoul(pj_strltrim(&attr->value));
+		ast_channel_ptime_set(session->channel, framing);
 	}
 
+	ast_channel_codec_set(session->channel, ast_format_get_name(ast_format_cap_get_format(ast_stream_get_formats(asterisk_stream), 0)));
+	ast_log(LOG_NOTICE, "channel %s, codec: %s, ptime: %d \n", ast_channel_name(session->channel), ast_channel_codec_get(session->channel), ast_channel_ptime_get(session->channel));
+
 	/* Set the channel uniqueid on the RTP instance now that it is becoming active */
 	ast_channel_lock(session->channel);
 	ast_rtp_instance_set_channel_id(session_media->rtp, ast_channel_uniqueid(session->channel));
