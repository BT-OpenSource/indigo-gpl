--- a/res/res_pjsip_sdp_rtp.c
+++ b/res/res_pjsip_sdp_rtp.c
@@ -175,6 +175,16 @@ static void enable_rtcp(struct ast_sip_s
 	}
 
 	ast_rtp_instance_set_prop(session_media->rtp, AST_RTP_PROPERTY_RTCP, rtcp_type);
+
+	if (session_media->type == AST_MEDIA_TYPE_AUDIO &&
+			(session->endpoint->media.tos_audio || session->endpoint->media.cos_audio)) {
+		ast_rtp_instance_set_qos_ex(session_media->rtp, session->endpoint->media.tos_audio,
+				session->endpoint->media.cos_audio, "SIP RTCP Audio", 1);
+	} else if (session_media->type == AST_MEDIA_TYPE_VIDEO &&
+			(session->endpoint->media.tos_video || session->endpoint->media.cos_video)) {
+		ast_rtp_instance_set_qos_ex(session_media->rtp, session->endpoint->media.tos_video,
+				session->endpoint->media.cos_video, "SIP RTCP Video", 1);
+	}
 }
 
 /*!
--- a/res/res_rtp_asterisk.c
+++ b/res/res_rtp_asterisk.c
@@ -613,7 +613,7 @@ static int ast_rtp_get_stat(struct ast_r
 static int ast_rtp_dtmf_compatible(struct ast_channel *chan0, struct ast_rtp_instance *instance0, struct ast_channel *chan1, struct ast_rtp_instance *instance1);
 static void ast_rtp_stun_request(struct ast_rtp_instance *instance, struct ast_sockaddr *suggestion, const char *username);
 static void ast_rtp_stop(struct ast_rtp_instance *instance);
-static int ast_rtp_qos_set(struct ast_rtp_instance *instance, int tos, int cos, const char* desc);
+static int ast_rtp_qos_set(struct ast_rtp_instance *instance, int tos, int cos, const char* desc, int rtcp);
 static int ast_rtp_sendcng(struct ast_rtp_instance *instance, int level);
 static unsigned int ast_rtp_get_ssrc(struct ast_rtp_instance *instance);
 static const char *ast_rtp_get_cname(struct ast_rtp_instance *instance);
@@ -8845,10 +8845,17 @@ static void ast_rtp_stop(struct ast_rtp_
 }
 
 /*! \pre instance is locked */
-static int ast_rtp_qos_set(struct ast_rtp_instance *instance, int tos, int cos, const char *desc)
+static int ast_rtp_qos_set(struct ast_rtp_instance *instance, int tos, int cos, const char *desc, int rtcp)
 {
 	struct ast_rtp *rtp = ast_rtp_instance_get_data(instance);
 
+	if (rtcp) {
+		if (rtp->rtcp && rtp->rtcp->s >= 0) {
+			return ast_set_qos(rtp->rtcp->s, tos, cos, desc);
+		}
+		return -1;
+	}
+
 	return ast_set_qos(rtp->s, tos, cos, desc);
 }
 
--- a/include/asterisk/rtp_engine.h
+++ b/include/asterisk/rtp_engine.h
@@ -653,7 +653,7 @@ struct ast_rtp_engine {
 	/*! Callback for retrieving statistics */
 	int (*get_stat)(struct ast_rtp_instance *instance, struct ast_rtp_instance_stats *stats, enum ast_rtp_instance_stat stat);
 	/*! Callback for setting QoS values */
-	int (*qos)(struct ast_rtp_instance *instance, int tos, int cos, const char *desc);
+	int (*qos)(struct ast_rtp_instance *instance, int tos, int cos, const char *desc, int rtcp);
 	/*! Callback for retrieving a file descriptor to poll on, not always required */
 	int (*fd)(struct ast_rtp_instance *instance, int rtcp);
 	/*! Callback for initializing RED support */
@@ -1975,6 +1975,7 @@ void ast_rtp_instance_change_source(stru
  * \since 1.8
  */
 int ast_rtp_instance_set_qos(struct ast_rtp_instance *instance, int tos, int cos, const char *desc);
+int ast_rtp_instance_set_qos_ex(struct ast_rtp_instance *instance, int tos, int cos, const char *desc, int rtcp);
 
 /*!
  * \brief Stop an RTP instance
--- a/main/rtp_engine.c
+++ b/main/rtp_engine.c
@@ -2168,11 +2168,16 @@ void ast_rtp_instance_change_source(stru
 
 int ast_rtp_instance_set_qos(struct ast_rtp_instance *instance, int tos, int cos, const char *desc)
 {
+	return ast_rtp_instance_set_qos_ex(instance, tos, cos, desc, 0);
+}
+
+int ast_rtp_instance_set_qos_ex(struct ast_rtp_instance *instance, int tos, int cos, const char *desc, int rtcp)
+{
 	int res;
 
 	if (instance->engine->qos) {
 		ao2_lock(instance);
-		res = instance->engine->qos(instance, tos, cos, desc);
+		res = instance->engine->qos(instance, tos, cos, desc, rtcp);
 		ao2_unlock(instance);
 	} else {
 		res = -1;
