Index: asterisk-18.5.1/cdr/cdr_csv.c
===================================================================
--- asterisk-18.5.1.orig/cdr/cdr_csv.c
+++ asterisk-18.5.1/cdr/cdr_csv.c
@@ -303,7 +303,9 @@ static int build_csv_record(char *buf, s
 		append_int(buf, cdr->rtp_stats->localJbAbsMax, bufsize);
 		append_int(buf, cdr->rtp_stats->remoteJbAbsMax, bufsize);
 		append_int(buf, cdr->rtp_stats->jbAvg, bufsize);
-		append_int(buf, cdr->rtp_stats->uLossRate, bufsize);
+		append_int(buf, cdr->rtp_stats->localLossRate, bufsize);
+		append_int(buf, cdr->rtp_stats->remoteLossRate, bufsize);
+
 		append_int(buf, cdr->rtp_stats->discarded, bufsize);
 		append_int(buf, cdr->rtp_stats->lost, bufsize);
 		append_int(buf, cdr->rtp_stats->rxpkts, bufsize);
@@ -311,7 +313,11 @@ static int build_csv_record(char *buf, s
 		append_int(buf, cdr->rtp_stats->jitter, bufsize);
 		append_int(buf, cdr->rtp_stats->maxJitter, bufsize);
 		append_int(buf, cdr->rtp_stats->averageRoundTripDelay, bufsize);
+		append_int(buf, cdr->rtp_stats->farEndInterarrivalJitter, bufsize);
 		append_int(buf, cdr->rtp_stats->averageFarEndInterarrivalJitter, bufsize);
+		append_int(buf, cdr->rtp_stats->receiveInterarrivalJitter, bufsize);
+		append_int(buf, cdr->rtp_stats->averageReceiveInterarrivalJitter, bufsize);
+
 	}
 	/* AMA Flags */
 	append_string(buf, ast_channel_amaflags2string(cdr->amaflags), bufsize);
Index: asterisk-18.5.1/cdr/cdr_manager.c
===================================================================
--- asterisk-18.5.1.orig/cdr/cdr_manager.c
+++ asterisk-18.5.1/cdr/cdr_manager.c
@@ -347,7 +347,8 @@ static int manager_log(struct ast_cdr *c
 	    "localJbAbsMax: %ld\r\n"
 	    "remoteJbAbsMax: %ld\r\n"
 	    "jbAvg: %ld\r\n"
-	    "discarded: %ld\r\n"
+	    "localLossRate: %ld\r\n"
+	    "remoteLossRate: %ld\r\n"
 	    "discarded: %ld\r\n"
 	    "lost: %ld\r\n"
 	    "rxpkts: %ld\r\n"
@@ -355,7 +356,10 @@ static int manager_log(struct ast_cdr *c
 	    "jitter: %ld\r\n"
 	    "maxJitter: %ld\r\n"
 	    "averageRoundTripDelay: %ld\r\n"
+	    "farEndInterarrivalJitter: %ld\r\n"
 	    "averageFarEndInterarrivalJitter: %ld\r\n"
+	    "receiveInterarrivalJitter: %ld\r\n"
+	    "averageReceiveInterarrivalJitter: %ld\r\n"
 	    "UserField: %s\r\n"
 	    "%s",
 	    cdr->accountcode, cdr->src, cdr->dst, cdr->dcontext, cdr->clid, cdr->channel,
@@ -367,9 +371,9 @@ static int manager_log(struct ast_cdr *c
 		cdr->rtp_stats->remoteGapDensity, cdr->rtp_stats->localGapDuration, cdr->rtp_stats->remoteGapDuration, cdr->rtp_stats->localJbRate,
 		cdr->rtp_stats->remoteJbRate, cdr->rtp_stats->localJbMax, cdr->rtp_stats->remoteJbMax, cdr->rtp_stats->localJbNominal,
 		cdr->rtp_stats->remoteJbNominal, cdr->rtp_stats->localJbAbsMax, cdr->rtp_stats->remoteJbAbsMax, cdr->rtp_stats->jbAvg,
-		cdr->rtp_stats->uLossRate, cdr->rtp_stats->discarded, cdr->rtp_stats->lost, cdr->rtp_stats->rxpkts,
-		cdr->rtp_stats->txpkts, cdr->rtp_stats->jitter, cdr->rtp_stats->maxJitter, cdr->rtp_stats->averageRoundTripDelay, cdr->rtp_stats->averageFarEndInterarrivalJitter,
-		cdr->userfield, buf);
+		cdr->rtp_stats->localLossRate, cdr->rtp_stats->remoteLossRate, cdr->rtp_stats->discarded, cdr->rtp_stats->lost, cdr->rtp_stats->rxpkts,
+		cdr->rtp_stats->txpkts, cdr->rtp_stats->jitter, cdr->rtp_stats->maxJitter, cdr->rtp_stats->averageRoundTripDelay, cdr->rtp_stats->farEndInterarrivalJitter,
+		cdr->rtp_stats->averageFarEndInterarrivalJitter, cdr->rtp_stats->receiveInterarrivalJitter, cdr->rtp_stats->averageReceiveInterarrivalJitter, cdr->userfield, buf);
 
 	return 0;
 }
Index: asterisk-18.5.1/channels/chan_brcm.c
===================================================================
--- asterisk-18.5.1.orig/channels/chan_brcm.c
+++ asterisk-18.5.1/channels/chan_brcm.c
@@ -78,7 +78,8 @@ static int cwtimeout_cb(const void *data
 static int cwbeep_cb(const void *data);
 static int r4hanguptimeout_cb(const void *data);
 static void brcm_generate_rtp_packet(struct brcm_subchannel *p, uint8_t *packet_buf, int type, int seqno, unsigned int rtp_timestamp, unsigned int ssrc);
-static void brcm_process_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
+static void brcm_process_incoming_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
+static void brcm_process_outgoing_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size);
 static int brcm_mute_connection(struct brcm_subchannel *p);
 static int brcm_unmute_connection(struct brcm_subchannel *p);
 static int brcm_close_connection(struct brcm_subchannel *sub, struct ast_channel *ast);
@@ -1782,7 +1783,7 @@ static int brcm_write(struct ast_channel
 		/* copy frame data to audio packet */
 		memcpy(ap->rtp, frame->data.ptr, frame->datalen);
 
-		brcm_process_rtcp_packet(sub, ap->rtp, ap->rtp_size);
+		brcm_process_incoming_rtcp_packet(sub, ap->rtp, ap->rtp_size);
 
 		pe_bus_send(audio_tx_bus, (uint8_t *)ap, packet_size);
 		free(ap);
@@ -3066,6 +3067,7 @@ static void audio_packet_handler(pe_pack
 		frame.data.ptr = ap->rtp;
 		frame.datalen = ap->rtp_size;
 		frame.subclass.integer = (rtp_packet_type == BRCM_RTCP_SR ? RTCP_SR : RTCP_RR);
+		brcm_process_outgoing_rtcp_packet(sub, ap->rtp, ap->rtp_size);
 	} else {
 		//ast_debug(5, "Dropping RTP frame of type %d.\n", rtp_packet_type);
 		drop_frame=1;
@@ -3751,8 +3753,13 @@ static struct brcm_pvt *brcm_allocate_pv
 				sub->period = default_ptime;												// 20 ms
 				sub->conference_initiator = 0;
 				tmp->sub[i] = sub;
-				sub->jitter_count = 0;
-				sub->farEndInterrivalJitter = 0;
+				sub->remote_jitter_count = 0;
+				sub->local_jitter_count = 0;
+				sub->farEndInterarrivalJitter = 0;
+				sub->receiveInterarrivalJitter = 0;
+				sub->totalFarEndInterarrivalJitter = 0;
+				sub->totalReceiveInterarrivalJitter = 0;
+
 				sub->blind_xfer_target[0] = '\0';
 				ast_debug(2, "subchannel created\n");
 			} else {
@@ -4616,7 +4623,8 @@ enum {
 	RTP_STATS_TX_PKTS,
 	RTP_STATS_JB_AVG,
 	RTP_STATS_JITTER,
-	RTP_STATS_LOSS_RATE,
+	RTP_STATS_LOCAL_LOSS_RATE,
+	RTP_STATS_REMOTE_LOSS_RATE,
 	RTP_STATS_MAX_JITTER,
 	RTP_STATS_AVERAGE_ROUND_TRIP_DELAY,
 	__MAX_RTP_STATS,
@@ -4646,7 +4654,8 @@ static const struct blobmsg_policy endpt
 	[RTP_STATS_TX_PKTS] = { .name = "txpkts", .type = BLOBMSG_TYPE_INT32 },
 	[RTP_STATS_JB_AVG] = { .name = "jbAvg", .type = BLOBMSG_TYPE_INT16 },
 	[RTP_STATS_JITTER] = { .name = "jitter", .type = BLOBMSG_TYPE_INT32 },
-	[RTP_STATS_LOSS_RATE] = { .name = "uLossRate", .type = BLOBMSG_TYPE_INT16 },
+	[RTP_STATS_LOCAL_LOSS_RATE] = { .name = "localLossRate", .type = BLOBMSG_TYPE_INT16 },
+	[RTP_STATS_REMOTE_LOSS_RATE] = { .name = "remoteLossRate", .type = BLOBMSG_TYPE_INT16 },
 	[RTP_STATS_MAX_JITTER] = { .name = "maxJitter", .type = BLOBMSG_TYPE_INT32 },
 	[RTP_STATS_AVERAGE_ROUND_TRIP_DELAY] = { .name = "averageRoundTripDelay", .type = BLOBMSG_TYPE_INT32 },
 };
@@ -4783,14 +4792,19 @@ static void ubus_call_answer_rtp_stats(s
 		sub->rtp_stats.jbAvg = blobmsg_get_u16(tb[RTP_STATS_JB_AVG]);
 	if (tb[RTP_STATS_JITTER])
 		sub->rtp_stats.jitter = blobmsg_get_u32(tb[RTP_STATS_JITTER]);
-	if (tb[RTP_STATS_LOSS_RATE])
-		sub->rtp_stats.uLossRate = blobmsg_get_u16(tb[RTP_STATS_LOSS_RATE]);
+	if (tb[RTP_STATS_LOCAL_LOSS_RATE])
+		sub->rtp_stats.localLossRate = blobmsg_get_u16(tb[RTP_STATS_LOCAL_LOSS_RATE]);
+	if (tb[RTP_STATS_REMOTE_LOSS_RATE])
+		sub->rtp_stats.remoteLossRate = blobmsg_get_u16(tb[RTP_STATS_REMOTE_LOSS_RATE]);
 	if (tb[RTP_STATS_MAX_JITTER])
 		sub->rtp_stats.maxJitter = blobmsg_get_u32(tb[RTP_STATS_MAX_JITTER]);
 	if (tb[RTP_STATS_AVERAGE_ROUND_TRIP_DELAY])
 		sub->rtp_stats.averageRoundTripDelay = blobmsg_get_u32(tb[RTP_STATS_AVERAGE_ROUND_TRIP_DELAY]);
 
-	sub->rtp_stats.averageFarEndInterarrivalJitter = sub->jitter_count ? (sub->farEndInterrivalJitter / sub->jitter_count) : 0;
+	sub->rtp_stats.farEndInterarrivalJitter = sub->farEndInterarrivalJitter;
+	sub->rtp_stats.receiveInterarrivalJitter = sub->receiveInterarrivalJitter;
+	sub->rtp_stats.averageFarEndInterarrivalJitter = sub->remote_jitter_count ? (sub->totalFarEndInterarrivalJitter / sub->remote_jitter_count) : 0;
+	sub->rtp_stats.averageReceiveInterarrivalJitter = sub->local_jitter_count ? (sub->totalReceiveInterarrivalJitter / sub->local_jitter_count) : 0;
 
 	ast_log(LOG_DEBUG, "RTP stats received:\nlocalBurstDensity: %d, remoteBurstDensity: %d, "
 			"localBurstDuration: %d, remoteBurstDuration: %d, localGapDensity: %d, "
@@ -4798,15 +4812,16 @@ static void ubus_call_answer_rtp_stats(s
 			"localJbRate: %d, remoteJbRate: %d, localJbMax: %d, remoteJbMax: %d, "
 			"localJbNominal: %d remoteJbNominal: %d, localJbAbsMax: %d, "
 			"remoteJbAbsMax: %d, discarded: %d, lost: %d, rxpkts: %d, txpkts: %d, "
-			"jbAvg: %d, jitter: %d, uLossRate: %d, maxJitter: %d, averageRoundTripDelay: %d, "
-			"averageFarEndInterarrivalJitter: %d\n",
+			"jbAvg: %d, jitter: %d, localLossRate: %d, remoteLossRate: %d, maxJitter: %d, averageRoundTripDelay: %d, "
+			"farEndInterarrivalJitter: %d\n, averageFarEndInterarrivalJitter: %d, receiveInterarrivalJitter: %d, averageReceiveInterarrivalJitter: %d\n",
 			sub->rtp_stats.localBurstDensity, sub->rtp_stats.remoteBurstDensity, sub->rtp_stats.localBurstDuration,
 			sub->rtp_stats.remoteBurstDuration, sub->rtp_stats.localGapDensity, sub->rtp_stats.remoteGapDensity,
 			sub->rtp_stats.localGapDuration, sub->rtp_stats.remoteGapDuration, sub->rtp_stats.localJbRate,
 			sub->rtp_stats.remoteJbRate, sub->rtp_stats.localJbMax, sub->rtp_stats.remoteJbMax, sub->rtp_stats.localJbNominal,
 			sub->rtp_stats.remoteJbNominal, sub->rtp_stats.localJbAbsMax, sub->rtp_stats.remoteJbAbsMax, sub->rtp_stats.discarded,
 			sub->rtp_stats.lost, sub->rtp_stats.rxpkts, sub->rtp_stats.txpkts, sub->rtp_stats.jbAvg, sub->rtp_stats.jitter,
-			sub->rtp_stats.uLossRate, sub->rtp_stats.maxJitter, sub->rtp_stats.averageRoundTripDelay, sub->rtp_stats.averageFarEndInterarrivalJitter);
+			sub->rtp_stats.localLossRate, sub->rtp_stats.remoteLossRate, sub->rtp_stats.maxJitter, sub->rtp_stats.averageRoundTripDelay,
+			sub->rtp_stats.farEndInterarrivalJitter, sub->rtp_stats.averageFarEndInterarrivalJitter, sub->rtp_stats.receiveInterarrivalJitter, sub->rtp_stats.averageReceiveInterarrivalJitter);
 }
 
 static int endpt_get_rtp_stats(int line) {
@@ -5301,8 +5316,12 @@ static int brcm_create_connection(struct
 	if (!sub->connection_init) {
 		ast_debug(1, "Creating virtual Asterisk connection for pvt line_id=%i connection_id=%d\n", sub->parent->line_id, sub->connection_id);
 		sub->connection_init = 1;
-		sub->jitter_count = 0;
-		sub->farEndInterrivalJitter = 0;
+		sub->remote_jitter_count = 0;
+		sub->local_jitter_count = 0;
+		sub->farEndInterarrivalJitter = 0;
+		sub->receiveInterarrivalJitter = 0;
+		sub->totalFarEndInterarrivalJitter = 0;
+		sub->totalReceiveInterarrivalJitter = 0;
 
 		if (sub->owner) {
 			sub->call_id = ast_channel_callid(sub->owner);
@@ -5482,31 +5501,79 @@ static void brcm_generate_rtp_packet(str
 
 /*
  * This function does the followings.
- * - Replace SSRC with the value from the sub-channel, which is also used by the corresponding RTP packets within
- *   the same session. Both RTP and RTCP packets in the same session must have the same SSRC value.
- * - Accumulate "Interarrival jitter" for farEndInterrivalJitter and jitter_count which are used to calculate
- *   averageFarEndInterarrivalJitter.
+ * - Accumulate "Interarrival jitter" for farEndInterarrivalJitter and remote_jitter_count which are used to calculate
+ *   averageFarEndInterarrivalJitter
+ */
+static void brcm_process_incoming_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size)
+{
+	struct rtcp_header_t *rtcp_hdr = (struct rtcp_header_t *)rtcp_frame;
+	uint8_t *packet_end = rtcp_frame + rtcp_size;
+
+	/*
+	  RTCP packet with RC=0 in the RTCP header does not contain any reception report block
+	  so we cannot get any parameters from such packets for calculations
+	*/
+	if (!RTCP_GET_RC(rtcp_hdr))
+		return;
+
+	while ((uint8_t *)rtcp_hdr + sizeof(struct rtcp_header_t) <= packet_end && // Minimum RTCP packet size validation
+			RTCP_GET_VERSION(rtcp_hdr) == RTP_VERSION &&  // RTP version validation
+			RTCP_PKT_END(rtcp_hdr) <= packet_end) {       // Packet length validation
+		switch (rtcp_hdr->pt) {
+			case RTCP_SR:
+			case RTCP_RR:
+				p->remote_jitter_count++;
+				p->farEndInterarrivalJitter = (rtcp_hdr->pt == RTCP_SR ? RTCP_SR_GET_INTERARRIVAL_JITTER(rtcp_hdr) :
+					RTCP_RR_GET_INTERARRIVAL_JITTER(rtcp_hdr));
+				p->totalFarEndInterarrivalJitter += p->farEndInterarrivalJitter;
+				break;
+			case RTCP_SDES:
+			case RTCP_XR:
+			case RTCP_BYE:
+				break;
+			default:
+				ast_log(LOG_ERROR, "Unknown incoming RTCP packet type:%hhu\n", rtcp_hdr->pt);
+				break;
+		}
+		// Move to the next RTCP header for a compound RTCP packet which contains more than one packet types
+		rtcp_hdr = (struct rtcp_header_t *)RTCP_PKT_END(rtcp_hdr);
+	}
+}
+
+/*
+ * This function does the followings.
+ * - Accumulate "Interarrival jitter" for receiveInterarrivalJitter and local_jitter_count which are used to calculate
+ *   averageReceiveInterarrivalJitter.
  */
-static void brcm_process_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size)
+static void brcm_process_outgoing_rtcp_packet(struct brcm_subchannel *p, uint8_t *rtcp_frame, uint32_t rtcp_size)
 {
 	struct rtcp_header_t *rtcp_hdr = (struct rtcp_header_t *)rtcp_frame;
 	uint8_t *packet_end = rtcp_frame + rtcp_size;
-	unsigned int*   packet_buf32 = (unsigned int*)rtcp_hdr;
+
+	/*
+	  RTCP packet with RC=0 in the RTCP header does not contain any reception report block
+	  so we cannot get any parameters from such packets for calculations
+	*/
+	if (!RTCP_GET_RC(rtcp_hdr))
+		return;
 
 	while ((uint8_t *)rtcp_hdr + sizeof(struct rtcp_header_t) <= packet_end && // Minimum RTCP packet size validation
 			RTCP_GET_VERSION(rtcp_hdr) == RTP_VERSION &&  // RTP version validation
 			RTCP_PKT_END(rtcp_hdr) <= packet_end) {       // Packet length validation
 		switch (rtcp_hdr->pt) {
 			case RTCP_SR:
-				p->jitter_count++;
-				p->farEndInterrivalJitter += RTCP_SR_GET_INTERARRIVAL_JITTER(rtcp_hdr);
-				/* Intentional fall through */
 			case RTCP_RR:
+				p->local_jitter_count++;
+				p->receiveInterarrivalJitter = (rtcp_hdr->pt == RTCP_SR ? RTCP_SR_GET_INTERARRIVAL_JITTER(rtcp_hdr) :
+					RTCP_RR_GET_INTERARRIVAL_JITTER(rtcp_hdr));
+				p->totalReceiveInterarrivalJitter += p->receiveInterarrivalJitter;
+				break;
 			case RTCP_SDES:
 			case RTCP_XR:
+			case RTCP_BYE:
 				break;
 			default:
-				ast_log(LOG_ERROR, "Unknown RTCP packet type:%hhu\n", rtcp_hdr->pt);
+				ast_log(LOG_ERROR, "Unknown outgoing RTCP packet type:%hhu\n", rtcp_hdr->pt);
 				break;
 		}
 		// Move to the next RTCP header for a compound RTCP packet which contains more than one packet types
Index: asterisk-18.5.1/channels/chan_brcm.h
===================================================================
--- asterisk-18.5.1.orig/channels/chan_brcm.h
+++ asterisk-18.5.1/channels/chan_brcm.h
@@ -25,6 +25,7 @@
 #define RTCP_SR      200
 #define RTCP_RR      201
 #define RTCP_SDES    202
+#define RTCP_BYE     203
 #define RTCP_XR      207
 
 #define CN 13
@@ -135,7 +136,9 @@ struct __attribute__((packed)) rtcp_head
 };
 #define RTCP_PKT_END(header)                    ((uint8_t *)(header) + (ntohs((header)->length) + 1) * 4)
 #define RTCP_GET_VERSION(header)                ((header)->v_p_rc >> 6)
+#define RTCP_GET_RC(header)                     ((header)->v_p_rc & 0x1F)
 #define RTCP_SR_GET_INTERARRIVAL_JITTER(header) ntohl(*((uint32_t *)(header) + 10))
+#define RTCP_RR_GET_INTERARRIVAL_JITTER(header) ntohl(*((uint32_t *)(header) + 5))
 
 struct brcm_subchannel {
 	int id;
@@ -159,8 +162,13 @@ struct brcm_subchannel {
 	char *conference_id;            /* uuid of the conference initiated by this subchannel */
 	int conf_timer_id;              /* Current conference call timer id, -1 if no active timer */
 	rtp_statistics rtp_stats;	/* RTP statistics for currently hanging up channel */
-	unsigned int jitter_count;
-	unsigned long int farEndInterrivalJitter;
+	unsigned int remote_jitter_count;
+	unsigned int local_jitter_count;
+	unsigned int farEndInterarrivalJitter;
+	unsigned int receiveInterarrivalJitter;
+	unsigned long int totalFarEndInterarrivalJitter;
+	unsigned long int totalReceiveInterarrivalJitter;
+
 	char blind_xfer_target[32];	/* Transfer target for unattended call transfer */
 	int updated_codec;
 	int congestion_timer_id;
Index: asterisk-18.5.1/include/asterisk/cdr.h
===================================================================
--- asterisk-18.5.1.orig/include/asterisk/cdr.h
+++ asterisk-18.5.1/include/asterisk/cdr.h
@@ -289,7 +289,8 @@ typedef struct {
 	uint16_t localJbAbsMax;
 	uint16_t remoteJbAbsMax;
 	uint16_t jbAvg;
-	uint16_t uLossRate;
+	uint16_t localLossRate;
+	uint16_t remoteLossRate;
 	uint32_t discarded;
 	uint32_t lost;
 	uint32_t rxpkts;
@@ -297,7 +298,11 @@ typedef struct {
 	uint32_t jitter;
 	uint32_t maxJitter;
 	uint32_t averageRoundTripDelay;
+	uint16_t farEndInterarrivalJitter;
 	uint32_t averageFarEndInterarrivalJitter;
+	uint16_t receiveInterarrivalJitter;
+	uint32_t averageReceiveInterarrivalJitter;
+
 } cdr_rtp_statistics;
 
 /*!
Index: asterisk-18.5.1/include/asterisk/channel.h
===================================================================
--- asterisk-18.5.1.orig/include/asterisk/channel.h
+++ asterisk-18.5.1/include/asterisk/channel.h
@@ -617,7 +617,8 @@ typedef struct {
 	uint16_t localJbAbsMax;
 	uint16_t remoteJbAbsMax;
 	uint16_t jbAvg;
-	uint16_t uLossRate;
+	uint16_t localLossRate;
+	uint16_t remoteLossRate;
 	uint32_t discarded;
 	uint32_t lost;
 	uint32_t rxpkts;
@@ -625,7 +626,10 @@ typedef struct {
 	uint32_t jitter;
 	uint32_t maxJitter;
 	uint32_t averageRoundTripDelay;
+	uint16_t farEndInterarrivalJitter;
 	uint32_t averageFarEndInterarrivalJitter;
+	uint16_t receiveInterarrivalJitter;
+	uint32_t averageReceiveInterarrivalJitter;
 } rtp_statistics;
 
 /*!
Index: asterisk-18.5.1/main/cdr.c
===================================================================
--- asterisk-18.5.1.orig/main/cdr.c
+++ asterisk-18.5.1/main/cdr.c
@@ -3224,8 +3224,10 @@ void ast_cdr_format_var(struct ast_cdr *
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->remoteJbAbsMax);
 	} else if (!strcasecmp(name, "jbAvg")) {
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->jbAvg);
-	} else if (!strcasecmp(name, "uLossRate")) {
-		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->uLossRate);
+	} else if (!strcasecmp(name, "localLossRate")) {
+		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->localLossRate);
+	} else if (!strcasecmp(name, "remoteLossRate")) {
+		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->remoteLossRate);
 	} else if (!strcasecmp(name, "discarded")) {
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->discarded);
 	} else if (!strcasecmp(name, "lost")) {
@@ -3240,8 +3242,14 @@ void ast_cdr_format_var(struct ast_cdr *
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->maxJitter);
 	} else if (!strcasecmp(name, "averageRoundTripDelay")) {
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->averageRoundTripDelay);
+	} else if (!strcasecmp(name, "farEndInterarrivalJitter")) {
+		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->farEndInterarrivalJitter);
 	} else if (!strcasecmp(name, "averageFarEndInterarrivalJitter")) {
 		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->averageFarEndInterarrivalJitter);
+	} else if (!strcasecmp(name, "receiveInterarrivalJitter")) {
+		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->receiveInterarrivalJitter);
+	} else if (!strcasecmp(name, "averageReceiveInterarrivalJitter")) {
+		snprintf(workspace, workspacelen, "%ld", cdr->rtp_stats->averageReceiveInterarrivalJitter);
 	} else {
 		workspace[0] = '\0';
 	}
