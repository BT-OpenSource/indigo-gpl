--- a/channels/chan_brcm.c
+++ b/channels/chan_brcm.c
@@ -306,6 +306,7 @@ static struct endpt_event event_map[] =
 	{ .name = "SWITCH", .event = EVENT_SWITCH },
 	{ .name = "JOIN", .event = EVENT_JOIN },
 	{ .name = "RELEASE", .event = EVENT_RELEASE },
+	{ .name = "BLOCK", .event = EVENT_BLOCK },
 	{ .name = "", .event = EVENT_LAST },
 };
 
@@ -3194,6 +3195,20 @@ static void brcm_process_event(struct en
 			ast_debug(1, "EVENT %d from dect received\n", ev->event);
 			handle_dect_event(sub, sub_peer, owner, peer_owner, ev->event);
 			break;
+	        case EVENT_BLOCK:
+			ast_debug(1, "Received EVENT %d from dectmngr\n", ev->event);
+			if(owner) {
+				enum ast_channel_state state = AST_STATE_RING;
+				struct ast_channel *pjsip_chan = ast_channel_get_by_state_and_prefix(&state, "PJSIP");
+				if(pjsip_chan) {
+					int res = ast_transfer(pjsip_chan, "sip:blockbutton@anonymous.invalid");
+					ast_debug(1, "Transfer res %d for channel %s\n", res, ast_channel_name(pjsip_chan));
+				} else {
+					ast_debug(1, "PJSIP channel not found\n");
+				}
+				ast_channel_unref(pjsip_chan);
+			}
+			break;
 		default:
 			ast_debug(1, "Ignore event %s\n", ev->name);
 			break;
--- a/channels/chan_brcm.h
+++ b/channels/chan_brcm.h
@@ -83,6 +83,7 @@ enum LINE_EVENT {																// Even
 	EVENT_SWITCH,
 	EVENT_JOIN,
 	EVENT_RELEASE,
+	EVENT_BLOCK,
 	EVENT_LAST,
 };
 
--- a/include/asterisk/channel.h
+++ b/include/asterisk/channel.h
@@ -3150,6 +3150,20 @@ struct ast_channel *ast_channel_get_by_n
  */
 struct ast_channel *ast_channel_get_by_exten(const char *exten, const char *context);
 
+/*!
+ * \brief Find a channel by state and prefix
+ *
+ * \param state the state of channel to search for
+ * \param prefix the name prefix of channel to search for
+ *
+ * \details
+ * Return a channel that is currently at the specified state and name prefix.
+ *
+ * \retval a channel that is at the specified state and name prefix.
+ * \retval NULL if no channel was found
+ */
+struct ast_channel *ast_channel_get_by_state_and_prefix(enum ast_channel_state *state, const char *prefix);
+
 /*! @} End channel search functions. */
 
 /*!
--- a/main/channel.c
+++ b/main/channel.c
@@ -1460,6 +1460,35 @@ struct ast_channel *ast_channel_get_by_e
 	return ast_channel_callback(ast_channel_by_exten_cb, l_context, l_exten, 0);
 }
 
+static int ast_channel_by_state_and_prefix_cb(void *obj, void *arg, void *data, int flags)
+{
+	struct ast_channel *chan = obj;
+	enum ast_channel_state *state = (enum ast_channel_state *) arg;
+	const char *prefix = (char *) data;
+	int ret = CMP_MATCH;
+
+	if (ast_strlen_zero(prefix)) {
+		ast_log(LOG_ERROR, "BUG! Must supply prefix to match!\n");
+		return CMP_STOP;
+	}
+
+	ast_channel_lock(chan);
+	if ((strncmp(ast_channel_name(chan), prefix, strlen(prefix)))
+		|| (ast_channel_state(chan) != *state)) {
+		ret = 0; /* name or state match failed, keep looking */
+	}
+	ast_channel_unlock(chan);
+
+	return ret;
+}
+
+struct ast_channel *ast_channel_get_by_state_and_prefix(enum ast_channel_state *state, const char *prefix)
+{
+	enum ast_channel_state *l_state = state;
+	char *l_prefix = (char *) prefix;
+
+	return ast_channel_callback(ast_channel_by_state_and_prefix_cb, l_state, l_prefix, 0);
+}
 int ast_is_deferrable_frame(const struct ast_frame *frame)
 {
 	/* Do not add a default entry in this switch statement.  Each new
--- a/channels/chan_pjsip.c
+++ b/channels/chan_pjsip.c
@@ -2259,7 +2259,11 @@
 				target = contact->uri;
 			}
 		}
-		transfer_refer(trnf_data->session, target);
+		if (ast_channel_state(trnf_data->session->channel) == AST_STATE_RING) {
+			transfer_redirect(trnf_data->session, target);
+		} else {
+			transfer_refer(trnf_data->session, target);
+		}
 	}
 
 	ao2_ref(trnf_data, -1);
