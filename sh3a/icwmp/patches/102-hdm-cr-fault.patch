diff --git a/config.c b/config.c
index efc47cd27aee56db24161bcf83c3ea629b8a34de..f363de270a73232f692074e7dde2aefedaa10fe8 100755
--- a/config.c
+++ b/config.c
@@ -224,21 +224,24 @@ int get_global_config(struct config *conf)
 	char *url = get_alternate_option_value(discovery_enable, value2, value3);
 	global_string_param_write(&conf->acsurl, url);

-	FREE(value2);
-	FREE(value3);
-
 	global_string_param_read(&conf->acsurl, &temp);
-	if (CWMP_STRLEN(url) == 0) {
+	if (CWMP_STRLEN(temp) == 0) {
+		CWMP_LOG(DEBUG, "Failed to get acs url: (%s) dhcp_url: (%s)", value2, value3);
 		FREE(temp);
+		FREE(value2);
+		FREE(value3);
 		return CWMP_GEN_ERR;
 	}
 	FREE(temp);
+	FREE(value2);
+	FREE(value3);

-	if ((error = uci_get_value(UCI_ACS_GETRPC, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_ACS_GETRPC, &value) == CWMP_OK) {
 		global_bool_param_write(&conf->acs_getrpc, uci_str_to_bool(value));
 		FREE(value);
 	} else {
-		return error;
+		global_bool_param_write(&conf->acs_getrpc, false);
+		CWMP_LOG(DEBUG, "Failed to get ACS get_rpc_methods setting false by default");
 	}

 	if ((error = uci_get_value(UCI_ACS_USERID_PATH, &value)) == CWMP_OK) {
@@ -248,6 +251,7 @@ int get_global_config(struct config *conf)
 			FREE(value);
 		}
 	} else {
+		CWMP_LOG(DEBUG, "Failed to get ACS user id");
 		return error;
 	}

@@ -258,10 +262,11 @@ int get_global_config(struct config *conf)
 			FREE(value);
 		}
 	} else {
+		CWMP_LOG(DEBUG, "Failed to get ACS password");
 		return error;
 	}

-	if ((error = uci_get_value(UCI_ACS_COMPRESSION, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_ACS_COMPRESSION, &value) == CWMP_OK) {
 		global_int_param_write(&conf->compression, COMP_NONE);
 		if (global_int_param_read(&conf->amd_version) >= AMD_5 && value != NULL) {
 			if (0 == strcasecmp(value, "gzip")) {
@@ -311,7 +316,7 @@ int get_global_config(struct config *conf)
 	FREE(value2);
 	FREE(value3);

-	if ((error = uci_get_value(UCI_CPE_USERID_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_USERID_PATH, &value) == CWMP_OK) {
 		global_string_param_free(&conf->cpe_userid);
 		if (value != NULL) {
 			global_string_param_write(&conf->cpe_userid, value);
@@ -320,10 +325,11 @@ int get_global_config(struct config *conf)
 			global_string_param_write(&conf->cpe_userid, "");
 		}
 	} else {
-		return error;
+		global_string_param_write(&conf->cpe_userid, "");
+		CWMP_LOG(DEBUG, "Failed to get CPE user id, setting empty by default");
 	}

-	if ((error = uci_get_value(UCI_CPE_PASSWD_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_PASSWD_PATH, &value) == CWMP_OK) {
 		global_string_param_free(&conf->cpe_passwd);
 		if (value != NULL) {
 			global_string_param_write(&conf->cpe_passwd, value);
@@ -332,10 +338,11 @@ int get_global_config(struct config *conf)
 			global_string_param_write(&conf->cpe_passwd, "");
 		}
 	} else {
-		return error;
+		global_string_param_write(&conf->cpe_passwd, "");
+		CWMP_LOG(DEBUG, "Failed to get CPE password, setting empty by default");
 	}

-	if ((error = uci_get_value(UCI_CPE_PORT_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_PORT_PATH, &value) == CWMP_OK) {
 		int a = 0;

 		if (value != NULL) {
@@ -350,10 +357,11 @@ int get_global_config(struct config *conf)
 			global_int_param_write(&conf->connection_request_port, a);
 		}
 	} else {
-		return error;
+		global_int_param_write(&conf->connection_request_port, DEFAULT_CONNECTION_REQUEST_PORT);
+		CWMP_LOG(DEBUG, "Failed to get CPE port, setting default %d", DEFAULT_CONNECTION_REQUEST_PORT);
 	}

-	if ((error = uci_get_value(UCI_CPE_CRPATH_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_CRPATH_PATH, &value) == CWMP_OK) {
 		global_string_param_free(&conf->connection_request_path);
 		if (value == NULL)
 			global_string_param_write(&conf->connection_request_path, "/");
@@ -368,10 +376,11 @@ int get_global_config(struct config *conf)
 			FREE(value);
 		}
 	} else {
-		return error;
+		global_string_param_write(&conf->connection_request_path, "/");
+		CWMP_LOG(DEBUG, "Failed to get CPE CR path, setting \'/\' by default");
 	}

-	if ((error = uci_get_value(UCI_CPE_NOTIFY_PERIODIC_ENABLE, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_NOTIFY_PERIODIC_ENABLE, &value) == CWMP_OK) {
 		bool a = true;
 		if (value != NULL) {
 			a = uci_str_to_bool(value);
@@ -379,10 +388,11 @@ int get_global_config(struct config *conf)
 		}
 		global_bool_param_write(&conf->periodic_notify_enable, a);
 	} else {
-		return error;
+		global_bool_param_write(&conf->periodic_notify_enable, true);
+		CWMP_LOG(DEBUG, "Failed to get periodic notify enable, setting true by default");
 	}

-	if ((error = uci_get_value(UCI_CPE_NOTIFY_PERIOD, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_NOTIFY_PERIOD, &value) == CWMP_OK) {
 		int a = 0;

 		if (value != NULL) {
@@ -397,10 +407,11 @@ int get_global_config(struct config *conf)
 			global_int_param_write(&conf->periodic_notify_interval, a);
 		}
 	} else {
-		return error;
+		global_int_param_write(&conf->periodic_notify_interval, DEFAULT_NOTIFY_PERIOD);
+		CWMP_LOG(DEBUG, "Failed to get notify interval, setting default %d", DEFAULT_NOTIFY_PERIOD);
 	}

-	if ((error = uci_get_value(UCI_PERIODIC_INFORM_TIME_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_PERIODIC_INFORM_TIME_PATH, &value) == CWMP_OK) {
 		if (value != NULL) {
 			global_time_param_write(&conf->time, convert_datetime_to_timestamp(value));
 			FREE(value);
@@ -408,7 +419,8 @@ int get_global_config(struct config *conf)
 			global_time_param_write(&conf->time, 0);
 		}
 	} else {
-		return error;
+		global_time_param_write(&conf->time, 0);
+		CWMP_LOG(DEBUG, "Failed to get periodic inform time, setting default 0");
 	}

 	char *entropy = generate_random_string(sizeof(unsigned int));
@@ -417,7 +429,7 @@ int get_global_config(struct config *conf)
 		free(entropy);
 	}

-	if ((error = uci_get_value(UCI_PERIODIC_INFORM_INTERVAL_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_PERIODIC_INFORM_INTERVAL_PATH, &value) == CWMP_OK) {
 		int a = 0;

 		if (value != NULL) {
@@ -432,17 +444,19 @@ int get_global_config(struct config *conf)
 			global_int_param_write(&conf->period, PERIOD_INFORM_DEFAULT);
 		}
 	} else {
-		return error;
+		global_int_param_write(&conf->period, PERIOD_INFORM_DEFAULT);
+		CWMP_LOG(DEBUG, "Failed to get periodic inform interval, setting default: %ds", PERIOD_INFORM_DEFAULT);
 	}

-	if ((error = uci_get_value(UCI_PERIODIC_INFORM_ENABLE_PATH, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_PERIODIC_INFORM_ENABLE_PATH, &value) == CWMP_OK) {
 		global_bool_param_write(&conf->periodic_enable, uci_str_to_bool(value));
 		FREE(value);
 	} else {
-		return error;
+		global_bool_param_write(&conf->periodic_enable, true);
+		CWMP_LOG(DEBUG, "Failed to get periodic inform enable, setting true by default");
 	}

-	if ((error = uci_get_value(UCI_CPE_INSTANCE_MODE, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_INSTANCE_MODE, &value) == CWMP_OK) {
 		if (value != NULL) {
 			if (0 == strcmp(value, "InstanceNumber")) {
 				global_uint_param_write(&conf->instance_mode, INSTANCE_MODE_NUMBER);
@@ -454,10 +468,11 @@ int get_global_config(struct config *conf)
 			global_uint_param_write(&conf->instance_mode, DEFAULT_INSTANCE_MODE);
 		}
 	} else {
-		return error;
+		global_uint_param_write(&conf->instance_mode, DEFAULT_INSTANCE_MODE);
+		CWMP_LOG(DEBUG, "Failed to get CPE instance mode, setting default %u", DEFAULT_INSTANCE_MODE);
 	}

-	if ((error = uci_get_value(UCI_CPE_SESSION_TIMEOUT, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_CPE_SESSION_TIMEOUT, &value) == CWMP_OK) {
 		global_uint_param_write(&conf->session_timeout, DEFAULT_SESSION_TIMEOUT);
 		if (value != NULL) {
 			int a = atoi(value);
@@ -467,17 +482,19 @@ int get_global_config(struct config *conf)
 			FREE(value);
 		}
 	} else {
-		return error;
+		global_uint_param_write(&conf->session_timeout, DEFAULT_SESSION_TIMEOUT);
+		CWMP_LOG(DEBUG, "Failed to get CPE session timeout, setting default %ds", DEFAULT_SESSION_TIMEOUT);
 	}

-	if ((error = uci_get_value(LW_NOTIFICATION_ENABLE, &value)) == CWMP_OK) {
+	if (uci_get_value(LW_NOTIFICATION_ENABLE, &value) == CWMP_OK) {
 		global_bool_param_write(&conf->lw_notification_enable, uci_str_to_bool(value));
 		FREE(value);
 	} else {
-		return error;
+		global_bool_param_write(&conf->lw_notification_enable, false);
+		CWMP_LOG(DEBUG, "Failed to get LW notification enable, setting false by default");
 	}

-	if ((error = uci_get_value(LW_NOTIFICATION_HOSTNAME, &value)) == CWMP_OK) {
+	if (uci_get_value(LW_NOTIFICATION_HOSTNAME, &value) == CWMP_OK) {
 		global_string_param_free(&conf->lw_notification_hostname);
 		if (value != NULL) {
 			global_string_param_write(&conf->lw_notification_hostname, value);
@@ -488,10 +505,13 @@ int get_global_config(struct config *conf)
 			FREE(temp);
 		}
 	} else {
-		return error;
+		global_string_param_read(&conf->acsurl, &temp);
+		global_string_param_write(&conf->lw_notification_hostname, temp);
+		CWMP_LOG(DEBUG, "Failed to get LWN hostname, setting %s", temp);
+		FREE(temp);
 	}

-	if ((error = uci_get_value(LW_NOTIFICATION_PORT, &value)) == CWMP_OK) {
+	if (uci_get_value(LW_NOTIFICATION_PORT, &value) == CWMP_OK) {
 		if (value != NULL) {
 			int a = atoi(value);
 			global_int_param_write(&conf->lw_notification_port, a);
@@ -500,7 +520,8 @@ int get_global_config(struct config *conf)
 			global_int_param_write(&conf->lw_notification_port, DEFAULT_LWN_PORT);
 		}
 	} else {
-		return error;
+		global_int_param_write(&conf->lw_notification_port, DEFAULT_LWN_PORT);
+		CWMP_LOG(DEBUG, "Failed to get LWN port, setting default %d", DEFAULT_LWN_PORT);
 	}

 	if (uci_get_value(UCI_CPE_SCHEDULE_REBOOT, &value) == CWMP_OK) {
@@ -511,7 +532,8 @@ int get_global_config(struct config *conf)
 			global_time_param_write(&conf->schedule_reboot, 0);
 		}
 	} else {
-		return error;
+		global_time_param_write(&conf->schedule_reboot, 0);
+		CWMP_LOG(DEBUG, "Failed to get CPE schedule reboot, setting default 0");
 	}

 	if (uci_get_value(UCI_CPE_DELAY_REBOOT, &value) == CWMP_OK) {
@@ -524,7 +546,8 @@ int get_global_config(struct config *conf)

 		global_int_param_write(&conf->delay_reboot, delay);
 	} else {
-		return error;
+		global_int_param_write(&conf->delay_reboot, -1);
+		CWMP_LOG(DEBUG, "Failed to get CPE delay reboot, setting default -1");
 	}

 	if (uci_get_value(UCI_CPE_FORCED_INFORM_JSON, &value) == CWMP_OK) {
@@ -555,14 +578,15 @@ int get_global_config(struct config *conf)
 		}
 	}

-	if ((error = uci_get_value(UCI_ACS_HEARTBEAT_ENABLE, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_ACS_HEARTBEAT_ENABLE, &value) == CWMP_OK) {
 		global_bool_param_write(&conf->heart_beat_enable, uci_str_to_bool(value));
 		FREE(value);
 	} else {
-		return error;
+		global_bool_param_write(&conf->heart_beat_enable, false);
+		CWMP_LOG(DEBUG, "Failed to get ACS heartbeat enable, setting false by default");
 	}

-	if ((error = uci_get_value(UCI_ACS_HEARTBEAT_INTERVAL, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_ACS_HEARTBEAT_INTERVAL, &value) == CWMP_OK) {
 		int a = 30;

 		if (value != NULL) {
@@ -571,10 +595,11 @@ int get_global_config(struct config *conf)
 		}
 		global_int_param_write(&conf->heartbeat_interval, a);
 	} else {
-		return error;
+		global_int_param_write(&conf->heartbeat_interval, 30);
+		CWMP_LOG(DEBUG, "Failed to get ACS heartbeat interval, setting default 30s");
 	}

-	if ((error = uci_get_value(UCI_ACS_HEARTBEAT_TIME, &value)) == CWMP_OK) {
+	if (uci_get_value(UCI_ACS_HEARTBEAT_TIME, &value) == CWMP_OK) {
 		if (value != NULL) {
 			global_time_param_write(&conf->heart_time, convert_datetime_to_timestamp(value));
 			FREE(value);
@@ -582,7 +607,8 @@ int get_global_config(struct config *conf)
 			global_time_param_write(&conf->heart_time, 0);
 		}
 	} else {
-		return error;
+		global_time_param_write(&conf->heart_time, 0);
+		CWMP_LOG(DEBUG, "Failed to get ACS heartbeat time, setting 0 by default");
 	}
 	return CWMP_OK;
 }
diff --git a/log.c b/log.c
index 7a0f1e114e736ff7ea605dd8ae805a897a68d46a..407efddd5d9409cede9757fde458490c0fc934a6 100644
--- a/log.c
+++ b/log.c
@@ -163,6 +163,10 @@ void puts_log_xmlmsg(int severity, char *msg, int msgtype)
 	char buf[1024];
 	char *description, *separator;

+	if (msg == NULL) {
+		return;
+	}
+
 	pthread_mutex_lock(&mutex_log);

 	if (severity > log_severity) {
diff --git a/ubus_utils.c b/ubus_utils.c
index c21576c8f9a1eddda74a0cc7aaf55cb1f2659c53..41f83462483061901e7aa3fe1e9c171fbe6bba1a 100644
--- a/ubus_utils.c
+++ b/ubus_utils.c
@@ -397,16 +397,33 @@ int icwmp_ubus_invoke(const char *obj, const char *method, struct blob_attr *msg
 {
 	uint32_t id;
 	int rc = 0;
+	int retry = 0;

 	struct ubus_context *ubus_ctx = NULL;

 	ubus_ctx = ubus_connect(NULL);
+	while (ubus_ctx == NULL && retry < 5) {
+		retry ++;
+		CWMP_LOG(DEBUG, "Failed to connect ubus retry after 1 sec");
+		sleep(1);
+		ubus_ctx = ubus_connect(NULL);
+	}
+
 	if (ubus_ctx == NULL) {
-		CWMP_LOG(ERROR, "Failed to connect with ubus");
+		CWMP_LOG(ERROR, "Failed to connect with ubus err: %d", errno);
 		return -1;
 	}

-	if (!ubus_lookup_id(ubus_ctx, obj, &id)) {
+	retry = 0;
+	rc = ubus_lookup_id(ubus_ctx, obj, &id);
+	while (rc != 0 && retry < 5) {
+		retry ++;
+		CWMP_LOG(DEBUG, "Failed to ubus lookup %s, retry after 1 sec", obj);
+		sleep(1);
+		rc = ubus_lookup_id(ubus_ctx, obj, &id);
+	}
+
+	if (!rc) {
 		rc = ubus_invoke(ubus_ctx, id, method, msg, icwmp_callback, callback_arg, 60000);
 	} else {
 		CWMP_LOG(ERROR, "Failed to ubus lookup %s", obj);
diff --git a/xml.c b/xml.c
index 084a2396b10944aa7b9eefcec058ce1b5fb6b140..3d5e223e4650951521196876ec64b96993a011e8 100644
--- a/xml.c
+++ b/xml.c
@@ -140,9 +140,19 @@ int xml_send_message(struct cwmp *cwmp, struct session *session, struct rpc *rpc
 	mxml_node_t *b;
 	int compression = global_int_param_read(&cwmp->conf.compression);

+	if (session == NULL) {
+		CWMP_LOG(ERROR, "Received session is NULL");
+		return -1;
+	}
+
 	if (session->tree_out) {
 		unsigned char *zmsg_out;
 		msg_out = mxmlSaveAllocString(session->tree_out, whitespace_cb);
+		if (msg_out == NULL) {
+			CWMP_LOG(ERROR, "Received tree_out is empty");
+			return -1;
+		}
+
 		CWMP_LOG_XML_MSG(DEBUG, msg_out, XML_MSG_OUT);
 		if (compression != COMP_NONE) {
 			if (zlib_compress(msg_out, &zmsg_out, &msg_out_len, compression)) {
diff --git a/http.c b/http.c
index e6962d195cb24a06fb9e0de2213ee53a4542a31d..ede6cac258399c998288f2250933feabd5b986d1 100644
--- a/http.c
+++ b/http.c
@@ -317,16 +317,17 @@ static void http_cr_new_client(int client, bool service_available)
 	bool internal_error = false;
 	char cr_http_get_head[HTTP_GET_HDR_LEN] = {0};
 	char *temp = NULL;
+	char *username = NULL;
+	char *password = NULL;

+	CWMP_LOG(INFO, "Received a new CR from ACS, service_available: %d", service_available);
 	fp = fdopen(client, "r+");
 	if (fp == NULL) {
 		CWMP_LOG(INFO, "Failed to open client socket");
 		service_available = false;
 		goto http_end;
 	}
-	char *username = NULL;
 	global_string_param_read(&cwmp_main.conf.cpe_userid, &username);
-	char *password = NULL;
 	global_string_param_read(&cwmp_main.conf.cpe_passwd, &password);

 	memset(auth_digest_buffer, 0, BUFSIZ);
@@ -393,7 +394,7 @@ http_end:
 	FREE(username);
 	FREE(password);
 	if (!service_available || !method_is_get) {
-		CWMP_LOG(INFO, "Receive Connection Request: Return 503 Service Unavailable");
+		CWMP_LOG(WARNING, "Receive Connection Request: Return 503 Service Unavailable");
 		if (fp) {
 			fputs("HTTP/1.1 503 Service Unavailable\r\n", fp);
 			fputs("Connection: close\r\n", fp);
@@ -408,7 +409,7 @@ http_end:
 		}
 		http_success_cr();
 	} else if (internal_error) {
-		CWMP_LOG(INFO, "Receive Connection Request: Return 500 Internal Error");
+		CWMP_LOG(WARNING, "Receive Connection Request: Return 500 Internal Error");
 		if (fp) {
 			fputs("HTTP/1.1 500 Internal Server Error\r\n", fp);
 			fputs("Connection: close\r\n", fp);
@@ -416,7 +417,7 @@ http_end:
 		}
 	}
 	else {
-		CWMP_LOG(INFO, "Receive Connection Request: Return 401 Unauthorized");
+		CWMP_LOG(WARNING, "Receive Connection Request: Return 401 Unauthorized");
 		if (fp) {
 			fputs("HTTP/1.1 401 Unauthorized\r\n", fp);
 			fputs("Connection: close\r\n", fp);
@@ -508,6 +509,7 @@ void http_server_listen(void)
 			if (cr_request > CONNECTION_REQUEST_RESTRICT_REQUEST) {
 				restrict_start_time = current_time;
 				service_available = false;
+				CWMP_LOG(WARNING, "CR count %d exceeded max %d, SKIPPED", cr_request, CONNECTION_REQUEST_RESTRICT_REQUEST);
 			}
 		}
 		http_cr_new_client(client_sock, service_available);
diff --git a/upload.c b/upload.c
index e88a6cd76f85fc46c23d0f131164124b684f1dd9..f89406866f75fdf2dfa296b307458590f52be597 100644
--- a/upload.c
+++ b/upload.c
@@ -234,7 +234,7 @@ void *thread_cwmp_rpc_cpe_upload(void *v)
 				if (pupload->scheduled_time != 0)
 					count_download_queue--;
 				cwmp_free_upload_request(pupload);
-				pthread_mutex_unlock(&mutex_download);
+				pthread_mutex_unlock(&mutex_upload);
 				continue;
 			}
 			if ((timeout >= 0) && (timeout <= time_of_grace)) {
diff --git a/http.c b/http.c
index ede6cac258399c998288f2250933feabd5b986d1..752fd9d71ab267e5a9bc599b2c50b00420c0d128 100644
--- a/http.c
+++ b/http.c
@@ -435,11 +435,15 @@ void http_server_init(void)
 {
 	struct sockaddr_in6 server = { 0 };
 	unsigned short cr_port;
+	unsigned short prev_cr_port = (unsigned short)global_int_param_read(&cwmp_main.conf.connection_request_port);

 	for (;;) {
 		cr_port = (unsigned short)global_int_param_read(&cwmp_main.conf.connection_request_port);
 		unsigned short i = (DEFAULT_CONNECTION_REQUEST_PORT == cr_port) ? 1 : 0;
 		//Create socket
+		if (thread_end)
+			return;
+
 		cwmp_main.cr_socket_desc = socket(AF_INET6, SOCK_STREAM, 0);
 		if (cwmp_main.cr_socket_desc == -1) {
 			CWMP_LOG(ERROR, "Could not open server socket for Connection Requests, Error no is : %d, Error description is : %s", errno, strerror(errno));
@@ -459,6 +463,9 @@ void http_server_init(void)
 		server.sin6_addr = in6addr_any;

 		for (;; i++) {
+			if (thread_end)
+				return;
+
 			server.sin6_port = htons(cr_port);
 			//Bind
 			if (bind(cwmp_main.cr_socket_desc, (struct sockaddr *)&server, sizeof(server)) < 0) {
@@ -472,17 +479,20 @@ void http_server_init(void)
 		}
 		break;
 	}
-	char cr_port_str[6];
-	snprintf(cr_port_str, 6, "%hu", cr_port);
-	cr_port_str[5] = '\0';
-	cwmp_uci_set_value("cwmp", "cpe", "port", cr_port_str);
-	connection_request_port_value_change(&cwmp_main, cr_port);
+	if (cr_port != prev_cr_port) {
+		char cr_port_str[6];
+		snprintf(cr_port_str, 6, "%hu", cr_port);
+		cr_port_str[5] = '\0';
+		cwmp_uci_set_value("cwmp", "cpe", "port", cr_port_str);
+		connection_request_port_value_change(&cwmp_main, cr_port);
+	}
+
 	CWMP_LOG(INFO, "Connection Request server initiated with the port: %d", cr_port);
 }

 void http_server_listen(void)
 {
-	int client_sock, c;
+	int c;
 	int cr_request = 0;
 	time_t restrict_start_time = 0;
 	struct sockaddr_in6 client;
@@ -492,13 +502,24 @@ void http_server_listen(void)

 	//Accept and incoming connection
 	c = sizeof(struct sockaddr_in);
-	while ((client_sock = accept(cwmp_main.cr_socket_desc, (struct sockaddr *)&client, (socklen_t *)&c))) {
-		bool service_available;
-		time_t current_time;
-		
+	do {
 		if (thread_end)
 			return;

+		int client_sock = accept(cwmp_main.cr_socket_desc, (struct sockaddr *)&client, (socklen_t *)&c);
+		if (client_sock < 0) {
+			CWMP_LOG(ERROR, "Could not accept connections for Connection Requests!");
+			shutdown(cwmp_main.cr_socket_desc, SHUT_RDWR);
+			http_server_init();
+			listen(cwmp_main.cr_socket_desc, 3);
+			cr_request = 0;
+			restrict_start_time = 0;
+			continue;
+		}
+
+		bool service_available;
+		time_t current_time;
+
 		current_time = time(NULL);
 		service_available = true;
 		if ((restrict_start_time == 0) || ((current_time - restrict_start_time) > CONNECTION_REQUEST_RESTRICT_PERIOD)) {
@@ -514,10 +535,5 @@ void http_server_listen(void)
 		}
 		http_cr_new_client(client_sock, service_available);
 		close(client_sock);
-	}
-
-	if (client_sock < 0) {
-		CWMP_LOG(ERROR, "Could not accept connections for Connection Requests!");
-		return;
-	}
+	} while (1);
 }
diff --git a/http.c b/http.c
index 752fd9d71ab267e5a9bc599b2c50b00420c0d128..c9067677721b99722babe5313eab6b1fcb7e4893 100644
--- a/http.c
+++ b/http.c
@@ -28,7 +28,7 @@
 #define HTTP_GET_HDR_LEN 512

 static struct http_client http_c;
-
+static bool curl_glob_init = false;
 static CURL *curl = NULL;

 char *fc_cookies = "/tmp/icwmp_cookies";
@@ -81,6 +81,7 @@ int http_client_init(struct cwmp *cwmp)
 	/* TODO debug ssl config from freecwmp*/

 	curl_global_init(CURL_GLOBAL_SSL);
+	curl_glob_init = true;
 	curl = curl_easy_init();
 	if (!curl)
 		return -1;
@@ -116,7 +117,11 @@ void http_client_exit(void)
 		curl_easy_cleanup(curl);
 		curl = NULL;
 	}
-	curl_global_cleanup();
+
+	if (curl_glob_init) {
+		curl_global_cleanup();
+		curl_glob_init = false;
+	}
 }

 static size_t http_get_response(void *buffer, size_t size, size_t rxed, char **msg_in)
diff --git a/inc/xml.h b/inc/xml.h
index d3d0e69199786a9aff5278ce13dfe299527a2d41..27f716fb66bd8dc331e9880beb16ff783cb46a79 100644
--- a/inc/xml.h
+++ b/inc/xml.h
@@ -21,7 +21,6 @@ int xml_prepare_msg_out(struct session *session);
 int xml_prepare_lwnotification_message(char **msg_out);
 int xml_set_cwmp_id_rpc_cpe(struct session *session);
 int xml_recreate_namespace(mxml_node_t *tree);
-const char *whitespace_cb(mxml_node_t *node, int where);
 int xml_set_cwmp_id(struct session *session);
 int xml_send_message(struct cwmp *cwmp, struct session *session, struct rpc *rpc);
 mxml_node_t *mxmlFindElementOpaque(mxml_node_t *node, mxml_node_t *top, const char *text, int descend);
diff --git a/test/script/common.sh b/test/script/common.sh
index f65a1c166bd035ee10e3c2f9e236be3fa42708c5..acd34c6e2928b37d1f5de4efe5bce38e214d9da6 100644
--- a/test/script/common.sh
+++ b/test/script/common.sh
@@ -66,7 +66,9 @@ function print_tag_value()
 {
 	rpc_method=$1
 	tag=$2
-	xml_data=`awk -v start="<"$rpc_method">" -v end="</"$rpc_method">" '$0~start,$1~end' $icwmp_log_file`
+	output=$(sed -n "/<"$rpc_method">/,/<\/"$rpc_method">/p" $icwmp_log_file)
+	xml_data=$(echo $output | grep -o "<"$rpc_method">.*<\/"$rpc_method">")
+
 	tag_value=`grep -oPm1 "(?<=<$tag>)[^<]+" <<< "$xml_data"`
 	echo $tag_value
 }
diff --git a/xml.c b/xml.c
index 3d5e223e4650951521196876ec64b96993a011e8..7c6c4ea54f9e4e46206d95f538c4587b8f559c79 100644
--- a/xml.c
+++ b/xml.c
@@ -147,7 +147,7 @@ int xml_send_message(struct cwmp *cwmp, struct session *session, struct rpc *rpc

 	if (session->tree_out) {
 		unsigned char *zmsg_out;
-		msg_out = mxmlSaveAllocString(session->tree_out, whitespace_cb);
+		msg_out = mxmlSaveAllocString(session->tree_out, MXML_NO_CALLBACK);
 		if (msg_out == NULL) {
 			CWMP_LOG(ERROR, "Received tree_out is empty");
 			return -1;
@@ -308,50 +308,6 @@ int xml_set_cwmp_id_rpc_cpe(struct session *session)
 	return 0;
 }

-const char *get_node_tab_space(mxml_node_t *node)
-{
-	static char tab_space[10 * sizeof(CWMP_MXML_TAB_SPACE) + 1];
-	int count = 0;
-
-	memset(tab_space, 0, sizeof(tab_space));
-	while ((node = mxmlGetParent(node))) {
-		count = count + 1;
-	}
-
-	if (count) {
-		snprintf(tab_space, sizeof(tab_space), "%*s", (int)(count * sizeof(CWMP_MXML_TAB_SPACE)), "");
-	}
-
-	return tab_space;
-}
-
-const char *whitespace_cb(mxml_node_t *node, int where __attribute__((unused)))
-{
-	if (mxmlGetType(node) != MXML_ELEMENT)
-		return NULL;
-
-	switch (where) {
-	case MXML_WS_BEFORE_CLOSE:
-		if (mxmlGetFirstChild(node) && mxmlGetType(mxmlGetFirstChild(node)) != MXML_ELEMENT)
-			return NULL;
-
-		return get_node_tab_space(node);
-	case MXML_WS_BEFORE_OPEN:
-		if (where == MXML_WS_BEFORE_CLOSE && mxmlGetFirstChild(node) && mxmlGetType(mxmlGetFirstChild(node)) != MXML_ELEMENT)
-			return NULL;
-
-		return get_node_tab_space(node);
-	case MXML_WS_AFTER_OPEN:
-		return ((mxmlGetFirstChild(node) == NULL || mxmlGetType(mxmlGetFirstChild(node)) == MXML_ELEMENT) ? "\n" : NULL);
-	case MXML_WS_AFTER_CLOSE:
-		return "\n";
-	default:
-		return NULL;
-	}
-
-	return NULL;
-}
-
 char *xml_get_cwmp_version(int version)
 {
 	static char versions[60];
@@ -413,7 +369,7 @@ int xml_prepare_lwnotification_message(char **msg_out)
 	if (!lw_tree)
 		goto error;

-	*msg_out = mxmlSaveAllocString(lw_tree, whitespace_cb);
+	*msg_out = mxmlSaveAllocString(lw_tree, MXML_NO_CALLBACK);

 	mxmlDelete(lw_tree);
 	return 0;

