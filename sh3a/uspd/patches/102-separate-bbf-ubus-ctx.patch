diff --git a/src/usp.c b/src/usp.c
index 8c2f05c..a1448f3 100644
--- a/src/usp.c
+++ b/src/usp.c
@@ -1356,12 +1356,12 @@ static int usp_init(struct usp_context *u)
 	return ret;
 }
 
-bool usp_pre_init(struct usp_context *u)
+bool usp_pre_init(struct usp_context *u, struct ubus_context *bbf_ctx)
 {
 	bool ret = true;
 	struct blob_buf bb;
 	// Initialize ubus ctx for bbf
-	bbf_configure_ubus(&u->ubus_ctx);
+	bbf_configure_ubus(bbf_ctx);
 
 	// Initialize dmmap
 	init_dmmap();
@@ -1494,6 +1494,7 @@ int main(int argc, char **argv)
 {
 	struct usp_context usp_ctx;
 	const char *ubus_socket = NULL;
+	struct ubus_context *bbf_ctx = NULL;
 	int ret = 0, ch;
 
 	while ((ch = getopt(argc, argv, "hs:t:")) != -1) {
@@ -1534,7 +1535,14 @@ int main(int argc, char **argv)
 	}
 
 	ubus_add_uloop(&usp_ctx.ubus_ctx);
-	usp_pre_init(&usp_ctx);
+
+	bbf_ctx = ubus_connect(NULL);
+	if (!bbf_ctx) {
+		fprintf(stderr, "Failed to connect to ubus for bbf\n");
+		ret = 1;
+		goto exit;
+	}
+	usp_pre_init(&usp_ctx, bbf_ctx);
 
 	usp_ctx.schema_timer.cb = periodic_schema_updater;
 	uloop_timeout_set(&usp_ctx.schema_timer, SCHEMA_UPDATE_TIMEOUT);
@@ -1553,6 +1561,8 @@ exit:
 	bbf_configure_ubus(NULL);
 	uloop_done();
 	usp_cleanup(&usp_ctx);
+	if (bbf_ctx)
+		ubus_free(bbf_ctx);
 	closelog();
 
 	return ret;
diff --git a/src/usp.h b/src/usp.h
index c25baca..dcfaee0 100644
--- a/src/usp.h
+++ b/src/usp.h
@@ -129,7 +129,7 @@ int usp_transaction_handler(struct ubus_context *ctx, struct ubus_object *obj,
 			    struct ubus_request_data *req, const char *method,
 			    struct blob_attr *msg);
 
-bool usp_pre_init(struct usp_context *u);
+bool usp_pre_init(struct usp_context *u, struct ubus_context *bbf_ctx);
 bool usp_post_init(struct usp_context *u);
 bool usp_cleanup(struct usp_context *u);
 
