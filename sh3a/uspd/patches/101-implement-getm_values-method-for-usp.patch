diff --git a/src/get.c b/src/get.c
index 3c2efb2..460289b 100644
--- a/src/get.c
+++ b/src/get.c
@@ -25,6 +25,7 @@
 #include "get_helper.h"
 #include "pretty_print.h"
 #include "ipc.h"
+#include <json-c/json.h>
 #include <libubus.h>
 #include <libbbfdm/dmbbfcommon.h>
 
@@ -69,7 +70,7 @@ void usp_get_value_async(usp_data_t *data, void *output)
 		if (data->is_raw)
 			prepare_result_raw(&bb, &bbf_ctx, &resolved_list);
 		else
-			prepare_pretty_result(data->depth, data->qpath, &bb, &bbf_ctx, &resolved_list);
+			prepare_pretty_result(data->depth, data->qpath, &bb, &bbf_ctx, &resolved_list, NULL);
 	}
 
 	if (!validate_msglen(&bb)) {
@@ -120,7 +121,7 @@ void usp_get_value(usp_data_t *data)
 		if (raw)
 			prepare_result_raw(&bb, &bbf_ctx, &resolved_list);
 		else
-			prepare_pretty_result(depth, qpath, &bb, &bbf_ctx, &resolved_list);
+			prepare_pretty_result(depth, qpath, &bb, &bbf_ctx, &resolved_list, NULL);
 	}
 
 	if (!validate_msglen(&bb)) {
@@ -286,7 +287,114 @@ void usp_get_name(usp_data_t *data)
 	bbf_cleanup(&bbf_ctx);
 }
 
-void get_mpath(usp_data_t *data)
+void usp_get_mpath(usp_data_t *data)
+{
+	struct ubus_context *ctx = data->ctx;
+	struct ubus_request_data *req = data->req;
+	uint8_t depth = data->depth;
+	struct list_head *paths_list = data->plist;
+
+	char *ubus_response = NULL;
+	struct json_object *jobj = json_object_new_object();
+	struct json_object *jobj_temp = NULL;
+	enum json_tokener_error jerror;
+
+	struct blob_buf bb;
+	struct dmctx bbf_ctx;
+	struct pathNode *pn;
+	int fault = USP_ERR_OK;
+
+	list_for_each_entry(pn, paths_list, list) {
+		char *qpath = pn->path;
+		INFO("Entry path |%s|", qpath);
+
+		LIST_HEAD(resolved_list);
+
+		// Fill the blob_buf for sharing the result
+		memset(&bb, 0, sizeof(struct blob_buf));
+		blob_buf_init(&bb, 0);
+		memset(&bbf_ctx, 0, sizeof(struct dmctx));
+
+		set_bbfdatamodel_type(data->proto);
+		bbf_init(&bbf_ctx, data->instance);
+
+		fault = get_resolved_paths(&bbf_ctx, qpath, &resolved_list);
+
+		INFO("Preparing result for(%s), fault(%d)", qpath, fault);
+		if (fault) {
+			free_path_list(&resolved_list);
+			goto error;
+		} else {
+			prepare_pretty_result(depth, qpath, &bb, &bbf_ctx, &resolved_list, ROOT_NODE);
+		}
+
+		if (!validate_msglen(&bb)) {
+			ERR("IPC failed for path(%s)", data->qpath);
+		}
+
+		ubus_response = blobmsg_format_json(bb.head, true);
+		INFO("ubus_response for path %s - %s", qpath, ubus_response);
+		jobj_temp = json_tokener_parse_verbose(ubus_response, &jerror);
+		if (!jobj_temp) {
+			ERR("Cannot parse ubus response, error %s", json_tokener_error_desc(jerror));
+			fault = FAULT_9002;
+			free_path_list(&resolved_list);
+			goto error;
+		}
+
+		if (merge_json_objects(jobj, jobj_temp)) {
+			ERR("Failed to merge usus responses from multiple paths!");
+			fault = FAULT_9002;
+			free_path_list(&resolved_list);
+			goto error;
+		}
+
+		INFO("Merged JSON - %s", json_object_to_json_string_ext(jobj, JSON_C_TO_STRING_PLAIN));
+
+		// free
+		blob_buf_free(&bb);
+		free_path_list(&resolved_list);
+		bbf_cleanup(&bbf_ctx);
+		json_object_put(jobj_temp);
+		free(ubus_response);
+		ubus_response = NULL;
+	}
+
+	memset(&bb, 0, sizeof(struct blob_buf));
+	blob_buf_init(&bb, 0);
+	if (!blobmsg_add_object(&bb, jobj)) {
+		ERR("Cannot convert JSON object to blobmsg!");
+		fill_err_code(&bb, FAULT_9002);
+		ubus_send_reply(ctx, req, bb.head);
+		blob_buf_free(&bb);
+		json_object_put(jobj);
+		return;
+	}
+
+	ubus_send_reply(ctx, req, bb.head);
+
+	// Apply all bbfdm changes
+	if (is_transaction_running() == false)
+		bbf_uci_commit_bbfdm();
+
+	blob_buf_free(&bb);
+	json_object_put(jobj);
+	return;
+
+error:
+	memset(&bb, 0, sizeof(struct blob_buf));
+	blob_buf_init(&bb, 0);
+	fill_err_code(&bb, fault);
+	ubus_send_reply(ctx, req, bb.head);
+	blob_buf_free(&bb);
+	bbf_cleanup(&bbf_ctx);
+	json_object_put(jobj_temp);
+	free(ubus_response);
+	ubus_response = NULL;
+	return;
+}
+
+void usp_raw_get_mpath(usp_data_t *data)
 {
 	struct blob_buf bb;
 
diff --git a/src/get.h b/src/get.h
index 67e8fa0..ec3f140 100644
--- a/src/get.h
+++ b/src/get.h
@@ -25,7 +25,8 @@ void usp_validate_path(usp_data_t *data);
 void usp_get_value(usp_data_t *data);
 void usp_get_instance(usp_data_t *data);
 void usp_get_name(usp_data_t *data);
-void get_mpath(usp_data_t *data);
+void usp_get_mpath(usp_data_t *data);
+void usp_raw_get_mpath(usp_data_t *data);
 void usp_get_value_async(usp_data_t *data, void *output);
 
 #endif /* GET_H */
diff --git a/src/get_helper.c b/src/get_helper.c
index c6f1948..ef45b47 100644
--- a/src/get_helper.c
+++ b/src/get_helper.c
@@ -215,6 +215,91 @@ int get_resolved_paths(struct dmctx *bbf_ctx, char *qpath, struct list_head *res
 	return fault;
 }
 
+int merge_json_objects(struct json_object *dest, struct json_object *src)
+{
+	if (!dest || !src) {
+		ERR("dest or src is NULL!");
+		return -1;
+	}
+
+	json_object_object_foreach(src, key, val)
+	{
+		struct json_object *dest_obj;
+		json_type val_type = json_object_get_type(val);
+		// if a key doesn't exist in dest - copy object from src to dest
+		if (!json_object_object_get_ex(dest, key, &dest_obj)) {
+			struct json_object *temp;
+			INFO("[merge_json_objects] key %s", key);
+
+			if (!json_object_object_get_ex(src, key, &temp)) {
+				ERR("Failed to get object by \"%s\" key from source JSON object", key);
+				return -1;
+			}
+
+			json_object *val_obj = json_object_get(temp);
+			if (json_object_object_add(dest, key, val_obj)) {
+				ERR("Failed to add {\"%s\":%s} to a JSON object",
+					key, json_object_to_json_string_ext(val_obj, JSON_C_TO_STRING_PLAIN));
+				return -1;
+			}
+		} // if a key exists in dest and it is an object - call merge_json_objects() for child objects in dest and src
+		else if (val_type == json_type_object) {
+			struct json_object *temp;
+			if (!json_object_object_get_ex(src, key, &temp)) {
+				ERR("Failed to get object by \"%s\" key from source JSON object", key);
+				return -1;
+			}
+			struct json_object *src_obj = json_object_get(temp);
+
+			if (merge_json_objects(dest_obj, src_obj)) {
+				ERR("Failed to merge src {\"%s\":%s} JSON with dest {\"%s\":%s} JSON",
+					key, json_object_to_json_string_ext(src_obj, JSON_C_TO_STRING_PLAIN),
+					key, json_object_to_json_string_ext(dest_obj, JSON_C_TO_STRING_PLAIN));
+				return -1;
+			}
+			json_object_put(temp);
+		} // if key is an array in dest - call merge_json_objects() for each object in array in dest and src
+		else if (val_type == json_type_array) {
+			int index = 0;
+			struct json_object *current_src = json_object_array_get_idx(val, index);
+			struct json_object *current_dest = json_object_array_get_idx(dest_obj, index);
+
+			if (!current_src) {
+				ERR("Cannot merge JSON objects: src JSON has an empty array!");
+				return -1;
+			}
+			if (!current_dest) {
+				ERR("Cannot merge JSON objects: dest JSON has an empty array!");
+				return -1;
+			}
+
+			while (current_src && current_dest) {
+				if (json_object_get_type(current_src) == json_type_object) {
+					if (merge_json_objects(current_dest, current_src)) {
+						ERR("Failed to merge src JSON with dest JSON for key \"%s\", index {%d}", key, index + 1);
+						return -1;
+					}
+				}
+
+				++index;
+				current_src = json_object_array_get_idx(val, index);
+				current_dest = json_object_array_get_idx(dest_obj, index);
+
+				if (current_src && !current_dest) {
+					ERR("Cannot merge JSON objects: src JSON has more array elements than dest JSON!");
+					return -1;
+				}
+				if (!current_src && current_dest) {
+					ERR("Cannot merge JSON objects: src JSON has less array elements than dest JSON!");
+					return -1;
+				}
+			}
+		}
+	}
+
+	return 0;
+}
+
 bool get_instance(char *path, size_t start, char *instance)
 {
 	char *ptr;
diff --git a/src/get_helper.h b/src/get_helper.h
index c5119c7..9561a03 100644
--- a/src/get_helper.h
+++ b/src/get_helper.h
@@ -5,7 +5,7 @@
 #include "common.h"
 #include "strncpyt.h"
 #include <libbbf_api/dmbbf.h>
-
+#include <json-c/json.h>
 #include <libubus.h>
 
 enum operation {
@@ -57,6 +57,8 @@ int usp_dm_set(struct dmctx *dm_ctx, char *path, char *value);
 int get_resolved_paths(struct dmctx *bbf_ctx, char *qpath,
 		       struct list_head *resolved_paths);
 
+int merge_json_objects(struct json_object * dest, struct json_object *src);
+
 int usp_dm_operate(struct blob_buf *bb, char *path, char *input_params, bool raw, int instance);
 int usp_del_object(struct dmctx *bbf_ctx, struct blob_buf *bb, char *path,
 		   const char *pkey, struct list_head *update_list);
diff --git a/src/pretty_print.c b/src/pretty_print.c
index 4aff473..3d4eed6 100644
--- a/src/pretty_print.c
+++ b/src/pretty_print.c
@@ -159,13 +159,13 @@ static size_t get_glob_len(char *path)
 	return(ret);
 }
 
-static void resulting(uint8_t maxdepth, char *path, char *qPath, struct dmctx *bbf_ctx, struct list_head *pv_local)
+static void resulting(uint8_t maxdepth, char *path, char *qPath, struct dmctx *bbf_ctx,
+			struct list_head *pv_local, char *bPath)
 {
 	struct dm_parameter *n;
 	uint8_t count;
 
-	size_t plen = get_glob_len(qPath);
-	//size_t plen = 0;
+	size_t plen = bPath ? DM_STRLEN(bPath) : get_glob_len(qPath);
 	size_t path_len = DM_STRLEN(path);
 
 	list_for_each_entry(n, &bbf_ctx->list_parameter, list) {
@@ -409,14 +409,14 @@ void prepare_result_blob(struct blob_buf *bb, struct list_head *pv_list)
 }
 
 void prepare_pretty_result(uint8_t maxdepth, char *qPath, struct blob_buf *bb,
-			   struct dmctx *bbf_ctx, struct list_head *rslvd)
+			   struct dmctx *bbf_ctx, struct list_head *rslvd, char *bPath)
 {
 	struct pathNode *iter = NULL;
 
 	LIST_HEAD(pv_local);
 
 	list_for_each_entry(iter, rslvd, list) {
-		resulting(maxdepth, iter->path, qPath, bbf_ctx, &pv_local);
+		resulting(maxdepth, iter->path, qPath, bbf_ctx, &pv_local, bPath);
 	}
 
 	struct pvNode *pv;
diff --git a/src/pretty_print.h b/src/pretty_print.h
index ec76464..9c1450b 100644
--- a/src/pretty_print.h
+++ b/src/pretty_print.h
@@ -25,7 +25,7 @@
 
 void prepare_result_blob(struct blob_buf *bb, struct list_head *pv_list);
 void prepare_pretty_result(uint8_t maxdepth, char *qPath, struct blob_buf *bb,
-			   struct dmctx *bbf_ctx, struct list_head *rslvd);
+			   struct dmctx *bbf_ctx, struct list_head *rslvd, char *bPath);
 void prepare_result_raw(struct blob_buf *bb, struct dmctx *bbf_ctx, struct list_head *rslvd);
 void dump_pv_list(struct list_head *pv_list);
 void dump_resolved_list(struct list_head *resolved_list);
diff --git a/src/usp.c b/src/usp.c
index 79bb10f..ca38294 100644
--- a/src/usp.c
+++ b/src/usp.c
@@ -181,7 +181,7 @@ int get_multi(struct ubus_context *ctx,
 
 	set_bbfdatamodel_type(data.proto);
 
-	get_mpath(&data);
+	is_str_eq(obj->name, USPRAW) ? usp_raw_get_mpath(&data) : usp_get_mpath(&data);
 
 	free_path_list(&paths_list);
 
@@ -1040,6 +1040,7 @@ static struct ubus_method usp_methods[] = {
 	UBUS_METHOD_NOARG("list_operate", usp_list_operate),
 	UBUS_METHOD("get_supported_dm", usp_list_supported_dm, get_supported_dm_policy),
 	UBUS_METHOD("get", usp_get_handler, dm_get_policy),
+	UBUS_METHOD("getm_values", usp_getm_values, dm_getm_policy),
 	UBUS_METHOD("object_names", usp_get_handler, dm_get_policy),
 	UBUS_METHOD("instances", usp_get_handler, dm_get_policy),
 	UBUS_METHOD("validate", usp_get_handler, dm_get_policy),
