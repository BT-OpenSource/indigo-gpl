--- a/src/channels/chan_voicemngr.c
+++ b/src/channels/chan_voicemngr.c
@@ -134,6 +134,10 @@ static struct ast_channel *chan_voicemngr_new(struct chan_voicemngr_subchannel *
 		const struct ast_assigned_ids *assignedids, const struct ast_channel *requestor,
 		struct ast_format_cap *format);
 static int handle_dialtone_timeout(const void *data);
+static void chan_voicemngr_play_announcement(struct chan_voicemngr_pvt *p, const char *announce_type);
+static void handle_bt_digitmap(struct chan_voicemngr_subchannel *sub);
+static int handle_bt_interdigit_timeout(const void *data);
+static void chan_voicemngr_start_calling(struct chan_voicemngr_subchannel *sub, char* context);
 static int handle_congestion_timeout(const void *data);
 static int endpt_get_rtp_stats(int line);
 static int is_call_waiting_enabled(const char *sip_account);
@@ -1710,6 +1714,65 @@ static int chan_voicemngr_answer(struct ast_channel *ast)
 	return 0;
 }
 
+/*! \brief Custom BT interdigit timer timeout handler */
+static int handle_bt_interdigit_timeout(const void *data)
+{
+	ast_debug(9, "Interdigit timeout\n");
+	struct chan_voicemngr_pvt *p = (struct chan_voicemngr_pvt *) data;
+	pvt_lock(p, "interdigit callback");
+	p->interdigit_timer_id = -1;
+	struct chan_voicemngr_subchannel *sub = chan_voicemngr_get_active_subchannel(p);
+
+	if (strlen(p->dtmfbuf) >= channel_config[p->line_id].minimumnumberdigits &&
+		       ast_exists_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+		ast_log(LOG_NOTICE,"Interdigit timeout! Calling %s\n", p->dtmfbuf);
+		chan_voicemngr_start_calling(sub, p->context);
+	}
+	else {
+		chan_voicemngr_play_announcement(p, "number_unrecognised");
+	}
+
+	pvt_unlock(p);
+	return 0;
+}
+
+/*! \brief Custom BT digitmap handler */
+void handle_bt_digitmap(struct chan_voicemngr_subchannel *sub)
+{
+	struct chan_voicemngr_pvt *p = sub->parent;
+	int dtmfbuf_len = strlen(p->dtmfbuf);
+	int long_interdigit_timer = channel_config[p->line_id].timeoutmsec;
+	int short_interdigit_timer = channel_config[p->line_id].interdigitopenmsec;
+
+	if(dtmfbuf_len < channel_config[p->line_id].minimumnumberdigits) {
+		/* Haven't reached minimum number of digits */
+		ast_log(LOG_NOTICE, "Scheduling interdigit timeout of %d msec\n", long_interdigit_timer);
+		p->interdigit_timer_id = ast_sched_add(sched, long_interdigit_timer, handle_bt_interdigit_timeout, p);
+	}
+	else if (dtmfbuf_len > channel_config[p->line_id].maxnumberdigits) {
+		/* Reached max number of digits */
+		chan_voicemngr_play_announcement(p, "number_unrecognised");
+	}
+	else if (ast_exists_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+		if (ast_matchmore_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+			ast_log(LOG_NOTICE, "Exact match found but a longer alternative is also available. So scheduling interdigit timeout of %d msec\n", short_interdigit_timer);
+			p->interdigit_timer_id = ast_sched_add(sched, short_interdigit_timer, handle_bt_interdigit_timeout, p);
+		}
+		else {
+			ast_log(LOG_NOTICE, "Exact match found and no other alternative is available. So calling %s\n", p->dtmfbuf);
+			chan_voicemngr_start_calling(sub, p->context);
+		}
+	}
+	else if (ast_canmatch_extension(NULL, p->context, p->dtmfbuf, 1, p->cid_num)) {
+		ast_log(LOG_NOTICE, "A partial match found! So scheduling interdigit timeout of %d msec\n", long_interdigit_timer);
+		p->interdigit_timer_id = ast_sched_add(sched, long_interdigit_timer, handle_bt_interdigit_timeout, p);
+	}
+	else {
+		/* We have no match */
+		chan_voicemngr_play_announcement(p, "number_unrecognised");
+	}
+}
+
 /*
 * Map RTP data header value to a codec name
 */
@@ -3448,7 +3511,7 @@ static void chan_voicemngr_play_announcement(struct chan_voicemngr_pvt *p, const
 		sub->connection_id = ast_atomic_fetchadd_int((int *)&current_connection_id, +1);
 		chan_voicemngr_create_connection(sub);
 	}
-
+	ast_log(LOG_DEBUG, "Playing %s announcement\n", announce_type);
 	chan_voicemngr_new(sub, AST_STATE_RING, "0", announce_type, NULL, NULL, NULL);
 }
 
@@ -3794,7 +3857,7 @@ static void chan_voicemngr_process_event(struct endpt_event *ev)
 
 				if (sub->channel_state == DIALING) {
 					ast_debug(2, "Handle DTMF calling\n");
-					handle_dtmf_calling(sub);
+					handle_bt_digitmap(sub);
 				}
 				break;
 			}
@@ -4560,7 +4623,7 @@ static channel_settings channel_settings_create(void)
 		.context = "default",
 		.autodial_ext = "",
 		.ringsignal = 1,
-		.timeoutmsec = 4000,
+		.timeoutmsec = 20000,
 		.autodial_timeoutmsec = 60000,
 		.period = default_ptime,
 		.hangup_xfer = 0,
@@ -4571,6 +4634,9 @@ static channel_settings channel_settings_create(void)
 		.calleridenable = 0, //clip
                 .calleridnameenable = 0,  //cnip
                 .anonymouscallenable = 0, //clir
+		.minimumnumberdigits = 3,
+		.maxnumberdigits = 30,
+		.interdigitopenmsec = 4000,
 		.flashSpec = 0,
 		.emergency_numbers_list = "",
 	};
@@ -4600,12 +4666,14 @@ static void channel_settings_load(channel_settings *channel_config, struct ast_v
 			channel_config->ringsignal = ast_true(v->value)?1:0;
 		} else if (!strcasecmp(v->name, "dialoutmsec")) {
 			channel_config->timeoutmsec = atoi(v->value);
-                } else if (!strcasecmp(v->name, "interdigitopenmsec")) {
-                        channel_config->interdigitopenmsec = atoi(v->value);
-                } else if (!strcasecmp(v->name, "minimumnumberdigits")) {
-                        channel_config->minimumnumberdigits = atoi(v->value);
-                } else if (!strcasecmp(v->name, "terminationdigit")) {
-                        channel_config->terminationdigit =v->value[0];
+		} else if (!strcasecmp(v->name, "interdigitopenmsec")) {
+			channel_config->interdigitopenmsec = atoi(v->value);
+		} else if (!strcasecmp(v->name, "minimumnumberdigits")) {
+			channel_config->minimumnumberdigits = atoi(v->value);
+		} else if (!strcasecmp(v->name, "maxnumberdigits")) {
+			channel_config->maxnumberdigits = atoi(v->value);
+		} else if (!strcasecmp(v->name, "terminationdigit")) {
+			channel_config->terminationdigit =v->value[0];
 		} else if (!strcasecmp(v->name, "autodial_timeoutmsec")) {
 			channel_config->autodial_timeoutmsec = atoi(v->value);
 		} else if (!strcasecmp(v->name, "dialtone_timeoutmsec")) {
--- a/src/channels/chan_voicemngr.h
+++ b/src/channels/chan_voicemngr.h
@@ -289,6 +289,7 @@ typedef struct {
 	int timeoutmsec;
 	int interdigitopenmsec;
 	int minimumnumberdigits;
+	int maxnumberdigits;
 	char terminationdigit;
 	int period;
 	int hangup_xfer;
