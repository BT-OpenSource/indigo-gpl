--- a/include/asterisk/channel.h
+++ b/include/asterisk/channel.h
@@ -3150,6 +3150,20 @@ struct ast_channel *ast_channel_get_by_n
  */
 struct ast_channel *ast_channel_get_by_exten(const char *exten, const char *context);
 
+/*!
+ * \brief Find a channel by state and prefix
+ *
+ * \param state the state of channel to search for
+ * \param prefix the name prefix of channel to search for
+ *
+ * \details
+ * Return a channel that is currently at the specified state and name prefix.
+ *
+ * \retval a channel that is at the specified state and name prefix.
+ * \retval NULL if no channel was found
+ */
+struct ast_channel *ast_channel_get_by_state_and_prefix(enum ast_channel_state *state, const char *prefix);
+
 /*! @} End channel search functions. */
 
 /*!
--- a/main/channel.c
+++ b/main/channel.c
@@ -1460,6 +1460,35 @@ struct ast_channel *ast_channel_get_by_e
 	return ast_channel_callback(ast_channel_by_exten_cb, l_context, l_exten, 0);
 }
 
+static int ast_channel_by_state_and_prefix_cb(void *obj, void *arg, void *data, int flags)
+{
+	struct ast_channel *chan = obj;
+	enum ast_channel_state *state = (enum ast_channel_state *) arg;
+	const char *prefix = (char *) data;
+	int ret = CMP_MATCH;
+
+	if (ast_strlen_zero(prefix)) {
+		ast_log(LOG_ERROR, "BUG! Must supply prefix to match!\n");
+		return CMP_STOP;
+	}
+
+	ast_channel_lock(chan);
+	if ((strncmp(ast_channel_name(chan), prefix, strlen(prefix)))
+		|| (ast_channel_state(chan) != *state)) {
+		ret = 0; /* name or state match failed, keep looking */
+	}
+	ast_channel_unlock(chan);
+
+	return ret;
+}
+
+struct ast_channel *ast_channel_get_by_state_and_prefix(enum ast_channel_state *state, const char *prefix)
+{
+	enum ast_channel_state *l_state = state;
+	char *l_prefix = (char *) prefix;
+
+	return ast_channel_callback(ast_channel_by_state_and_prefix_cb, l_state, l_prefix, 0);
+}
 int ast_is_deferrable_frame(const struct ast_frame *frame)
 {
 	/* Do not add a default entry in this switch statement.  Each new
