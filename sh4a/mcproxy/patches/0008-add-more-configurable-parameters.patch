--- a/mcproxy/include/parser/configuration.hpp
+++ b/mcproxy/include/parser/configuration.hpp
@@ -41,6 +41,11 @@ private:
     group_mem_protocol m_gmp;
     std::shared_ptr<global_table_set> m_global_table_set;
     inst_def_set m_inst_def_set;
+    int m_qi = -1; // Query interval
+    int m_qri = -1; // Query response interval
+    int m_lmqi = -1; // Last member Query interval
+    int m_rv = -1; // robustness value
+    bool m_fastleave = true; // Fast leave
 
     //<line number (for a better error message output), command>
     std::vector<std::pair<unsigned int, std::string>> m_cmds;
@@ -60,6 +65,11 @@ public:
     const std::shared_ptr<const interfaces> get_interfaces_for_pinstance(const std::string& instance_name) const;
     group_mem_protocol get_group_mem_protocol() const;
     const inst_def_set& get_inst_def_set() const;
+    int get_query_interval() const;
+    int get_query_response_interval() const;
+    int get_last_member_query_interval() const;
+    int get_robustness_value() const;
+    bool get_fastleave() const;
 
     std::string to_string() const;
 
--- a/mcproxy/include/parser/parser.hpp
+++ b/mcproxy/include/parser/parser.hpp
@@ -34,7 +34,12 @@
 #include <memory>
 
 enum parser_type {
-    PT_PROTOCOL, PT_INSTANCE_DEFINITION, PT_TABLE, PT_INTERFACE_RULE_BINDING
+    PT_PROTOCOL, PT_INSTANCE_DEFINITION, PT_TABLE, PT_INTERFACE_RULE_BINDING,
+    PT_QI,
+    PT_QRI,
+    PT_LMQI,
+    PT_RV,
+    PT_FASTLEAVE
 };
 
 class parser
@@ -64,6 +69,7 @@ public:
     void parse_instance_definition(inst_def_set& ids);
     std::unique_ptr<table> parse_table(const std::shared_ptr<const global_table_set>& gts, group_mem_protocol gmp);
     void parse_interface_rule_binding(const std::shared_ptr<const global_table_set>& gts, group_mem_protocol gmp, const inst_def_set& ids);
+    int parse_get_pram_value();
 
     std::string to_string() const;
     friend std::ostream& operator<<(std::ostream& stream, const parser& scan);
--- a/mcproxy/src/parser/configuration.cpp
+++ b/mcproxy/src/parser/configuration.cpp
@@ -146,6 +146,26 @@ void configuration::run_parser()
             m_gmp = p.parse_group_mem_proto();
             break;
         }
+        case PT_QI: {
+            m_qi = p.parse_get_pram_value();
+            break;
+        }
+        case PT_QRI: {
+            m_qri = p.parse_get_pram_value();
+            break;
+        }
+        case PT_LMQI: {
+            m_lmqi = p.parse_get_pram_value();
+            break;
+        }
+        case PT_RV: {
+            m_rv = p.parse_get_pram_value();
+            break;
+        }
+        case PT_FASTLEAVE: {
+            m_fastleave = (p.parse_get_pram_value())?true:false;
+            break;
+        }
         case PT_INSTANCE_DEFINITION: {
             p.parse_instance_definition(m_inst_def_set);
             break;
@@ -260,6 +280,32 @@ group_mem_protocol configuration::get_gr
     return m_gmp;
 }
 
+int configuration::get_query_interval() const
+{
+    HC_LOG_TRACE("");
+    return m_qi;
+}
+int configuration::get_query_response_interval() const
+{
+    HC_LOG_TRACE("");
+    return m_qri;
+}
+int configuration::get_last_member_query_interval() const
+{
+    HC_LOG_TRACE("");
+    return m_lmqi;
+}
+int configuration::get_robustness_value() const
+{
+    HC_LOG_TRACE("");
+    return m_rv;
+}
+bool configuration::get_fastleave() const
+{
+    HC_LOG_TRACE("");
+    return m_fastleave;
+}
+
 const inst_def_set& configuration::get_inst_def_set() const
 {
     HC_LOG_TRACE("");
--- a/mcproxy/src/parser/parser.cpp
+++ b/mcproxy/src/parser/parser.cpp
@@ -24,7 +24,7 @@
 #include <algorithm>
 
 #include <stdexcept>
-	
+
 parser::parser(unsigned int current_line, const std::string& cmd)
     : m_scanner(current_line, cmd)
     , m_current_line(current_line)
@@ -40,6 +40,16 @@ parser_type parser::get_parser_type()
         return PT_PROTOCOL;
     } else if (m_current_token.get_type() == TT_TABLE) {
         return PT_TABLE;
+    } else if (m_current_token.get_type() == TT_QI) {
+        return PT_QI;
+    } else if (m_current_token.get_type() == TT_QRI) {
+        return PT_QRI;
+    } else if (m_current_token.get_type() == TT_LMQI) {
+        return PT_LMQI;
+    } else if (m_current_token.get_type() == TT_RV) {
+        return PT_RV;
+    } else if (m_current_token.get_type() == TT_FASTLEAVE) {
+        return PT_FASTLEAVE;
     } else if (m_current_token.get_type() == TT_PINSTANCE) {
         auto cmp_token = m_scanner.get_next_token(true, 1);
         if (cmp_token.get_type() == TT_DOUBLE_DOT || cmp_token.get_type() == TT_LEFT_BRACKET) {
@@ -98,6 +108,22 @@ group_mem_protocol parser::parse_group_m
     get_next_token();
     if (m_current_token.get_type() == TT_NIL) {
         return result;
+    } else {
+        HC_LOG_ERROR("failed to parse line " << m_current_line << " unknown token " << get_token_type_name(m_current_token.get_type()) << " with value " << m_current_token.get_string());
+        throw "failed to parse config file";
+    }
+}
+
+int parser::parse_get_pram_value()
+{
+    HC_LOG_TRACE("");
+    get_next_token();
+    std::cout << "value is :" << m_current_token.get_string() <<std::endl;
+
+    int result = std::atoi(m_current_token.get_string().c_str());
+    get_next_token();
+    if (m_current_token.get_type() == TT_NIL) {
+        return result;
     } else {
         HC_LOG_ERROR("failed to parse line " << m_current_line << " unknown token " << get_token_type_name(m_current_token.get_type()) << " with value " << m_current_token.get_string());
         throw "failed to parse config file";
--- a/mcproxy/src/parser/scanner.cpp
+++ b/mcproxy/src/parser/scanner.cpp
@@ -190,6 +190,16 @@ token scanner::read_next_token()
                 return TT_MUTEX;
             } else if (cmp_str.compare("disable") == 0) {
                 return TT_DISABLE;
+            } else if (cmp_str.compare("qi") == 0) {
+                return TT_QI;
+            } else if (cmp_str.compare("qri") == 0) {
+                return TT_QRI;
+            } else if (cmp_str.compare("lmqi") == 0) {
+                return TT_LMQI;
+            } else if (cmp_str.compare("rv") == 0) {
+                return TT_RV;
+            } else if (cmp_str.compare("fastleave") == 0) {
+                return TT_FASTLEAVE;
             } else {
                 return token(TT_STRING, s.str());
             }
--- a/mcproxy/src/proxy/proxy.cpp
+++ b/mcproxy/src/proxy/proxy.cpp
@@ -252,6 +252,31 @@ void proxy::start_proxy_instances()
             //tv.set_startup_query_interval(std::chrono::seconds(15));
             //tv.set_last_listener_query_count(2);
             //tv.set_last_listener_query_interval(std::chrono::seconds(4));
+            int val = m_configuration->get_query_interval();
+            std::cout << "QI :" << val <<std::endl;
+            if ( val > 0 ) {
+                    tv.set_query_interval(std::chrono::seconds(val));
+                    tv.set_startup_query_interval(std::chrono::seconds(val)/4);
+            }
+            val = m_configuration->get_query_response_interval();
+            std::cout << "QRI :" << val <<std::endl;
+            if ( val > 0 ) {
+                    tv.set_query_response_interval(std::chrono::milliseconds(val*100));
+            }
+            val = m_configuration->get_last_member_query_interval();
+            std::cout << "lmqi :" << val <<std::endl;
+            if ( val > 0 ) {
+                    tv.set_last_listener_query_interval(std::chrono::milliseconds(val*100));
+            }
+            val = m_configuration->get_robustness_value();
+            std::cout << "rv :" <<val <<std::endl;
+            if ( val > 0 ) {
+                    tv.set_robustness_variable(val);
+                    tv.set_last_listener_query_count(val);
+                    tv.set_startup_query_count(val);
+            }
+
+            std::cout << "fastleave :" <<m_configuration->get_fastleave() <<std::endl;
 
             pr_i->add_msg(std::make_shared<config_msg>(config_msg::ADD_DOWNSTREAM, if_index, d, tv));
         }
--- a/mcproxy/include/parser/token.hpp
+++ b/mcproxy/include/parser/token.hpp
@@ -59,7 +59,12 @@ enum token_type {
     TT_STAR, //"*"
     TT_PIPE, //"|"
     TT_STRING,
-    TT_NIL
+    TT_NIL,
+    TT_QI,
+    TT_QRI,
+    TT_LMQI,
+    TT_RV,
+    TT_FASTLEAVE
 };
 
 std::string get_token_type_name(token_type tt);
