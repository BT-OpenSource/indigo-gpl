Index: iproute2-6.3.0/include/uapi/linux/pkt_cls.h
===================================================================
--- iproute2-6.3.0.orig/include/uapi/linux/pkt_cls.h
+++ iproute2-6.3.0/include/uapi/linux/pkt_cls.h
@@ -262,6 +262,7 @@ struct tc_u32_sel {
 struct tc_u32_mark {
 	__u32		val;
 	__u32		mask;
+	__u32		idx;
 	__u32		success;
 };
 
Index: iproute2-6.3.0/tc/f_u32.c
===================================================================
--- iproute2-6.3.0.orig/tc/f_u32.c
+++ iproute2-6.3.0/tc/f_u32.c
@@ -651,6 +651,54 @@ static int parse_icmp(int *argc_p, char
 	return res;
 }
 
+static int parse_nd_mark(int *argc_p, char ***argv_p, struct nlmsghdr *n)
+{
+	int res = -1;
+	int argc = *argc_p;
+	char **argv = *argv_p;
+	struct tc_u32_mark mark;
+
+	if (argc <= 1)
+		return -1;
+
+	if (get_u32(&mark.idx, *argv, 0)) {
+		fprintf(stderr, "Illegal \"nd_mark\" index\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	if (get_u32(&mark.val, *argv, 0)) {
+		fprintf(stderr, "Illegal \"nd_mark\" value\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	if (get_u32(&mark.mask, *argv, 0)) {
+		fprintf(stderr, "Illegal \"nd_mark\" mask\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	if ((mark.val & mark.mask) != mark.val) {
+		fprintf(stderr, "Illegal \"nd_mark\" (impossible combination)\n");
+		return -1;
+	}
+
+	/* TODO: Make SKBUFF_MAX_EXTRA_MARK a kconfig so it's accessible
+	 * outside of the kernel. Should be used in this if statement. */
+	if (mark.idx > 1) {
+		fprintf(stderr, "Illegal \"nd_mark\" (Out of range)\n");
+		return -1;
+	}
+
+	addattr_l(n, MAX_MSG, TCA_U32_MARK, &mark, sizeof(mark));
+	res = 0;
+
+	*argc_p = argc;
+	*argv_p = argv;
+	return res;
+}
+
 static int parse_mark(int *argc_p, char ***argv_p, struct nlmsghdr *n)
 {
 	int res = -1;
@@ -658,6 +706,8 @@ static int parse_mark(int *argc_p, char
 	char **argv = *argv_p;
 	struct tc_u32_mark mark;
 
+	mark.idx = 0;
+
 	if (argc <= 1)
 		return -1;
 
@@ -723,6 +773,9 @@ static int parse_selector(int *argc_p, c
 	} else if (matches(*argv, "mark") == 0) {
 		NEXT_ARG();
 		res = parse_mark(&argc, &argv, n);
+	} else if (matches(*argv, "nd_mark") == 0) {
+		NEXT_ARG();
+		res = parse_nd_mark(&argc, &argv, n);
 	} else if (matches(*argv, "ether") == 0) {
 		NEXT_ARG();
 		res = parse_ether(&argc, &argv, sel);
@@ -1318,7 +1371,12 @@ static int u32_print_opt(struct filter_u
 			fprintf(f, "\n  Invalid mark (kernel&iproute2 mismatch)\n");
 		} else {
 			print_nl();
-			print_0xhex(PRINT_ANY, "fwmark_value", "  mark 0x%04x ", mark->val);
+			if (mark->idx == 0) {
+				print_0xhex(PRINT_ANY, "fwmark_value", "  mark 0x%04x ", mark->val);
+			} else {
+				print_int(PRINT_ANY, "fwmark_idx", "  mark[%d] ", mark->idx);
+				print_0xhex(PRINT_ANY, "fwmark_value", "0x%04x ", mark->val);
+			}
 			print_0xhex(PRINT_ANY, "fwmark_mask", "0x%04x ", mark->mask);
 			print_int(PRINT_ANY, "fwmark_success", "(success %d)", mark->success);
 		}
